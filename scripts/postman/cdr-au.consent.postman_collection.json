{
	"info": {
		"_postman_id": "92bece8b-5484-4840-b412-786258454564",
		"name": "_Consent Flow v1.2",
		"description": "20201211 - updated to work with CDR Register Test Harness v2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "S001 Create Client",
			"item": [
				{
					"name": "S001.T001 Create Brand/Software",
					"item": [
						{
							"name": "S001.T001.000 - Create Brand/Software",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var uuid = require('uuid');",
											"var myUUID = uuid.v4();",
											"",
											"pm.environment.set(\"flowUUID-datarecipient\", myUUID);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"legalEntityId\", response[\"data\"].legalEntityId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"legalEntityId\": \"{{data-recipient-id}}-{{flowUUID-datarecipient}}\",\n    \"legalEntityName\": \"{{data-recipient-id}} Ltd Pty\",\n    \"accreditationNumber\": \"123456\",\n    \"industry\": \"banking\",\n    \"logoUri\": \"https://mycompany.com/logo.png\",\n    \"dataRecipientBrands\": [\n        {\n            \"status\": \"ACTIVE\",\n            \"dataRecipientBrandId\": \"brand-{{flowUUID-datarecipient}}\",\n            \"brandName\": \"Brand One\",\n            \"logoUri\": \"https://mycompany.com/brand1/logo.png\",\n            \"softwareProducts\":[\n                {\n                    \"softwareProductId\": \"software-{{flowUUID-datarecipient}}\",\n                    \"softwareProductName\": \"Brand One Software One\",\n                    \"softwareProductDescription\": \"Brand One Software One Description\",\n                    \"logoUri\": \"https://mycompany.com/brand1/software1/logo.png\",\n                    \"status\": \"ACTIVE\",\n                    \"version\": \"1.0\",\n                    \"policyUri\": \"https://mycompany.com/brand1/software1/policy\",\n                    \"termsUri\": \"https://mycompany.com/brand1/software1/terms\",\n                    \"redirectUri\": \"https://httpbin.org/get,https://httpbin.org.au/get\",\n                    \"scope\": \"openid bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read bank:payees:read bank:regular_payments:read common:customer.basic:read common:customer.detail:read cdr:registration\",\n                    \"recipientBaseUri\": \"https://mycompany.com/brand1\",\n                    \"jwksUri\": \"http://cdrregister:8084/helper/JWKS/{{flowUUID-datarecipient}}\",\n                    \"revocationJwksUri\": \"{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/revocation\",\n                    \"sectorIdentifierUri\": \"{{cdr-register-testharness-host}}/cdr-register/v1/banking/data-recipients/brands/software-products/software-{{flowUUID-datarecipient}}/sector-uri-values\",\n                    \"sectorUriValues\": [\n                        \"https://httpbin.org/get\",\n                        \"https://httpbin.org.au/get\"\n                    ]\n                }\n            ]\n        }\n    ]\n\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/admin/model/dataRecipient",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"admin",
										"model",
										"dataRecipient"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T001.001 - Call sector uri url",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"legalEntityId\": \"{{data-recipient-id}}-{{flowUUID-datarecipient}}\",\n    \"legalEntityName\": \"{{data-recipient-id}} Ltd Pty\",\n    \"accreditationNumber\": \"123456\",\n    \"industry\": \"banking\",\n    \"logoUri\": \"https://mycompany.com/logo.png\",\n    \"dataRecipientBrands\": [\n        {\n            \"status\": \"ACTIVE\",\n            \"dataRecipientBrandId\": \"brand-{{flowUUID-datarecipient}}\",\n            \"brandName\": \"Brand One\",\n            \"logoUri\": \"https://mycompany.com/brand1/logo.png\",\n            \"softwareProducts\":[\n                {\n                    \"softwareProductId\": \"software-{{flowUUID-datarecipient}}\",\n                    \"softwareProductName\": \"Brand One Software One\",\n                    \"softwareProductDescription\": \"Brand One Software One Description\",\n                    \"logoUri\": \"https://mycompany.com/brand1/software1/logo.png\",\n                    \"status\": \"ACTIVE\",\n                    \"version\": \"1.0\",\n                    \"policyUri\": \"https://mycompany.com/brand1/software1/policy\",\n                    \"termsUri\": \"https://mycompany.com/brand1/software1/terms\",\n                    \"redirectUri\": \"https://httpbin.org/get\",\n                    \"scope\": \"openid bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read bank:payees:read bank:regular_payments:read common:customer.basic:read common:customer.detail:read cdr:registration\",\n                    \"recipientBaseUri\": \"https://mycompany.com/brand1\",\n                    \"jwksUri\": \"http://cdrregister:8084/helper/JWKS/{{flowUUID-datarecipient}}\",\n                    \"revocationJwksUri\": \"{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/revocation\"\n                }\n            ]\n        }\n    ]\n\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/cdr-register/v1/banking/data-recipients/brands/software-products/software-{{flowUUID-datarecipient}}/sector-uri-values",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"cdr-register",
										"v1",
										"banking",
										"data-recipients",
										"brands",
										"software-products",
										"software-{{flowUUID-datarecipient}}",
										"sector-uri-values"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T001.002 - Get CDR Register Endpoints",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate token_endpoint property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('token_endpoint');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"registerTokenEndpoint\", response.token_endpoint);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/.well-known/openid-configuration",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										".well-known",
										"openid-configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T001.003 - Get CDR Register Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate access_token property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"registerAccessToken\", response.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/as/token.oauth2",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"as",
										"token.oauth2"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T001.004 - Get SSA From Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var responseBlob = pm.response.text();",
											"    pm.environment.set(\"software-ssa\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{registerAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/banking/data-recipients/brands/brand-{{flowUUID-datarecipient}}/software-products/software-{{flowUUID-datarecipient}}/ssa",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"banking",
										"data-recipients",
										"brands",
										"brand-{{flowUUID-datarecipient}}",
										"software-products",
										"software-{{flowUUID-datarecipient}}",
										"ssa"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T001.005 - Get Private JWK (non-standard)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate kty is RSA\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.keys[0].kty).to.equal('RSA');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"software-jwks-private\", btoa(JSON.stringify(response.keys[0])));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T001.006 - Generate Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"software-dcr-requestjwt\", response[\"request-jwt\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"iss\": \"software-{{flowUUID-datarecipient}}\",\n  \"aud\": \"{{dh-idp-host}}\",\n  \"software_statement\": \"{{software-ssa}}\",\n  \"token_endpoint_auth_signing_alg\": \"PS256\",\n  \"grant_types\": [\n    \"authorization_code\",\n    \"client_credentials\",\n    \"refresh_token\"\n  ],\n  \"request_object_signing_alg\": \"PS256\",\n  \"redirect_uris\": [\n    \"https://httpbin.org/get\",\n    \"https://httpbin.org.au/get\"\n  ],\n  \"token_endpoint_auth_method\": \"private_key_jwt\",\n  \"response_types\": [\n    \"code id_token\"\n  ],\n  \"id_token_signed_response_alg\": \"PS256\",\n  \"id_token_encrypted_response_alg\": \"RSA-OAEP\",\n  \"id_token_encrypted_response_enc\":\"A256GCM\"\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/dcr",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"dcr"
									]
								}
							},
							"response": []
						},
						{
							"name": "S001.T001.007 - Call PingFederate DCR POST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate client_id property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client_id');",
											"});",
											"pm.test(\"Validate redirect_uris property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('redirect_uris');",
											"});",
											"pm.test(\"Validate redirect_uris contains 'https://httpbin.org/get'\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.redirect_uris).to.include('https://httpbin.org/get');",
											"    ",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"dcrClientId\", response.client_id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt",
										"type": "text"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{software-dcr-requestjwt}}"
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-register-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-register-endpoint}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "S002 Consent Flow - Happy Scenario",
			"item": [
				{
					"name": "S002.T001 Obtain Access Token",
					"item": [
						{
							"name": "S002.T001.001 - Download Private Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var responseBlob = btoa(JSON.stringify(response.keys[0]));",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.002 - Generate Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:regular_payments:read bank:payees:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\",\n  \"code_challenge\":\"{{pkce-challenge}}\",\n  \"code_challenge_method\": \"S256\",\n  \"state\": \"xyz\"\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"requestJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.003 - Initiate Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false,
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-request-url}}",
									"host": [
										"{{consent-request-url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.004 - Provide username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "subject",
											"value": "crn0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.005 - Verify OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-ref\", $( \"input[name='REF']\" ).val());",
											"    pm.environment.set(\"consent-action\", $( \"form\" ).attr(\"action\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_VALUE",
											"value": "123456",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_STATE",
											"value": "true",
											"type": "text"
										},
										{
											"key": "CSRF_TOKEN",
											"value": "{{consent-request-otp-csrf}}",
											"type": "text"
										},
										{
											"key": "submitform",
											"value": "true",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.006 - Load Consent Agentless App",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-consent-completeurl\", $( \"form\" ).attr(\"action\"));",
											"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).eq(0).val());",
											"    pm.environment.set(\"consent-request-consent-account-2\", $( \"input[name='accounts']\" ).eq(1).val());",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allowInteraction",
											"value": "true",
											"type": "text"
										},
										{
											"key": "connectionId",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "resumePath",
											"value": "{{consent-request-nonceurl}}",
											"type": "text"
										},
										{
											"key": "reauth",
											"value": "false",
											"type": "text"
										},
										{
											"key": "REF",
											"value": "{{consent-ref}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{consent-action}}",
									"host": [
										"{{consent-action}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.006 - Perform consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    pm.environment.set(\"consent-ref-redirect\", locationHeader);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false,
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account}}",
											"type": "text"
										},
										{
											"key": "approved",
											"value": "allow",
											"type": "text"
										},
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account-2}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{consent-request-consent-completeurl}}",
									"host": [
										"{{consent-request-consent-completeurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.006 - Follow REF Redirect",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    if(!locationHeader)",
											"        locationHeader = pm.response.headers.get(\"Referer\");",
											"",
											"    var locationParams = locationHeader.split(\"#\")[1];",
											"    const eachParamArray = locationParams.split('&');",
											"    let params = {};",
											"    eachParamArray.forEach((param) => {",
											"        const key = param.split('=')[0];",
											"        const value = param.split('=')[1];",
											"        Object.assign(params, {[key]: value});",
											"    });",
											"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
											"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
											"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
											"    pm.environment.set(\"consent-request-authcode-callback-id_token\", params[\"id_token\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-ref-redirect}}",
									"host": [
										"{{consent-ref-redirect}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.008 - Test ID Token from Authz Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//CDR ID Token OIDC Requirements",
											"pm.test(\"Validate ID Token has ISS -  REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iss');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has sub - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('sub');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has exp - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('exp');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has iat - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iat');",
											"});",
											"",
											"//CDR ID Token FAPI-RW Requirements",
											"pm.test(\"Validate ID Token has nonce - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('nonce');",
											"});",
											"",
											"pm.test(\"Validate ID Token has s_hash - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('s_hash');",
											"});",
											"",
											"pm.test(\"Validate ID Token has c_hash - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('c_hash');",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{consent-request-authcode-callback-id_token}}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/reflectIDToken",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"reflectIDToken"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.009 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.010 - Perform code exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Validate id_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('id_token');",
											"});",
											"pm.test(\"Validate refresh_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('refresh_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
											"    pm.environment.set(\"consent-request-id-token\", response.id_token);",
											"    pm.environment.set(\"consent-request-refresh-token\", response.refresh_token);",
											"    pm.environment.set(\"consent-cdr-arrangement-id\", response[\"cdr_arrangement_id\"]);",
											"});",
											"",
											"",
											"function jwt_decode_payload(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return JSON.parse(atob(parts[1]));",
											"}",
											"",
											"function jwt_decode_header(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return JSON.parse(atob(parts[0]));",
											"}",
											"function jwt_parts(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return parts.length;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{consent-request-authcode-callback-code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{pkce-challenge-s256}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T001.011 - Test ID Token from Token Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//CDR ID Token OIDC Requirements",
											"pm.test(\"Validate ID Token has ISS -  REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iss');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has sub - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('sub');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has exp - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('exp');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has iat - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iat');",
											"});",
											"",
											"//CDR ID Token FAPI-RW Requirements",
											"pm.test(\"Validate ID Token has nonce - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('nonce');",
											"});",
											"",
											"pm.test(\"Validate ID Token has s_hash - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('s_hash');",
											"});",
											"",
											"pm.test(\"Validate ID Token has c_hash - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('c_hash');",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{consent-request-id-token}}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/reflectIDToken",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"reflectIDToken"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "S002.T002 Introspect Tokens",
					"item": [
						{
							"name": "S002.T002.001 Introspect Refresh Token",
							"item": [
								{
									"name": "S002.T002.001.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												},
												{
													"key": "issuer",
													"value": "xxx",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S002.T002.001.002 - Introspect Refresh Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
													"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
													"});",
													"pm.test(\"Validate exp is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('exp');",
													"});",
													"pm.test(\"Validate cdr_arrangement_id is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('cdr_arrangement_id');",
													"});",
													"pm.test(\"Validate active=true\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response.active).to.equal(true);",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-cdr-arrangement-id\", response[\"cdr_arrangement_id\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Certificate",
												"value": "{{mtlsHeader}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token",
													"value": "{{consent-request-refresh-token}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-introspect-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-introspect-endpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "S003.T002.001 Introspect Access Token - Should fail",
							"item": [
								{
									"name": "S003.T002.002.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S003.T002.002.002 - Introspect Access Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate response active=false\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response.active).to.equal(false);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Certificate",
												"value": "{{mtlsHeader}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token",
													"value": "{{consent-request-access-token}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												},
												{
													"key": "token_type_hint",
													"value": "refresh_token",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-introspect-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-introspect-endpoint}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "S002.T003 Refresh Tokens",
					"item": [
						{
							"name": "S002.T003.001 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T003.002 - Perform refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
											"    pm.environment.set(\"consent-request-refresh-token\", response.refresh_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "{{consent-request-refresh-token}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T003.003 - Test ID Token from Token Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//CDR ID Token OIDC Requirements",
											"pm.test(\"Validate ID Token has ISS -  REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iss');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has sub - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('sub');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has exp - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('exp');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has iat - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iat');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{consent-request-id-token}}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/reflectIDToken",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"reflectIDToken"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "S002.T004 Call Bank API's",
					"item": [
						{
							"name": "S002.T004.001 - Get account list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var accountId = response.data.accounts[0].accountId;",
											"",
											"    pm.environment.set(\"consent-request-account-id\", accountId);",
											"});",
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T004.002 - Get account balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"type": "text",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts/{{consent-request-account-id}}/balance",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts",
										"{{consent-request-account-id}}",
										"balance"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T004.003 - Get account details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"type": "text",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts/{{consent-request-account-id}}",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts",
										"{{consent-request-account-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T004.004 - Get account transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var transactionId = response.data.transactions[0].transactionId;",
											"",
											"    pm.environment.set(\"consent-request-transactionId-id-1\", transactionId);",
											"});",
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"type": "text",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts/{{consent-request-account-id}}/transactions",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts",
										"{{consent-request-account-id}}",
										"transactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T004.005 - Get account transaction details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"type": "text",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts/{{consent-request-account-id}}/transactions/{{consent-request-transactionId-id-1}}",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts",
										"{{consent-request-account-id}}",
										"transactions",
										"{{consent-request-transactionId-id-1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T004.006 - Get account bulk balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"type": "text",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts/balances",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts",
										"balances"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T004.007 - Get account bulk balance specify account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-v",
										"type": "text",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"accountIds\": [\n      \"{{consent-request-account-id}}\"\n    ]\n  },\n  \"meta\": {}\n}"
								},
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts/balances",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts",
										"balances"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T004.008 - Get account direct debits",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"type": "text",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts/{{consent-request-account-id}}/direct-debits",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts",
										"{{consent-request-account-id}}",
										"direct-debits"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T004.009 - Get bulk direct debits",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"type": "text",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts/direct-debits",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts",
										"direct-debits"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T004.010 - Get bulk direct debits specify account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-v",
										"type": "text",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"accountIds\": [\n      \"{{consent-request-account-id}}\"\n    ]\n  },\n  \"meta\": {}\n}"
								},
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts/direct-debits",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts",
										"direct-debits"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T004.011 - Get account scheduled payments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"type": "text",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts/{{consent-request-account-id}}/payments/scheduled",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts",
										"{{consent-request-account-id}}",
										"payments",
										"scheduled"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T004.012 - Get bulk scheduled payments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"type": "text",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/payments/scheduled",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"payments",
										"scheduled"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T004.013 - Get bulk scheduled payments specify account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-v",
										"type": "text",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"accountIds\": [\n      \"{{consent-request-account-id}}\"\n    ]\n  },\n  \"meta\": {}\n}"
								},
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/payments/scheduled",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"payments",
										"scheduled"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T004.014 - Get payees",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"type": "text",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/payees",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"payees"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "S002.T005 Userinfo",
					"item": [
						{
							"name": "S002.T005.001.002 - Call userinfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-userinfo-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-userinfo-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "S002.T006 Grant Management API",
					"item": [
						{
							"name": "S002.T006.001 - PF - Get User Grants",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{grant-management-user}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{grant-management-password}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-XSRF-HEADER",
										"value": "PingFederate",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{dh-idp-host}}/pf-ws/rest/oauth/users/{{consent-request-access-token-sub}}/grants",
									"host": [
										"{{dh-idp-host}}"
									],
									"path": [
										"pf-ws",
										"rest",
										"oauth",
										"users",
										"{{consent-request-access-token-sub}}",
										"grants"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T006.002 - PF - Get Active User Grant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{grant-management-user}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{grant-management-password}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-XSRF-HEADER",
										"type": "text",
										"value": "PingFederate"
									}
								],
								"url": {
									"raw": "{{dh-idp-host}}/pf-ws/rest/oauth/users/{{consent-request-access-token-sub}}/grants/{{consent-cdr-arrangement-id}}",
									"host": [
										"{{dh-idp-host}}"
									],
									"path": [
										"pf-ws",
										"rest",
										"oauth",
										"users",
										"{{consent-request-access-token-sub}}",
										"grants",
										"{{consent-cdr-arrangement-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T006.003 - ConsentAPI - Get Consent Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{\"sub\":\"{{consent-request-access-token-sub}}\",\"active\":true,\"scope\":\"consent\"}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{dh-dir-host}}/consent/v1/consents/{{consent-cdr-arrangement-id}}",
									"host": [
										"{{dh-dir-host}}"
									],
									"path": [
										"consent",
										"v1",
										"consents",
										"{{consent-cdr-arrangement-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T006.004 - ConsentAPI - Get All User Consent Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{\"sub\":\"{{consent-request-access-token-sub}}\",\"active\":true,\"scope\":\"consent\"}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{dh-dir-host}}/consent/v1/consents",
									"host": [
										"{{dh-dir-host}}"
									],
									"path": [
										"consent",
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T006.005 - ConsentAPI - User revoke consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{\"sub\":\"{{consent-request-access-token-sub}}\",\"active\":true,\"scope\":\"consent\"}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"revoked\"\n}"
								},
								"url": {
									"raw": "{{dh-dir-host}}/consent/v1/consents/{{consent-cdr-arrangement-id}}",
									"host": [
										"{{dh-dir-host}}"
									],
									"path": [
										"consent",
										"v1",
										"consents",
										"{{consent-cdr-arrangement-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T006.006 - PF - Get Revoked User Grant (404)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{grant-management-user}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{grant-management-password}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-XSRF-HEADER",
										"type": "text",
										"value": "PingFederate"
									}
								],
								"url": {
									"raw": "{{dh-idp-host}}/pf-ws/rest/oauth/users/{{consent-request-access-token-sub}}/grants/{{consent-cdr-arrangement-id}}",
									"host": [
										"{{dh-idp-host}}"
									],
									"path": [
										"pf-ws",
										"rest",
										"oauth",
										"users",
										"{{consent-request-access-token-sub}}",
										"grants",
										"{{consent-cdr-arrangement-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T006.007 - ConsentAPI - User reactivate consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{\"sub\":\"{{consent-request-access-token-sub}}\",\"active\":true,\"scope\":\"consent\"}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"accepted\"\n}"
								},
								"url": {
									"raw": "{{dh-dir-host}}/consent/v1/consents/{{consent-cdr-arrangement-id}}",
									"host": [
										"{{dh-dir-host}}"
									],
									"path": [
										"consent",
										"v1",
										"consents",
										"{{consent-cdr-arrangement-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T006.008 - PF - Get Reactived User Grant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{grant-management-user}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{grant-management-password}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-XSRF-HEADER",
										"type": "text",
										"value": "PingFederate"
									}
								],
								"url": {
									"raw": "{{dh-idp-host}}/pf-ws/rest/oauth/users/{{consent-request-access-token-sub}}/grants/{{consent-cdr-arrangement-id}}",
									"host": [
										"{{dh-idp-host}}"
									],
									"path": [
										"pf-ws",
										"rest",
										"oauth",
										"users",
										"{{consent-request-access-token-sub}}",
										"grants",
										"{{consent-cdr-arrangement-id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "S002.T007 Revoke Tokens",
					"item": [
						{
							"name": "S002.T007.000 Revocation - Access Token",
							"item": [
								{
									"name": "S002.T007.000.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S002.T007.000.002 - Perform revoke token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
													"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Certificate",
												"value": "{{mtlsHeader}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token",
													"value": "{{consent-request-access-token}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-revocation-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-revocation-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "S002.T007.000.003 - Get account list - should fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=401\", function () {",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{consent-request-access-token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"type": "text",
												"value": "1"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{dh-api-host}}/v1/banking/accounts",
											"host": [
												"{{dh-api-host}}"
											],
											"path": [
												"v1",
												"banking",
												"accounts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "S002.T007.001 Revocation - Refresh Token",
							"item": [
								{
									"name": "S002.T007.001.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S002.T007.001.002 - Perform revoke token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
													"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Certificate",
												"value": "{{mtlsHeader}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token",
													"value": "{{consent-request-refresh-token}}",
													"type": "text"
												},
												{
													"key": "token_type_hint",
													"value": "refresh_token",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-revocation-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-revocation-endpoint}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "S002.T007.002 Refresh Tokens - should fail",
							"item": [
								{
									"name": "S002.T007.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S002.T007.002 - Perform refresh token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Certificate",
												"value": "{{mtlsHeader}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "refresh_token",
													"value": "{{consent-request-refresh-token}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "refresh_token",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{default-redirecturi}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "S002.T007.003 - Query Consent API",
							"item": [
								{
									"name": "S002.T007.003.001 - PF - Get Revoked User Grant (404)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{grant-management-user}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{grant-management-password}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "X-XSRF-HEADER",
												"type": "text",
												"value": "PingFederate"
											}
										],
										"url": {
											"raw": "{{dh-idp-host}}/pf-ws/rest/oauth/users/{{consent-request-access-token-sub}}/grants/{{consent-cdr-arrangement-id}}",
											"host": [
												"{{dh-idp-host}}"
											],
											"path": [
												"pf-ws",
												"rest",
												"oauth",
												"users",
												"{{consent-request-access-token-sub}}",
												"grants",
												"{{consent-cdr-arrangement-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "S002.T007.003.001 - ConsentAPI - Get Consent Details (404)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{\"sub\":\"{{consent-request-access-token-sub}}\",\"active\":true,\"scope\":\"consent\"}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{dh-dir-host}}/consent/v1/consents/{{consent-cdr-arrangement-id}}",
											"host": [
												"{{dh-dir-host}}"
											],
											"path": [
												"consent",
												"v1",
												"consents",
												"{{consent-cdr-arrangement-id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "S003 - Push Authorization Request",
			"item": [
				{
					"name": "S003.T001.001 - Download Private Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate response status=200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Set environment variables for next test\", function () {",
									"    var response = pm.response.json();",
									"    var responseBlob = btoa(JSON.stringify(response.keys[0]));",
									"    pm.environment.set(\"software-jwks-private\", responseBlob);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
							"host": [
								"{{cdr-register-testharness-host}}"
							],
							"path": [
								"helper",
								"JWKS",
								"{{flowUUID-datarecipient}}",
								"private"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.002 - Create Request JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate response status=200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate request-jwt property exists\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.have.property('request-jwt');",
									"});",
									"pm.test(\"Set environment variables for next test\", function () {",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"consent-request-jwt\", response[\"request-jwt\"]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-private-jwk",
								"type": "text",
								"value": "{{software-jwks-private}}"
							},
							{
								"key": "x-nonce",
								"type": "text",
								"value": "{{default-nonce}}"
							},
							{
								"key": "x-state",
								"type": "text",
								"value": "{{default-state}}"
							},
							{
								"key": "x-issuer",
								"type": "text",
								"value": "{{dcrClientId}}"
							},
							{
								"key": "x-duration-seconds",
								"type": "text",
								"value": "60"
							},
							{
								"key": "x-dataholder-authorization-endpoint",
								"type": "text",
								"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}"
							},
							{
								"key": "x-response-type",
								"type": "text",
								"value": "code id_token"
							},
							{
								"key": "x-scope",
								"type": "text",
								"value": "openid profile bank:accounts.basic:read bank:transactions:read"
							},
							{
								"key": "x-redirecturi",
								"type": "text",
								"value": "{{default-redirecturi}}"
							},
							{
								"key": "x-maxage",
								"type": "text",
								"value": "-1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"aud\":\"{{dh-idp-host}}\",\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\",\n  \"code_challenge\":\"{{pkce-challenge}}\",\n  \"code_challenge_method\": \"S256\",\n  \"state\": \"xyz\"\n}"
						},
						"url": {
							"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
							"host": [
								"{{cdr-register-testharness-host}}"
							],
							"path": [
								"testtool",
								"datarecipient",
								"requestJWT"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.003 - Creates JWT-Bearer Client Assertion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate response status=200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate client assertion is available\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.have.property('client-assertion');",
									"});",
									"pm.test(\"Set environment variables for next test\", function () {",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "private-jwk",
									"value": "{{software-jwks-private}}",
									"type": "text"
								},
								{
									"key": "client-id",
									"value": "{{dcrClientId}}",
									"type": "text"
								},
								{
									"key": "token-endpoint",
									"value": "{{dh-idp-host}}/as/token.oauth2",
									"type": "text"
								},
								{
									"key": "kid",
									"value": "{{softwareId}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
							"host": [
								"{{cdr-register-testharness-host}}"
							],
							"path": [
								"testtool",
								"datarecipient",
								"createClientAssertion"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.004 - Initiate PAR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate response status=201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
									"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
									"});",
									"pm.test(\"Validate request-jwt property exists\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.have.property('request_uri');",
									"});",
									"pm.test(\"Set environment variables for next test\", function () {",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"consent-request-uri\", response[\"request_uri\"]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Certificate",
								"value": "{{mtlsHeader}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{dcrClientId}}",
									"type": "text"
								},
								{
									"key": "request",
									"value": "{{consent-request-jwt}}",
									"type": "text"
								},
								{
									"key": "client_assertion",
									"value": "{{consent-client-assertion}}",
									"type": "text"
								},
								{
									"key": "client_assertion_type",
									"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "openid bank:accounts.basic:read bank:transactions:read",
									"type": "text"
								},
								{
									"key": "response_type",
									"value": "code id_token",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{dh-idp-host}}/as/par.oauth2",
							"host": [
								"{{dh-idp-host}}"
							],
							"path": [
								"as",
								"par.oauth2"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.005 - Initiate Consent Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"pm.test(\"Set environment variables for next test\", function () {",
									"    const $ = cheerio.load(responseBody);",
									"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}?request_uri={{consent-request-uri}}&client_id={{dcrClientId}}",
							"host": [
								"{{dh-idp-host}}{{dh-idp-authorization-endpoint}}"
							],
							"query": [
								{
									"key": "request_uri",
									"value": "{{consent-request-uri}}"
								},
								{
									"key": "client_id",
									"value": "{{dcrClientId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.006 - Provide username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Set environment variables for next test\", function () {",
									"    const $ = cheerio.load(responseBody);",
									"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "$ok",
									"value": "clicked",
									"type": "text"
								},
								{
									"key": "subject",
									"value": "crn0",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
							"host": [
								"{{dh-idp-host}}{{consent-request-nonceurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.007 - Verify OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Set environment variables for next test\", function () {",
									"    const $ = cheerio.load(responseBody);",
									"    pm.environment.set(\"consent-ref\", $( \"input[name='REF']\" ).val());",
									"    pm.environment.set(\"consent-action\", $( \"form\" ).attr(\"action\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "$ok",
									"value": "clicked",
									"type": "text"
								},
								{
									"key": "CODE_VERIFICATION_VALUE",
									"value": "123456",
									"type": "text"
								},
								{
									"key": "CODE_VERIFICATION_STATE",
									"value": "true",
									"type": "text"
								},
								{
									"key": "CSRF_TOKEN",
									"value": "{{consent-request-otp-csrf}}",
									"type": "text"
								},
								{
									"key": "submitform",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
							"host": [
								"{{dh-idp-host}}{{consent-request-nonceurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.008 - Load Consent Agentless App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Set environment variables for next test\", function () {",
									"    const $ = cheerio.load(responseBody);",
									"    pm.environment.set(\"consent-request-consent-completeurl\", $( \"form\" ).attr(\"action\"));",
									"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).eq(0).val());",
									"    pm.environment.set(\"consent-request-consent-account-2\", $( \"input[name='accounts']\" ).eq(1).val());",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "allowInteraction",
									"value": "true",
									"type": "text"
								},
								{
									"key": "connectionId",
									"value": "{{dcrClientId}}",
									"type": "text"
								},
								{
									"key": "resumePath",
									"value": "{{consent-request-nonceurl}}",
									"type": "text"
								},
								{
									"key": "reauth",
									"value": "false",
									"type": "text"
								},
								{
									"key": "REF",
									"value": "{{consent-ref}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{consent-action}}",
							"host": [
								"{{consent-action}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.008 - Perform consent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Set environment variables for next test\", function () {",
									"    var locationHeader = pm.response.headers.get(\"Location\");",
									"    pm.environment.set(\"consent-ref-redirect\", locationHeader);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false,
						"followRedirects": false
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "accounts",
									"value": "{{consent-request-consent-account}}",
									"type": "text"
								},
								{
									"key": "cSRFToken",
									"value": "{{consent-request-consent-csrf}}",
									"type": "text"
								},
								{
									"key": "approved",
									"value": "allow",
									"type": "text"
								},
								{
									"key": "scopes",
									"value": "bank:accounts.basic:read",
									"type": "text"
								},
								{
									"key": "scopes",
									"value": "bank:transactions:read",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{consent-request-consent-completeurl}}",
							"host": [
								"{{consent-request-consent-completeurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.008 - Follow REF Redirect",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Set environment variables for next test\", function () {",
									"    var locationHeader = pm.response.headers.get(\"Location\");",
									"    if(!locationHeader)",
									"        locationHeader = pm.response.headers.get(\"Referer\");",
									"",
									"    var locationParams = locationHeader.split(\"#\")[1];",
									"    const eachParamArray = locationParams.split('&');",
									"    let params = {};",
									"    eachParamArray.forEach((param) => {",
									"        const key = param.split('=')[0];",
									"        const value = param.split('=')[1];",
									"        Object.assign(params, {[key]: value});",
									"    });",
									"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
									"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
									"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
									"    pm.environment.set(\"consent-request-authcode-callback-id_token\", params[\"id_token\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{consent-ref-redirect}}",
							"host": [
								"{{consent-ref-redirect}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.009 - Creates JWT-Bearer Client Assertion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate response status=200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate client assertion is available\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.have.property('client-assertion');",
									"});",
									"pm.test(\"Set environment variables for next test\", function () {",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "private-jwk",
									"value": "{{software-jwks-private}}",
									"type": "text"
								},
								{
									"key": "client-id",
									"value": "{{dcrClientId}}",
									"type": "text"
								},
								{
									"key": "token-endpoint",
									"value": "{{dh-idp-host}}/as/token.oauth2",
									"type": "text"
								},
								{
									"key": "kid",
									"value": "{{softwareId}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
							"host": [
								"{{cdr-register-testharness-host}}"
							],
							"path": [
								"testtool",
								"datarecipient",
								"createClientAssertion"
							]
						}
					},
					"response": []
				},
				{
					"name": "S003.T001.010 - Perform code exchange",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate response status=200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
									"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
									"});",
									"pm.test(\"Validate access_token is available\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.have.property('access_token');",
									"});",
									"pm.test(\"Validate id_token is available\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.have.property('id_token');",
									"});",
									"pm.test(\"Validate refresh_token is available\", function () {",
									"    var response = pm.response.json();",
									"    pm.expect(response).to.have.property('refresh_token');",
									"});",
									"pm.test(\"Set environment variables for next test\", function () {",
									"    var response = pm.response.json();",
									"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
									"    pm.environment.set(\"consent-request-id-token\", response.id_token);",
									"    pm.environment.set(\"consent-request-refresh-token\", response.refresh_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Certificate",
								"value": "{{mtlsHeader}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "code",
									"value": "{{consent-request-authcode-callback-code}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{dcrClientId}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "{{default-redirecturi}}",
									"type": "text"
								},
								{
									"key": "client_assertion_type",
									"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
									"type": "text"
								},
								{
									"key": "client_assertion",
									"value": "{{consent-client-assertion}}",
									"type": "text"
								},
								{
									"key": "code_verifier",
									"value": "{{pkce-challenge-s256}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
							"host": [
								"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "S004 CDR Arrangement ID",
			"item": [
				{
					"name": "S004.T001 Obtain Access Token",
					"item": [
						{
							"name": "S004.T001.001 - Download Private Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var responseBlob = btoa(JSON.stringify(response.keys[0]));",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.002 - Generate Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\",\n  \"code_challenge\":\"{{pkce-challenge}}\",\n  \"code_challenge_method\": \"S256\"\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"requestJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.003 - Initiate Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-request-url}}",
									"host": [
										"{{consent-request-url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.004 - Provide username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "subject",
											"value": "crn0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.005 - Verify OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-ref\", $( \"input[name='REF']\" ).val());",
											"    pm.environment.set(\"consent-action\", $( \"form\" ).attr(\"action\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_VALUE",
											"value": "123456",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_STATE",
											"value": "true",
											"type": "text"
										},
										{
											"key": "CSRF_TOKEN",
											"value": "{{consent-request-otp-csrf}}",
											"type": "text"
										},
										{
											"key": "submitform",
											"value": "true",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.006 - Load Consent Agentless App",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-consent-completeurl\", $( \"form\" ).attr(\"action\"));",
											"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).eq(0).val());",
											"    pm.environment.set(\"consent-request-consent-account-2\", $( \"input[name='accounts']\" ).eq(1).val());",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allowInteraction",
											"value": "true",
											"type": "text"
										},
										{
											"key": "connectionId",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "resumePath",
											"value": "{{consent-request-nonceurl}}",
											"type": "text"
										},
										{
											"key": "reauth",
											"value": "false",
											"type": "text"
										},
										{
											"key": "REF",
											"value": "{{consent-ref}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{consent-action}}",
									"host": [
										"{{consent-action}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.006 - Perform consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    pm.environment.set(\"consent-ref-redirect\", locationHeader);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false,
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account}}",
											"type": "text"
										},
										{
											"key": "cSRFToken",
											"value": "{{consent-request-consent-csrf}}",
											"type": "text"
										},
										{
											"key": "approved",
											"value": "allow",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:accounts.basic:read",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:transactions:read",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{consent-request-consent-completeurl}}",
									"host": [
										"{{consent-request-consent-completeurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.006 - Follow REF Redirect",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    if(!locationHeader)",
											"        locationHeader = pm.response.headers.get(\"Referer\");",
											"",
											"    var locationParams = locationHeader.split(\"#\")[1];",
											"    const eachParamArray = locationParams.split('&');",
											"    let params = {};",
											"    eachParamArray.forEach((param) => {",
											"        const key = param.split('=')[0];",
											"        const value = param.split('=')[1];",
											"        Object.assign(params, {[key]: value});",
											"    });",
											"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
											"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
											"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
											"    pm.environment.set(\"consent-request-authcode-callback-id_token\", params[\"id_token\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-ref-redirect}}",
									"host": [
										"{{consent-ref-redirect}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.007 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T001.008 - Perform code exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Validate id_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('id_token');",
											"});",
											"pm.test(\"Validate refresh_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('refresh_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
											"    pm.environment.set(\"consent-request-id-token\", response.id_token);",
											"    pm.environment.set(\"consent-request-refresh-token\", response.refresh_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{consent-request-authcode-callback-code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{pkce-challenge-s256}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "S004.T002 Introspect Tokens",
					"item": [
						{
							"name": "S004.T002.001 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T002.002 - Introspect Refresh Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate exp is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('exp');",
											"});",
											"pm.test(\"Validate cdr_arrangement_id is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('cdr_arrangement_id');",
											"});",
											"pm.test(\"Validate active=true\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.active).to.equal(true);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-cdr-arrangement-id\", response[\"cdr_arrangement_id\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token",
											"value": "{{consent-request-refresh-token}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-introspect-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-introspect-endpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "S004.T003 Obtain Concurrent Access Token",
					"item": [
						{
							"name": "S004.T003.001 - Download Private Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var responseBlob = btoa(JSON.stringify(response.keys[0]));",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T003.002 - Generate Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\",\n  \"code_challenge\":\"{{pkce-challenge}}\",\n  \"code_challenge_method\": \"S256\"\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"requestJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T003.003 - Initiate Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-request-url}}",
									"host": [
										"{{consent-request-url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T003.004 - Provide username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "subject",
											"value": "crn0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T003.005 - Verify OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-ref\", $( \"input[name='REF']\" ).val());",
											"    pm.environment.set(\"consent-action\", $( \"form\" ).attr(\"action\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_VALUE",
											"value": "123456",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_STATE",
											"value": "true",
											"type": "text"
										},
										{
											"key": "CSRF_TOKEN",
											"value": "{{consent-request-otp-csrf}}",
											"type": "text"
										},
										{
											"key": "submitform",
											"value": "true",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T003.006 - Load Consent Agentless App",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-consent-completeurl\", $( \"form\" ).attr(\"action\"));",
											"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).eq(0).val());",
											"    pm.environment.set(\"consent-request-consent-account-2\", $( \"input[name='accounts']\" ).eq(1).val());",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allowInteraction",
											"value": "true",
											"type": "text"
										},
										{
											"key": "connectionId",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "resumePath",
											"value": "{{consent-request-nonceurl}}",
											"type": "text"
										},
										{
											"key": "reauth",
											"value": "false",
											"type": "text"
										},
										{
											"key": "REF",
											"value": "{{consent-ref}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{consent-action}}",
									"host": [
										"{{consent-action}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T003.006 - Perform consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    pm.environment.set(\"consent-ref-redirect\", locationHeader);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false,
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account}}",
											"type": "text"
										},
										{
											"key": "cSRFToken",
											"value": "{{consent-request-consent-csrf}}",
											"type": "text"
										},
										{
											"key": "approved",
											"value": "allow",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:accounts.basic:read",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:transactions:read",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{consent-request-consent-completeurl}}",
									"host": [
										"{{consent-request-consent-completeurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T003.006 - Follow REF Redirect",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    if(!locationHeader)",
											"        locationHeader = pm.response.headers.get(\"Referer\");",
											"",
											"    var locationParams = locationHeader.split(\"#\")[1];",
											"    const eachParamArray = locationParams.split('&');",
											"    let params = {};",
											"    eachParamArray.forEach((param) => {",
											"        const key = param.split('=')[0];",
											"        const value = param.split('=')[1];",
											"        Object.assign(params, {[key]: value});",
											"    });",
											"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
											"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
											"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
											"    pm.environment.set(\"consent-request-authcode-callback-id_token\", params[\"id_token\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-ref-redirect}}",
									"host": [
										"{{consent-ref-redirect}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T003.007 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T003.008 - Perform code exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Validate id_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('id_token');",
											"});",
											"pm.test(\"Validate refresh_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('refresh_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token-concurrent\", response.access_token);",
											"    pm.environment.set(\"consent-request-id-token-concurrent\", response.id_token);",
											"    pm.environment.set(\"consent-request-refresh-token-concurrent\", response.refresh_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{consent-request-authcode-callback-code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{pkce-challenge-s256}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "S004.T004 Introspect Concurrent Tokens",
					"item": [
						{
							"name": "S004.T004.001 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T004.002 - Introspect Refresh Token - 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate exp is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('exp');",
											"});",
											"pm.test(\"Validate cdr_arrangement_id is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('cdr_arrangement_id');",
											"});",
											"pm.test(\"Validate active=true\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.active).to.equal(true);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-cdr-arrangement-id\", response[\"cdr_arrangement_id\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token",
											"value": "{{consent-request-refresh-token}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-introspect-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-introspect-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T004.003 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T004.004 - Introspect Refresh Token - 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate exp is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('exp');",
											"});",
											"pm.test(\"Validate cdr_arrangement_id is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('cdr_arrangement_id');",
											"});",
											"pm.test(\"Validate active=true\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.active).to.equal(true);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-cdr-arrangement-id-concurrent\", response[\"cdr_arrangement_id\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token",
											"value": "{{consent-request-refresh-token-concurrent}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-introspect-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-introspect-endpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "S004.T005 Obtain Access Token - Specify cdr_arrangement_id",
					"item": [
						{
							"name": "S004.T005.001 - Download Private Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var responseBlob = btoa(JSON.stringify(response.keys[0]));",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.002 - Generate Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-jwt\", response[\"request-jwt\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"cdr_arrangement_id\":\"{{consent-cdr-arrangement-id}}\",\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\",\n  \"code_challenge\":\"{{pkce-challenge}}\",\n  \"code_challenge_method\": \"S256\"\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"requestJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.003 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.004 - Initiate PAR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request_uri');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-uri\", response[\"request_uri\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "request",
											"value": "{{consent-request-jwt}}",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "response_type",
											"value": "code id_token",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}/as/par.oauth2",
									"host": [
										"{{dh-idp-host}}"
									],
									"path": [
										"as",
										"par.oauth2"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.005 - Initiate Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}?request_uri={{consent-request-uri}}&client_id={{dcrClientId}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-authorization-endpoint}}"
									],
									"query": [
										{
											"key": "request_uri",
											"value": "{{consent-request-uri}}"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.006 - Provide username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "subject",
											"value": "crn0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.007 - Verify OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-ref\", $( \"input[name='REF']\" ).val());",
											"    pm.environment.set(\"consent-action\", $( \"form\" ).attr(\"action\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_VALUE",
											"value": "123456",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_STATE",
											"value": "true",
											"type": "text"
										},
										{
											"key": "CSRF_TOKEN",
											"value": "{{consent-request-otp-csrf}}",
											"type": "text"
										},
										{
											"key": "submitform",
											"value": "true",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.008 - Load Consent Agentless App",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-consent-completeurl\", $( \"form\" ).attr(\"action\"));",
											"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).eq(0).val());",
											"    pm.environment.set(\"consent-request-consent-account-2\", $( \"input[name='accounts']\" ).eq(1).val());",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allowInteraction",
											"value": "true",
											"type": "text"
										},
										{
											"key": "connectionId",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "resumePath",
											"value": "{{consent-request-nonceurl}}",
											"type": "text"
										},
										{
											"key": "reauth",
											"value": "false",
											"type": "text"
										},
										{
											"key": "REF",
											"value": "{{consent-ref}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{consent-action}}",
									"host": [
										"{{consent-action}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.008 - Perform consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    pm.environment.set(\"consent-ref-redirect\", locationHeader);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false,
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account}}",
											"type": "text"
										},
										{
											"key": "cSRFToken",
											"value": "{{consent-request-consent-csrf}}",
											"type": "text"
										},
										{
											"key": "approved",
											"value": "allow",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:accounts.basic:read",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:transactions:read",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{consent-request-consent-completeurl}}",
									"host": [
										"{{consent-request-consent-completeurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.008 - Follow REF Redirect",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    if(!locationHeader)",
											"        locationHeader = pm.response.headers.get(\"Referer\");",
											"",
											"    var locationParams = locationHeader.split(\"#\")[1];",
											"    const eachParamArray = locationParams.split('&');",
											"    let params = {};",
											"    eachParamArray.forEach((param) => {",
											"        const key = param.split('=')[0];",
											"        const value = param.split('=')[1];",
											"        Object.assign(params, {[key]: value});",
											"    });",
											"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
											"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
											"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
											"    pm.environment.set(\"consent-request-authcode-callback-id_token\", params[\"id_token\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-ref-redirect}}",
									"host": [
										"{{consent-ref-redirect}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.009 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T005.010 - Perform code exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Validate id_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('id_token');",
											"});",
											"pm.test(\"Validate refresh_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('refresh_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token-specified\", response.access_token);",
											"    pm.environment.set(\"consent-request-id-token-specified\", response.id_token);",
											"    pm.environment.set(\"consent-request-refresh-token-specified\", response.refresh_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{consent-request-authcode-callback-code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{pkce-challenge-s256}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "S004.T006 Introspect Specified cdr_arrangement_id Tokens",
					"item": [
						{
							"name": "S004.T006.001 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S004.T006.002 - Introspect Refresh Token - 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate exp is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('exp');",
											"});",
											"pm.test(\"Validate cdr_arrangement_id is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('cdr_arrangement_id');",
											"});",
											"pm.test(\"Validate active=true\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.active).to.equal(true);",
											"});",
											"pm.test(\"Validate cdr_arrangement_id is the same\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response[\"cdr_arrangement_id\"]).to.equal(pm.environment.get(\"consent-cdr-arrangement-id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token",
											"value": "{{consent-request-refresh-token-specified}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-introspect-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-introspect-endpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "S004.T007 Refresh Concurrent Tokens",
					"item": [
						{
							"name": "S004.T007.001 - Refresh old token - should fail",
							"item": [
								{
									"name": "S004.T007.001.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T007.001.002 - Perform refresh token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Certificate",
												"value": "{{mtlsHeader}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "refresh_token",
													"value": "{{consent-request-refresh-token}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "refresh_token",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{default-redirecturi}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "S004.T007.002 - Refresh new token - should pass",
							"item": [
								{
									"name": "S004.T007.002.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T007.002.002 - Perform refresh token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
													"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
													"});",
													"pm.test(\"Validate access_token is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('access_token');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Certificate",
												"value": "{{mtlsHeader}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "refresh_token",
													"value": "{{consent-request-refresh-token-specified}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "refresh_token",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{default-redirecturi}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												},
												{
													"key": "X-Certificate",
													"value": "{{mtlsHeader}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "S004.T007.003 - Refresh concurrent token - should pass",
							"item": [
								{
									"name": "S004.T007.003.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T007.003.002 - Perform refresh token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
													"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
													"});",
													"pm.test(\"Validate access_token is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('access_token');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Certificate",
												"value": "{{mtlsHeader}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "refresh_token",
													"value": "{{consent-request-refresh-token-concurrent}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "refresh_token",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{default-redirecturi}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "S004.T008 Revoke Tokens via CDR Arrangement Endpoint",
					"item": [
						{
							"name": "S004.T008.001 Revoke arrangement 1",
							"item": [
								{
									"name": "S004.T008.001.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T008.001.002 - Revoke arrangement 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
													"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Certificate",
												"value": "{{mtlsHeader}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "cdr_arrangement_id",
													"value": "{{consent-cdr-arrangement-id}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-cdrarrangement-endpoint}}/revoke",
											"host": [
												"{{dh-idp-host}}{{dh-idp-cdrarrangement-endpoint}}"
											],
											"path": [
												"revoke"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "S004.T008.002 Revoke arrangement 1 again - should fail",
							"item": [
								{
									"name": "S004.T008.002.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T008.002.002 - Revoke arrangement 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=422\", function () {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Certificate",
												"value": "{{mtlsHeader}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "cdr_arrangement_id",
													"value": "{{consent-cdr-arrangement-id}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-cdrarrangement-endpoint}}/revoke",
											"host": [
												"{{dh-idp-host}}{{dh-idp-cdrarrangement-endpoint}}"
											],
											"path": [
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "S004.T008.003 Revoke arrangement 2",
							"item": [
								{
									"name": "S004.T008.003.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T008.003.002 - Revoke arrangement 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
													"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Certificate",
												"value": "{{mtlsHeader}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "cdr_arrangement_id",
													"value": "{{consent-cdr-arrangement-id-concurrent}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-cdrarrangement-endpoint}}/revoke",
											"host": [
												"{{dh-idp-host}}{{dh-idp-cdrarrangement-endpoint}}"
											],
											"path": [
												"revoke"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "S004.T008.004 - Refresh arrangment 2 token - should fail",
							"item": [
								{
									"name": "S004.T008.001.001 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T008.001.002 - Perform refresh token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Certificate",
												"value": "{{mtlsHeader}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "refresh_token",
													"value": "{{consent-request-refresh-token-concurrent}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "refresh_token",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{default-redirecturi}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "S004.T009 cdr_arrangement_id validation",
					"item": [
						{
							"name": "S004.T009.001 Validate standard authz request",
							"item": [
								{
									"name": "S004.T009.001.001 - Download Private Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    var responseBlob = btoa(JSON.stringify(response.keys[0]));",
													"    pm.environment.set(\"software-jwks-private\", responseBlob);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"helper",
												"JWKS",
												"{{flowUUID-datarecipient}}",
												"private"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T009.001.002 - Generate Request JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate request-jwt property exists\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('request-jwt');",
													"});",
													"pm.test(\"Validate request-url property exists\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('request-url');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-private-jwk",
												"type": "text",
												"value": "{{software-jwks-private}}"
											},
											{
												"key": "x-nonce",
												"value": "{{default-nonce}}",
												"type": "text"
											},
											{
												"key": "x-state",
												"value": "{{default-state}}",
												"type": "text"
											},
											{
												"key": "x-issuer",
												"value": "{{dcrClientId}}",
												"type": "text"
											},
											{
												"key": "x-duration-seconds",
												"value": "60",
												"type": "text"
											},
											{
												"key": "x-dataholder-authorization-endpoint",
												"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
												"type": "text"
											},
											{
												"key": "x-response-type",
												"value": "code id_token",
												"type": "text"
											},
											{
												"key": "x-scope",
												"value": "openid profile bank:accounts.basic:read bank:transactions:read",
												"type": "text"
											},
											{
												"key": "x-redirecturi",
												"value": "{{default-redirecturi}}",
												"type": "text"
											},
											{
												"key": "x-maxage",
												"value": "-1",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"cdr_arrangement_id\": \"xxx\",\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\",\n  \"code_challenge\":\"{{pkce-challenge}}\",\n  \"code_challenge_method\": \"S256\"\n}"
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"requestJWT"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T009.001.003 - Initiate Consent Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{consent-request-url}}",
											"host": [
												"{{consent-request-url}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "S004.T009.002 Validate PAR",
							"item": [
								{
									"name": "S004.T009.002.001 - Download Private Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    var responseBlob = btoa(JSON.stringify(response.keys[0]));",
													"    pm.environment.set(\"software-jwks-private\", responseBlob);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"helper",
												"JWKS",
												"{{flowUUID-datarecipient}}",
												"private"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T009.002.002 - Generate Request JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate request-jwt property exists\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('request-jwt');",
													"});",
													"pm.test(\"Validate request-url property exists\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('request-url');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-request-jwt\", response[\"request-jwt\"]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-private-jwk",
												"type": "text",
												"value": "{{software-jwks-private}}"
											},
											{
												"key": "x-nonce",
												"value": "{{default-nonce}}",
												"type": "text"
											},
											{
												"key": "x-state",
												"value": "{{default-state}}",
												"type": "text"
											},
											{
												"key": "x-issuer",
												"value": "{{dcrClientId}}",
												"type": "text"
											},
											{
												"key": "x-duration-seconds",
												"value": "60",
												"type": "text"
											},
											{
												"key": "x-dataholder-authorization-endpoint",
												"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
												"type": "text"
											},
											{
												"key": "x-response-type",
												"value": "code id_token",
												"type": "text"
											},
											{
												"key": "x-scope",
												"value": "openid profile bank:accounts.basic:read bank:transactions:read",
												"type": "text"
											},
											{
												"key": "x-redirecturi",
												"value": "{{default-redirecturi}}",
												"type": "text"
											},
											{
												"key": "x-maxage",
												"value": "-1",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"cdr_arrangement_id\":\"xxxx\",\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\",\n  \"code_challenge\":\"{{pkce-challenge}}\",\n  \"code_challenge_method\": \"S256\"\n}"
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"requestJWT"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T009.002.003 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S004.T009.002.004 - Initiate PAR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Certificate",
												"value": "{{mtlsHeader}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{consent-request-jwt}}",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dh-idp-host}}/as/par.oauth2",
											"host": [
												"{{dh-idp-host}}"
											],
											"path": [
												"as",
												"par.oauth2"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "S005 Tokens",
			"item": [
				{
					"name": "S005.001 - ID_Token Tests",
					"item": [
						{
							"name": "Authorisation Endpoint",
							"item": [
								{
									"name": "S005.T001.001 - Download Private Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    var responseBlob = btoa(JSON.stringify(response.keys[0]));",
													"    pm.environment.set(\"software-jwks-private\", responseBlob);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"helper",
												"JWKS",
												"{{flowUUID-datarecipient}}",
												"private"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.002 - Generate Request JWT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate request-jwt property exists\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('request-jwt');",
													"});",
													"pm.test(\"Validate request-url property exists\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('request-url');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-private-jwk",
												"type": "text",
												"value": "{{software-jwks-private}}"
											},
											{
												"key": "x-nonce",
												"value": "{{default-nonce}}",
												"type": "text"
											},
											{
												"key": "x-state",
												"value": "{{default-state}}",
												"type": "text"
											},
											{
												"key": "x-issuer",
												"value": "{{dcrClientId}}",
												"type": "text"
											},
											{
												"key": "x-duration-seconds",
												"value": "60",
												"type": "text"
											},
											{
												"key": "x-dataholder-authorization-endpoint",
												"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
												"type": "text"
											},
											{
												"key": "x-response-type",
												"value": "code id_token",
												"type": "text"
											},
											{
												"key": "x-scope",
												"value": "openid profile bank:accounts.basic:read bank:transactions:read",
												"type": "text"
											},
											{
												"key": "x-redirecturi",
												"value": "{{default-redirecturi}}",
												"type": "text"
											},
											{
												"key": "x-maxage",
												"value": "-1",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\",\n  \"code_challenge\":\"{{pkce-challenge}}\",\n  \"code_challenge_method\": \"S256\"\n}"
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"requestJWT"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.003 - Initiate Consent Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    const $ = cheerio.load(responseBody);",
													"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{consent-request-url}}",
											"host": [
												"{{consent-request-url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.004 - Provide username",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Set environment variables for next test\", function () {",
													"    const $ = cheerio.load(responseBody);",
													"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "$ok",
													"value": "clicked",
													"type": "text"
												},
												{
													"key": "subject",
													"value": "crn0",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
											"host": [
												"{{dh-idp-host}}{{consent-request-nonceurl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.005 - Verify OTP",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Set environment variables for next test\", function () {",
													"    const $ = cheerio.load(responseBody);",
													"    pm.environment.set(\"consent-ref\", $( \"input[name='REF']\" ).val());",
													"    pm.environment.set(\"consent-action\", $( \"form\" ).attr(\"action\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "$ok",
													"value": "clicked",
													"type": "text"
												},
												{
													"key": "CODE_VERIFICATION_VALUE",
													"value": "123456",
													"type": "text"
												},
												{
													"key": "CODE_VERIFICATION_STATE",
													"value": "true",
													"type": "text"
												},
												{
													"key": "CSRF_TOKEN",
													"value": "{{consent-request-otp-csrf}}",
													"type": "text"
												},
												{
													"key": "submitform",
													"value": "true",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
											"host": [
												"{{dh-idp-host}}{{consent-request-nonceurl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.006 - Load Consent Agentless App",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    const $ = cheerio.load(responseBody);",
													"    pm.environment.set(\"consent-request-consent-completeurl\", $( \"form\" ).attr(\"action\"));",
													"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).eq(0).val());",
													"    pm.environment.set(\"consent-request-consent-account-2\", $( \"input[name='accounts']\" ).eq(1).val());",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "allowInteraction",
													"value": "true",
													"type": "text"
												},
												{
													"key": "connectionId",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "resumePath",
													"value": "{{consent-request-nonceurl}}",
													"type": "text"
												},
												{
													"key": "reauth",
													"value": "false",
													"type": "text"
												},
												{
													"key": "REF",
													"value": "{{consent-ref}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{consent-action}}",
											"host": [
												"{{consent-action}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.006 - Perform consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var locationHeader = pm.response.headers.get(\"Location\");",
													"    pm.environment.set(\"consent-ref-redirect\", locationHeader);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false,
										"followRedirects": false
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "accounts",
													"value": "{{consent-request-consent-account}}",
													"type": "text"
												},
												{
													"key": "cSRFToken",
													"value": "{{consent-request-consent-csrf}}",
													"type": "text"
												},
												{
													"key": "approved",
													"value": "allow",
													"type": "text"
												},
												{
													"key": "scopes",
													"value": "bank:accounts.basic:read",
													"type": "text"
												},
												{
													"key": "scopes",
													"value": "bank:transactions:read",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{consent-request-consent-completeurl}}",
											"host": [
												"{{consent-request-consent-completeurl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.006 - Follow REF Redirect",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var locationHeader = pm.response.headers.get(\"Location\");",
													"    if(!locationHeader)",
													"        locationHeader = pm.response.headers.get(\"Referer\");",
													"",
													"    var locationParams = locationHeader.split(\"#\")[1];",
													"    const eachParamArray = locationParams.split('&');",
													"    let params = {};",
													"    eachParamArray.forEach((param) => {",
													"        const key = param.split('=')[0];",
													"        const value = param.split('=')[1];",
													"        Object.assign(params, {[key]: value});",
													"    });",
													"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
													"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
													"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
													"    pm.environment.set(\"consent-request-authcode-callback-id_token\", params[\"id_token\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": false
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{consent-ref-redirect}}",
											"host": [
												"{{consent-ref-redirect}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.008 - Test ID Token from Authz Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"//CDR ID Token OIDC Requirements",
													"pm.test(\"Validate ID Token has ISS -  REQUIRED for OIDC\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('iss');",
													"",
													"});",
													"",
													"pm.test(\"Validate ID Token has sub - REQUIRED for OIDC\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('sub');",
													"",
													"});",
													"",
													"pm.test(\"Validate ID Token has exp - REQUIRED for OIDC\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('exp');",
													"",
													"});",
													"",
													"pm.test(\"Validate ID Token has iat - REQUIRED for OIDC\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('iat');",
													"});",
													"",
													"//CDR ID Token FAPI-RW Requirements",
													"pm.test(\"Validate ID Token has nonce - REQUIRED for FAPI-RW\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('nonce');",
													"});",
													"",
													"pm.test(\"Validate ID Token has s_hash - REQUIRED for FAPI-RW\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('s_hash');",
													"});",
													"",
													"pm.test(\"Validate ID Token has c_hash - REQUIRED for FAPI-RW\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('c_hash');",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-private-jwk",
												"value": "{{software-jwks-private}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{consent-request-authcode-callback-id_token}}"
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/reflectIDToken",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"reflectIDToken"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.009 - Creates JWT-Bearer Client Assertion",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate client assertion is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('client-assertion');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "private-jwk",
													"value": "{{software-jwks-private}}",
													"type": "text"
												},
												{
													"key": "client-id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "token-endpoint",
													"value": "{{dh-idp-host}}/as/token.oauth2",
													"type": "text"
												},
												{
													"key": "kid",
													"value": "{{softwareId}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"createClientAssertion"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.010 - Perform code exchange",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
													"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
													"});",
													"pm.test(\"Validate access_token is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('access_token');",
													"});",
													"pm.test(\"Validate id_token is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('id_token');",
													"});",
													"pm.test(\"Validate refresh_token is available\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('refresh_token');",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
													"    pm.environment.set(\"consent-request-id-token\", response.id_token);",
													"    pm.environment.set(\"consent-request-refresh-token\", response.refresh_token);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Certificate",
												"value": "{{mtlsHeader}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "code",
													"value": "{{consent-request-authcode-callback-code}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{dcrClientId}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{default-redirecturi}}",
													"type": "text"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{consent-client-assertion}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{pkce-challenge-s256}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
											"host": [
												"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "S005.T001.011 - Test ID Token from Token Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"//CDR ID Token OIDC Requirements",
													"pm.test(\"Validate ID Token has ISS -  REQUIRED for OIDC\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('iss');",
													"",
													"});",
													"",
													"pm.test(\"Validate ID Token has sub - REQUIRED for OIDC\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('sub');",
													"",
													"});",
													"",
													"pm.test(\"Validate ID Token has exp - REQUIRED for OIDC\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('exp');",
													"",
													"});",
													"",
													"pm.test(\"Validate ID Token has iat - REQUIRED for OIDC\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('iat');",
													"});",
													"",
													"//CDR ID Token FAPI-RW Requirements",
													"pm.test(\"Validate ID Token has nonce - REQUIRED for FAPI-RW\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('nonce');",
													"});",
													"",
													"pm.test(\"Validate ID Token has s_hash - REQUIRED for FAPI-RW\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('s_hash');",
													"});",
													"",
													"pm.test(\"Validate ID Token has c_hash - REQUIRED for FAPI-RW\", function () {",
													"    var response = pm.response.json();",
													"    pm.expect(response).to.have.property('c_hash');",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"strictSSL": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-private-jwk",
												"value": "{{software-jwks-private}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{consent-request-id-token}}"
										},
										"url": {
											"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/reflectIDToken",
											"host": [
												"{{cdr-register-testharness-host}}"
											],
											"path": [
												"testtool",
												"datarecipient",
												"reflectIDToken"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Token End Point",
							"item": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "S005.002 - Refresh Token Tests",
					"item": [
						{
							"name": "S005.T002.001 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S005.T002.002 - Perform refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
											"    pm.environment.set(\"consent-request-id-token\", response.id_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "{{consent-request-refresh-token}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S005.T002.004 - Test ID Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//CDR ID Token OIDC Requirements",
											"pm.test(\"Validate ID Token has ISS -  REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iss');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has sub - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('sub');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has exp - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('exp');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has iat - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iat');",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{consent-request-id-token}}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/reflectIDToken",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"reflectIDToken"
									]
								}
							},
							"response": []
						},
						{
							"name": "S005.T002.005 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S005.T002.006 - Perform refresh token - Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S007.T002.007 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S007.T002.008 - Refresh Error Response - UnAuthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "{{consent-request-refresh-token}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text",
											"disabled": true
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "S006 Identifiers and Subject Types",
			"item": [
				{
					"name": "Sub Claim",
					"item": [
						{
							"name": "S006.T001.001 - Download Private Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var responseBlob = btoa(JSON.stringify(response.keys[0]));",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S006.T001.002 - Generate Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\",\n  \"code_challenge\":\"{{pkce-challenge}}\",\n  \"code_challenge_method\": \"S256\"\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"requestJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S006.T001.003 - Initiate Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-request-url}}",
									"host": [
										"{{consent-request-url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S006.T001.004 - Provide username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "subject",
											"value": "crn0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S006.T001.005 - Verify OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-ref\", $( \"input[name='REF']\" ).val());",
											"    pm.environment.set(\"consent-action\", $( \"form\" ).attr(\"action\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_VALUE",
											"value": "123456",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_STATE",
											"value": "true",
											"type": "text"
										},
										{
											"key": "CSRF_TOKEN",
											"value": "{{consent-request-otp-csrf}}",
											"type": "text"
										},
										{
											"key": "submitform",
											"value": "true",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S006.T001.006 - Load Consent Agentless App",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-consent-completeurl\", $( \"form\" ).attr(\"action\"));",
											"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).eq(0).val());",
											"    pm.environment.set(\"consent-request-consent-account-2\", $( \"input[name='accounts']\" ).eq(1).val());",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allowInteraction",
											"value": "true",
											"type": "text"
										},
										{
											"key": "connectionId",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "resumePath",
											"value": "{{consent-request-nonceurl}}",
											"type": "text"
										},
										{
											"key": "reauth",
											"value": "false",
											"type": "text"
										},
										{
											"key": "REF",
											"value": "{{consent-ref}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{consent-action}}",
									"host": [
										"{{consent-action}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S006.T001.006 - Perform consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    pm.environment.set(\"consent-ref-redirect\", locationHeader);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false,
								"followRedirects": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account}}",
											"type": "text"
										},
										{
											"key": "cSRFToken",
											"value": "{{consent-request-consent-csrf}}",
											"type": "text"
										},
										{
											"key": "approved",
											"value": "allow",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:accounts.basic:read",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:transactions:read",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{consent-request-consent-completeurl}}",
									"host": [
										"{{consent-request-consent-completeurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S006.T001.006 - Follow REF Redirect",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    if(!locationHeader)",
											"        locationHeader = pm.response.headers.get(\"Referer\");",
											"",
											"    var locationParams = locationHeader.split(\"#\")[1];",
											"    const eachParamArray = locationParams.split('&');",
											"    let params = {};",
											"    eachParamArray.forEach((param) => {",
											"        const key = param.split('=')[0];",
											"        const value = param.split('=')[1];",
											"        Object.assign(params, {[key]: value});",
											"    });",
											"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
											"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
											"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
											"    pm.environment.set(\"consent-request-authcode-callback-id_token\", params[\"id_token\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-ref-redirect}}",
									"host": [
										"{{consent-ref-redirect}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S006.T001.007 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S006.T001.008 - Perform code exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"",
											"pm.test(\"Validate id_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('id_token');",
											"});",
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
											"    pm.environment.set(\"consent-request-id-token\", response.id_token);",
											"    pm.environment.set(\"consent-request-refresh-token\", response.refresh_token);",
											"});",
											"",
											"",
											"",
											"function jwt_decode_payload(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return JSON.parse(atob(parts[1]));",
											"}",
											"",
											"function jwt_decode_header(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return JSON.parse(atob(parts[0]));",
											"}",
											"function jwt_parts(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return parts.length;",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{consent-request-authcode-callback-code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{pkce-challenge-s256}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S006.T001.010 - Test ID Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//CDR ID Token OIDC Requirements",
											"pm.test(\"Validate ID Token has ISS -  REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iss');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has sub - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('sub');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has exp - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('exp');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has iat - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iat');",
											"});",
											"",
											"//CDR ID Token FAPI-RW Requirements",
											"pm.test(\"Validate ID Token has nonce - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('nonce');",
											"});",
											"",
											"pm.test(\"Validate ID Token has s_hash - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('s_hash');",
											"});",
											"",
											"pm.test(\"Validate ID Token has c_hash - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('c_hash');",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{consent-request-id-token}}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/reflectIDToken",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"reflectIDToken"
									]
								}
							},
							"response": []
						},
						{
							"name": "S006.T001.011 - Call userinfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//CDR ID Token OIDC Requirements",
											"",
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"",
											"pm.test(\"Validate UserInfo Response has sub - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"",
											"    pm.expect(response).to.have.property('sub');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-userinfo-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-userinfo-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S006.T001.012 - Get openid-configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate Pairwise Pseudonymous Identifier (PPID) is configured\", function () {",
											"    var response = pm.response.json();",
											"    console.log(response.subject_types_supported);",
											"    pm.expect(response.subject_types_supported[0]).to.equal('pairwise');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{dh-idp-host}}{{openid-configuration}}",
									"host": [
										"{{dh-idp-host}}{{openid-configuration}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "S007 Authentication Flow",
			"item": [
				{
					"name": "S007.T000 Run the S001.T001 Create Client first",
					"item": [],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "S007.T001 Verify Respone Type of Access Token",
					"item": [
						{
							"name": "S007.T001.001 - Download Private Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var responseBlob = btoa(JSON.stringify(response.keys[0]));",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S007.T001.002 - Generate Good Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\",\n  \"code_challenge\":\"{{pkce-challenge}}\",\n  \"code_challenge_method\": \"S256\"\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"requestJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S007.T001.003 - Initiate Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-request-url}}",
									"host": [
										"{{consent-request-url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S007.T001.004 - Generate Negative Request JWT - code id_token token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\"\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"requestJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S007.T001.005 - Initiate Negative Consent Request - code id_token token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-request-url}}",
									"host": [
										"{{consent-request-url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S007.T001.006 - Generate Negative Request JWT - code token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\"\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"requestJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S007.T001.007 - Initiate Negative Consent Request - code token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-request-url}}",
									"host": [
										"{{consent-request-url}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "S008 Client Authentication",
			"item": [
				{
					"name": "S008.T000 Run the S001.T001 Create Client first",
					"item": [],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "S008.T001 Obtain Access Token",
					"item": [
						{
							"name": "S008.T001.001 - Download Private Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var responseBlob = btoa(JSON.stringify(response.keys[0]));",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.002 - Generate Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\",\n  \"code_challenge\":\"{{pkce-challenge}}\",\n  \"code_challenge_method\": \"S256\"\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"requestJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.003 - Initiate Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-request-url}}",
									"host": [
										"{{consent-request-url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.004 - Provide username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "subject",
											"value": "crn0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.005 - Verify OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-ref\", $( \"input[name='REF']\" ).val());",
											"    pm.environment.set(\"consent-action\", $( \"form\" ).attr(\"action\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_VALUE",
											"value": "123456",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_STATE",
											"value": "true",
											"type": "text"
										},
										{
											"key": "CSRF_TOKEN",
											"value": "{{consent-request-otp-csrf}}",
											"type": "text"
										},
										{
											"key": "submitform",
											"value": "true",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.006 - Load Consent Agentless App",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-consent-completeurl\", $( \"form\" ).attr(\"action\"));",
											"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).eq(0).val());",
											"    pm.environment.set(\"consent-request-consent-account-2\", $( \"input[name='accounts']\" ).eq(1).val());",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allowInteraction",
											"value": "true",
											"type": "text"
										},
										{
											"key": "connectionId",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "resumePath",
											"value": "{{consent-request-nonceurl}}",
											"type": "text"
										},
										{
											"key": "reauth",
											"value": "false",
											"type": "text"
										},
										{
											"key": "REF",
											"value": "{{consent-ref}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{consent-action}}",
									"host": [
										"{{consent-action}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.006 - Perform consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    pm.environment.set(\"consent-ref-redirect\", locationHeader);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false,
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account}}",
											"type": "text"
										},
										{
											"key": "cSRFToken",
											"value": "{{consent-request-consent-csrf}}",
											"type": "text"
										},
										{
											"key": "approved",
											"value": "allow",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:accounts.basic:read",
											"type": "text"
										},
										{
											"key": "scopes",
											"value": "bank:transactions:read",
											"type": "text"
										},
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account-2}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{consent-request-consent-completeurl}}",
									"host": [
										"{{consent-request-consent-completeurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.006 - Follow REF Redirect",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    if(!locationHeader)",
											"        locationHeader = pm.response.headers.get(\"Referer\");",
											"",
											"    var locationParams = locationHeader.split(\"#\")[1];",
											"    const eachParamArray = locationParams.split('&');",
											"    let params = {};",
											"    eachParamArray.forEach((param) => {",
											"        const key = param.split('=')[0];",
											"        const value = param.split('=')[1];",
											"        Object.assign(params, {[key]: value});",
											"    });",
											"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
											"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
											"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
											"    pm.environment.set(\"consent-request-authcode-callback-id_token\", params[\"id_token\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-ref-redirect}}",
									"host": [
										"{{consent-ref-redirect}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.008 - Test ID Token from Authz Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//CDR ID Token OIDC Requirements",
											"pm.test(\"Validate ID Token has ISS -  REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iss');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has sub - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('sub');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has exp - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('exp');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has iat - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iat');",
											"});",
											"",
											"//CDR ID Token FAPI-RW Requirements",
											"pm.test(\"Validate ID Token has nonce - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('nonce');",
											"});",
											"",
											"pm.test(\"Validate ID Token has s_hash - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('s_hash');",
											"});",
											"",
											"pm.test(\"Validate ID Token has c_hash - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('c_hash');",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{consent-request-authcode-callback-id_token}}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/reflectIDToken",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"reflectIDToken"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.009 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.010 - Perform code exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"_.test_http_status(200,pm.response);",
											"var response_params = ['access_token','id_token','refresh_token'];",
											"_.test_params_object(response_params, pm.response.json(),\"is in response\");",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
											"    pm.environment.set(\"consent-request-id-token\", response.id_token);",
											"    pm.environment.set(\"consent-request-refresh-token\", response.refresh_token);",
											"    pm.environment.set(\"consent-cdr-arrangement-id\", response[\"cdr_arrangement_id\"]);",
											"});",
											"",
											"",
											"var request_params = [ 'client_id', 'grant_type', 'code', 'client_assertion', 'client_assertion_type' ]; ",
											"_.test_params_object(request_params,request.data,\"is in request\");",
											"",
											"var client_assertion_payload = jwt_decode_payload(request.data.client_assertion);",
											"var request_params = [ 'iss', 'aud', 'exp', 'jti', 'iat' ]; ",
											"_.test_params_object(request_params,client_assertion_payload,\"is in client_assertion\");",
											"//console.log(jwt_decode_payload(request.data.client_assertion));",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{consent-request-authcode-callback-code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{pkce-challenge-s256}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S008.T001.011 - Test ID Token from Token Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"//CDR ID Token OIDC Requirements",
											"pm.test(\"Validate ID Token has ISS -  REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iss');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has sub - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('sub');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has exp - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('exp');",
											"",
											"});",
											"",
											"pm.test(\"Validate ID Token has iat - REQUIRED for OIDC\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('iat');",
											"});",
											"",
											"//CDR ID Token FAPI-RW Requirements",
											"pm.test(\"Validate ID Token has nonce - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('nonce');",
											"});",
											"",
											"pm.test(\"Validate ID Token has s_hash - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('s_hash');",
											"});",
											"",
											"pm.test(\"Validate ID Token has c_hash - REQUIRED for FAPI-RW\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('c_hash');",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-private}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{consent-request-id-token}}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/reflectIDToken",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"reflectIDToken"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "S009 Scope Tests",
			"item": [
				{
					"name": "S009.T001 Obtain Access Token - no bank:accounts.basic:read",
					"item": [
						{
							"name": "S009.T001.001 - Download Private Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var responseBlob = btoa(JSON.stringify(response.keys[0]));",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T001.002 - Generate Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:transactions:read bank:accounts.detail:read bank:regular_payments:read bank:payees:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\",\n  \"code_challenge\":\"{{pkce-challenge}}\",\n  \"code_challenge_method\": \"S256\",\n  \"state\": \"xyz\"\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"requestJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T001.003 - Initiate Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false,
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-request-url}}",
									"host": [
										"{{consent-request-url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T001.004 - Provide username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "subject",
											"value": "crn0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T001.005 - Verify OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-ref\", $( \"input[name='REF']\" ).val());",
											"    pm.environment.set(\"consent-action\", $( \"form\" ).attr(\"action\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_VALUE",
											"value": "123456",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_STATE",
											"value": "true",
											"type": "text"
										},
										{
											"key": "CSRF_TOKEN",
											"value": "{{consent-request-otp-csrf}}",
											"type": "text"
										},
										{
											"key": "submitform",
											"value": "true",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T001.006 - Load Consent Agentless App",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-consent-completeurl\", $( \"form\" ).attr(\"action\"));",
											"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).eq(0).val());",
											"    pm.environment.set(\"consent-request-consent-account-2\", $( \"input[name='accounts']\" ).eq(1).val());",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allowInteraction",
											"value": "true",
											"type": "text"
										},
										{
											"key": "connectionId",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "resumePath",
											"value": "{{consent-request-nonceurl}}",
											"type": "text"
										},
										{
											"key": "reauth",
											"value": "false",
											"type": "text"
										},
										{
											"key": "REF",
											"value": "{{consent-ref}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{consent-action}}",
									"host": [
										"{{consent-action}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T001.007 - Perform consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    pm.environment.set(\"consent-ref-redirect\", locationHeader);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false,
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account}}",
											"type": "text"
										},
										{
											"key": "approved",
											"value": "allow",
											"type": "text"
										},
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account-2}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{consent-request-consent-completeurl}}",
									"host": [
										"{{consent-request-consent-completeurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T001.008 - Follow REF Redirect",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    if(!locationHeader)",
											"        locationHeader = pm.response.headers.get(\"Referer\");",
											"",
											"    var locationParams = locationHeader.split(\"#\")[1];",
											"    const eachParamArray = locationParams.split('&');",
											"    let params = {};",
											"    eachParamArray.forEach((param) => {",
											"        const key = param.split('=')[0];",
											"        const value = param.split('=')[1];",
											"        Object.assign(params, {[key]: value});",
											"    });",
											"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
											"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
											"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
											"    pm.environment.set(\"consent-request-authcode-callback-id_token\", params[\"id_token\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-ref-redirect}}",
									"host": [
										"{{consent-ref-redirect}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T001.009 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T001.010 - Perform code exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Validate id_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('id_token');",
											"});",
											"pm.test(\"Validate refresh_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('refresh_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
											"    pm.environment.set(\"consent-request-id-token\", response.id_token);",
											"    pm.environment.set(\"consent-request-refresh-token\", response.refresh_token);",
											"    pm.environment.set(\"consent-cdr-arrangement-id\", response[\"cdr_arrangement_id\"]);",
											"});",
											"",
											"",
											"function jwt_decode_payload(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return JSON.parse(atob(parts[1]));",
											"}",
											"",
											"function jwt_decode_header(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return JSON.parse(atob(parts[0]));",
											"}",
											"function jwt_parts(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return parts.length;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{consent-request-authcode-callback-code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{pkce-challenge-s256}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T001.011 - Get account list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T001.012 - Get bulk balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"type": "text",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts/balances",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts",
										"balances"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "S009.T002 Obtain Access Token - no bank:accounts.detail:read",
					"item": [
						{
							"name": "S009.T002.001 - Download Private Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var responseBlob = btoa(JSON.stringify(response.keys[0]));",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T002.002 - Generate Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read bank:regular_payments:read bank:payees:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\",\n  \"code_challenge\":\"{{pkce-challenge}}\",\n  \"code_challenge_method\": \"S256\",\n  \"state\": \"xyz\"\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"requestJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T002.003 - Initiate Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false,
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-request-url}}",
									"host": [
										"{{consent-request-url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T002.004 - Provide username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "subject",
											"value": "crn0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T002.005 - Verify OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-ref\", $( \"input[name='REF']\" ).val());",
											"    pm.environment.set(\"consent-action\", $( \"form\" ).attr(\"action\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_VALUE",
											"value": "123456",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_STATE",
											"value": "true",
											"type": "text"
										},
										{
											"key": "CSRF_TOKEN",
											"value": "{{consent-request-otp-csrf}}",
											"type": "text"
										},
										{
											"key": "submitform",
											"value": "true",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T002.006 - Load Consent Agentless App",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-consent-completeurl\", $( \"form\" ).attr(\"action\"));",
											"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).eq(0).val());",
											"    pm.environment.set(\"consent-request-consent-account-2\", $( \"input[name='accounts']\" ).eq(1).val());",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allowInteraction",
											"value": "true",
											"type": "text"
										},
										{
											"key": "connectionId",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "resumePath",
											"value": "{{consent-request-nonceurl}}",
											"type": "text"
										},
										{
											"key": "reauth",
											"value": "false",
											"type": "text"
										},
										{
											"key": "REF",
											"value": "{{consent-ref}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{consent-action}}",
									"host": [
										"{{consent-action}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T002.007 - Perform consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    pm.environment.set(\"consent-ref-redirect\", locationHeader);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false,
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account}}",
											"type": "text"
										},
										{
											"key": "approved",
											"value": "allow",
											"type": "text"
										},
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account-2}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{consent-request-consent-completeurl}}",
									"host": [
										"{{consent-request-consent-completeurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T002.008 - Follow REF Redirect",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    if(!locationHeader)",
											"        locationHeader = pm.response.headers.get(\"Referer\");",
											"",
											"    var locationParams = locationHeader.split(\"#\")[1];",
											"    const eachParamArray = locationParams.split('&');",
											"    let params = {};",
											"    eachParamArray.forEach((param) => {",
											"        const key = param.split('=')[0];",
											"        const value = param.split('=')[1];",
											"        Object.assign(params, {[key]: value});",
											"    });",
											"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
											"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
											"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
											"    pm.environment.set(\"consent-request-authcode-callback-id_token\", params[\"id_token\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-ref-redirect}}",
									"host": [
										"{{consent-ref-redirect}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T002.009 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T002.010 - Perform code exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Validate id_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('id_token');",
											"});",
											"pm.test(\"Validate refresh_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('refresh_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
											"    pm.environment.set(\"consent-request-id-token\", response.id_token);",
											"    pm.environment.set(\"consent-request-refresh-token\", response.refresh_token);",
											"    pm.environment.set(\"consent-cdr-arrangement-id\", response[\"cdr_arrangement_id\"]);",
											"});",
											"",
											"",
											"function jwt_decode_payload(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return JSON.parse(atob(parts[1]));",
											"}",
											"",
											"function jwt_decode_header(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return JSON.parse(atob(parts[0]));",
											"}",
											"function jwt_parts(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return parts.length;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{consent-request-authcode-callback-code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{pkce-challenge-s256}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T002.011 - Get account list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var accountId = response.data.accounts[0].accountId;",
											"",
											"    pm.environment.set(\"consent-request-account-id\", accountId);",
											"});",
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T002.012 - Get account details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"type": "text",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts/{{consent-request-account-id}}",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts",
										"{{consent-request-account-id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "S009.T003 Obtain Access Token - no bank:transactions:read",
					"item": [
						{
							"name": "S009.T003.001 - Download Private Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var responseBlob = btoa(JSON.stringify(response.keys[0]));",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T003.002 - Generate Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"type": "text",
										"value": "{{default-nonce}}"
									},
									{
										"key": "x-state",
										"type": "text",
										"value": "{{default-state}}"
									},
									{
										"key": "x-issuer",
										"type": "text",
										"value": "{{dcrClientId}}"
									},
									{
										"key": "x-duration-seconds",
										"type": "text",
										"value": "60"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"type": "text",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}"
									},
									{
										"key": "x-response-type",
										"type": "text",
										"value": "code id_token"
									},
									{
										"key": "x-scope",
										"type": "text",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read"
									},
									{
										"key": "x-redirecturi",
										"type": "text",
										"value": "{{default-redirecturi}}"
									},
									{
										"key": "x-maxage",
										"type": "text",
										"value": "-1"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:accounts.detail:read bank:regular_payments:read bank:payees:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\",\n  \"code_challenge\":\"{{pkce-challenge}}\",\n  \"code_challenge_method\": \"S256\",\n  \"state\": \"xyz\"\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"requestJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T003.003 - Initiate Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false,
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-request-url}}",
									"host": [
										"{{consent-request-url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T003.004 - Provide username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "subject",
											"value": "crn0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T003.005 - Verify OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-ref\", $( \"input[name='REF']\" ).val());",
											"    pm.environment.set(\"consent-action\", $( \"form\" ).attr(\"action\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_VALUE",
											"value": "123456",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_STATE",
											"value": "true",
											"type": "text"
										},
										{
											"key": "CSRF_TOKEN",
											"value": "{{consent-request-otp-csrf}}",
											"type": "text"
										},
										{
											"key": "submitform",
											"value": "true",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T003.006 - Load Consent Agentless App",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-consent-completeurl\", $( \"form\" ).attr(\"action\"));",
											"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).eq(0).val());",
											"    pm.environment.set(\"consent-request-consent-account-2\", $( \"input[name='accounts']\" ).eq(1).val());",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allowInteraction",
											"value": "true",
											"type": "text"
										},
										{
											"key": "connectionId",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "resumePath",
											"value": "{{consent-request-nonceurl}}",
											"type": "text"
										},
										{
											"key": "reauth",
											"value": "false",
											"type": "text"
										},
										{
											"key": "REF",
											"value": "{{consent-ref}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{consent-action}}",
									"host": [
										"{{consent-action}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T003.007 - Perform consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    pm.environment.set(\"consent-ref-redirect\", locationHeader);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false,
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account}}",
											"type": "text"
										},
										{
											"key": "approved",
											"value": "allow",
											"type": "text"
										},
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account-2}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{consent-request-consent-completeurl}}",
									"host": [
										"{{consent-request-consent-completeurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T003.008 - Follow REF Redirect",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    if(!locationHeader)",
											"        locationHeader = pm.response.headers.get(\"Referer\");",
											"",
											"    var locationParams = locationHeader.split(\"#\")[1];",
											"    const eachParamArray = locationParams.split('&');",
											"    let params = {};",
											"    eachParamArray.forEach((param) => {",
											"        const key = param.split('=')[0];",
											"        const value = param.split('=')[1];",
											"        Object.assign(params, {[key]: value});",
											"    });",
											"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
											"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
											"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
											"    pm.environment.set(\"consent-request-authcode-callback-id_token\", params[\"id_token\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-ref-redirect}}",
									"host": [
										"{{consent-ref-redirect}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T003.009 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T003.010 - Perform code exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Validate id_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('id_token');",
											"});",
											"pm.test(\"Validate refresh_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('refresh_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
											"    pm.environment.set(\"consent-request-id-token\", response.id_token);",
											"    pm.environment.set(\"consent-request-refresh-token\", response.refresh_token);",
											"    pm.environment.set(\"consent-cdr-arrangement-id\", response[\"cdr_arrangement_id\"]);",
											"});",
											"",
											"",
											"function jwt_decode_payload(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return JSON.parse(atob(parts[1]));",
											"}",
											"",
											"function jwt_decode_header(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return JSON.parse(atob(parts[0]));",
											"}",
											"function jwt_parts(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return parts.length;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{consent-request-authcode-callback-code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{pkce-challenge-s256}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T003.011 - Get account list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var accountId = response.data.accounts[0].accountId;",
											"",
											"    pm.environment.set(\"consent-request-account-id\", accountId);",
											"});",
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T003.012 - Get transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"type": "text",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts/{{consent-request-account-id}}/transactions",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts",
										"{{consent-request-account-id}}",
										"transactions"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "S009.T004 Obtain Access Token - no bank:regular_payments:read",
					"item": [
						{
							"name": "S009.T004.001 - Download Private Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var responseBlob = btoa(JSON.stringify(response.keys[0]));",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T004.002 - Generate Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:payees:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\",\n  \"code_challenge\":\"{{pkce-challenge}}\",\n  \"code_challenge_method\": \"S256\",\n  \"state\": \"xyz\"\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"requestJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T004.003 - Initiate Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false,
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-request-url}}",
									"host": [
										"{{consent-request-url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T004.004 - Provide username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "subject",
											"value": "crn0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T004.005 - Verify OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-ref\", $( \"input[name='REF']\" ).val());",
											"    pm.environment.set(\"consent-action\", $( \"form\" ).attr(\"action\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_VALUE",
											"value": "123456",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_STATE",
											"value": "true",
											"type": "text"
										},
										{
											"key": "CSRF_TOKEN",
											"value": "{{consent-request-otp-csrf}}",
											"type": "text"
										},
										{
											"key": "submitform",
											"value": "true",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T004.006 - Load Consent Agentless App",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-consent-completeurl\", $( \"form\" ).attr(\"action\"));",
											"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).eq(0).val());",
											"    pm.environment.set(\"consent-request-consent-account-2\", $( \"input[name='accounts']\" ).eq(1).val());",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allowInteraction",
											"value": "true",
											"type": "text"
										},
										{
											"key": "connectionId",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "resumePath",
											"value": "{{consent-request-nonceurl}}",
											"type": "text"
										},
										{
											"key": "reauth",
											"value": "false",
											"type": "text"
										},
										{
											"key": "REF",
											"value": "{{consent-ref}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{consent-action}}",
									"host": [
										"{{consent-action}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T004.007 - Perform consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    pm.environment.set(\"consent-ref-redirect\", locationHeader);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false,
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account}}",
											"type": "text"
										},
										{
											"key": "approved",
											"value": "allow",
											"type": "text"
										},
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account-2}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{consent-request-consent-completeurl}}",
									"host": [
										"{{consent-request-consent-completeurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T004.008 - Follow REF Redirect",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    if(!locationHeader)",
											"        locationHeader = pm.response.headers.get(\"Referer\");",
											"",
											"    var locationParams = locationHeader.split(\"#\")[1];",
											"    const eachParamArray = locationParams.split('&');",
											"    let params = {};",
											"    eachParamArray.forEach((param) => {",
											"        const key = param.split('=')[0];",
											"        const value = param.split('=')[1];",
											"        Object.assign(params, {[key]: value});",
											"    });",
											"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
											"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
											"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
											"    pm.environment.set(\"consent-request-authcode-callback-id_token\", params[\"id_token\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-ref-redirect}}",
									"host": [
										"{{consent-ref-redirect}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T004.009 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T004.010 - Perform code exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Validate id_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('id_token');",
											"});",
											"pm.test(\"Validate refresh_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('refresh_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
											"    pm.environment.set(\"consent-request-id-token\", response.id_token);",
											"    pm.environment.set(\"consent-request-refresh-token\", response.refresh_token);",
											"    pm.environment.set(\"consent-cdr-arrangement-id\", response[\"cdr_arrangement_id\"]);",
											"});",
											"",
											"",
											"function jwt_decode_payload(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return JSON.parse(atob(parts[1]));",
											"}",
											"",
											"function jwt_decode_header(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return JSON.parse(atob(parts[0]));",
											"}",
											"function jwt_parts(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return parts.length;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{consent-request-authcode-callback-code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{pkce-challenge-s256}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T004.011 - Get account list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var accountId = response.data.accounts[0].accountId;",
											"",
											"    pm.environment.set(\"consent-request-account-id\", accountId);",
											"});",
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"value": "1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T004.012 - Get account direct debits",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"type": "text",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts/{{consent-request-account-id}}/direct-debits",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts",
										"{{consent-request-account-id}}",
										"direct-debits"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T004.013 - Get bulk direct debits",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"type": "text",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts/direct-debits",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts",
										"direct-debits"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T004.014 - Get bulk direct debits specify account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-v",
										"type": "text",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"accountIds\": [\n      \"{{consent-request-account-id}}\"\n    ]\n  },\n  \"meta\": {}\n}"
								},
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts/direct-debits",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts",
										"direct-debits"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T004.015 - Get account scheduled payments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"type": "text",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/accounts/{{consent-request-account-id}}/payments/scheduled",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"accounts",
										"{{consent-request-account-id}}",
										"payments",
										"scheduled"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T004.016 - Get bulk scheduled payments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"type": "text",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/payments/scheduled",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"payments",
										"scheduled"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T004.017 - Get bulk scheduled payments specify account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "x-v",
										"type": "text",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"accountIds\": [\n      \"{{consent-request-account-id}}\"\n    ]\n  },\n  \"meta\": {}\n}"
								},
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/payments/scheduled",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"payments",
										"scheduled"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "S009.T005 Obtain Access Token - no bank:payees:read",
					"item": [
						{
							"name": "S009.T005.001 - Download Private Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var responseBlob = btoa(JSON.stringify(response.keys[0]));",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T005.002 - Generate Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:regular_payments:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\",\n  \"code_challenge\":\"{{pkce-challenge}}\",\n  \"code_challenge_method\": \"S256\",\n  \"state\": \"xyz\"\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"requestJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T005.003 - Initiate Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false,
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-request-url}}",
									"host": [
										"{{consent-request-url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T005.004 - Provide username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "subject",
											"value": "crn0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T005.005 - Verify OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-ref\", $( \"input[name='REF']\" ).val());",
											"    pm.environment.set(\"consent-action\", $( \"form\" ).attr(\"action\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_VALUE",
											"value": "123456",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_STATE",
											"value": "true",
											"type": "text"
										},
										{
											"key": "CSRF_TOKEN",
											"value": "{{consent-request-otp-csrf}}",
											"type": "text"
										},
										{
											"key": "submitform",
											"value": "true",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T005.006 - Load Consent Agentless App",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-consent-completeurl\", $( \"form\" ).attr(\"action\"));",
											"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).eq(0).val());",
											"    pm.environment.set(\"consent-request-consent-account-2\", $( \"input[name='accounts']\" ).eq(1).val());",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allowInteraction",
											"value": "true",
											"type": "text"
										},
										{
											"key": "connectionId",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "resumePath",
											"value": "{{consent-request-nonceurl}}",
											"type": "text"
										},
										{
											"key": "reauth",
											"value": "false",
											"type": "text"
										},
										{
											"key": "REF",
											"value": "{{consent-ref}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{consent-action}}",
									"host": [
										"{{consent-action}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T005.007 - Perform consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    pm.environment.set(\"consent-ref-redirect\", locationHeader);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false,
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account}}",
											"type": "text"
										},
										{
											"key": "approved",
											"value": "allow",
											"type": "text"
										},
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account-2}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{consent-request-consent-completeurl}}",
									"host": [
										"{{consent-request-consent-completeurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T005.008 - Follow REF Redirect",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    if(!locationHeader)",
											"        locationHeader = pm.response.headers.get(\"Referer\");",
											"",
											"    var locationParams = locationHeader.split(\"#\")[1];",
											"    const eachParamArray = locationParams.split('&');",
											"    let params = {};",
											"    eachParamArray.forEach((param) => {",
											"        const key = param.split('=')[0];",
											"        const value = param.split('=')[1];",
											"        Object.assign(params, {[key]: value});",
											"    });",
											"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
											"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
											"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
											"    pm.environment.set(\"consent-request-authcode-callback-id_token\", params[\"id_token\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-ref-redirect}}",
									"host": [
										"{{consent-ref-redirect}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T005.009 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T005.010 - Perform code exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Validate id_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('id_token');",
											"});",
											"pm.test(\"Validate refresh_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('refresh_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
											"    pm.environment.set(\"consent-request-id-token\", response.id_token);",
											"    pm.environment.set(\"consent-request-refresh-token\", response.refresh_token);",
											"    pm.environment.set(\"consent-cdr-arrangement-id\", response[\"cdr_arrangement_id\"]);",
											"});",
											"",
											"",
											"function jwt_decode_payload(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return JSON.parse(atob(parts[1]));",
											"}",
											"",
											"function jwt_decode_header(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return JSON.parse(atob(parts[0]));",
											"}",
											"function jwt_parts(jwt) {",
											"    var parts = jwt.split('.'); // header, payload, signature",
											"    return parts.length;",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{consent-request-authcode-callback-code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{pkce-challenge-s256}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T005.011 - Get payees",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{consent-request-access-token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"type": "text",
										"value": "1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{dh-api-host}}/v1/banking/payees",
									"host": [
										"{{dh-api-host}}"
									],
									"path": [
										"v1",
										"banking",
										"payees"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "S009.T006 Obtain Request cdr:registration",
					"item": [
						{
							"name": "S009.T005.001 - Download Private Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var responseBlob = btoa(JSON.stringify(response.keys[0]));",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T005.002 - Generate Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read cdr:registration",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:accounts.basic:read bank:transactions:read bank:accounts.detail:read bank:regular_payments:read cdr:registration\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\",\n  \"code_challenge\":\"{{pkce-challenge}}\",\n  \"code_challenge_method\": \"S256\",\n  \"state\": \"xyz\"\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"requestJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S009.T005.003 - Initiate Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false,
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-request-url}}",
									"host": [
										"{{consent-request-url}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "S010 Confirmation of Handover",
			"item": [
				{
					"name": "S010.T001 Obtain Access Token",
					"item": [
						{
							"name": "S010.T001.001 - Download Private Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    var responseBlob = btoa(JSON.stringify(response.keys[0]));",
											"    pm.environment.set(\"software-jwks-private\", responseBlob);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"{{flowUUID-datarecipient}}",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S010.T001.002 - Generate Request JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate request-jwt property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-jwt');",
											"});",
											"pm.test(\"Validate request-url property exists\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('request-url');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-url\", response[\"request-url\"]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"type": "text",
										"value": "{{software-jwks-private}}"
									},
									{
										"key": "x-nonce",
										"value": "{{default-nonce}}",
										"type": "text"
									},
									{
										"key": "x-state",
										"value": "{{default-state}}",
										"type": "text"
									},
									{
										"key": "x-issuer",
										"value": "{{dcrClientId}}",
										"type": "text"
									},
									{
										"key": "x-duration-seconds",
										"value": "60",
										"type": "text"
									},
									{
										"key": "x-dataholder-authorization-endpoint",
										"value": "{{dh-idp-host}}{{dh-idp-authorization-endpoint}}",
										"type": "text"
									},
									{
										"key": "x-response-type",
										"value": "code id_token",
										"type": "text"
									},
									{
										"key": "x-scope",
										"value": "openid profile bank:accounts.basic:read bank:transactions:read",
										"type": "text"
									},
									{
										"key": "x-redirecturi",
										"value": "{{default-redirecturi}}",
										"type": "text"
									},
									{
										"key": "x-maxage",
										"value": "-1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\":\"{{dcrClientId}}\",\n  \"scope\": \"openid bank:transactions:read bank:accounts.detail:read bank:regular_payments:read bank:payees:read\",\n  \"iss\": \"{{dcrClientId}}\",\n  \"claims\": {\n    \"sharing_duration\": 5184000,\n    \"id_token\": {\n      \"acr\": {\n        \"values\": [\n          \"urn:cds.au:cdr:2\"\n        ],\n        \"essential\": true\n      },\n      \"auth_time\": {\n        \"essential\": true\n      }\n    },\n    \"userinfo\": {\n      \"family_name\": {\n        \"essential\": true\n      },\n      \"given_name\": {\n        \"essential\": true\n      }\n    }\n  },\n  \"response_type\": \"code id_token\",\n  \"redirect_uri\": \"{{default-redirecturi}}\",\n  \"code_challenge\":\"{{pkce-challenge}}\",\n  \"code_challenge_method\": \"S256\",\n  \"state\": \"xyz\"\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/requestJWT",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"requestJWT"
									]
								}
							},
							"response": []
						},
						{
							"name": "S010.T001.003 - Initiate Consent Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-nonceurl\", $( \"form\" ).attr(\"action\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false,
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-request-url}}",
									"host": [
										"{{consent-request-url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S010.T001.004 - Provide username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-otp-csrf\", $( \"input[name='CSRF_TOKEN']\" ).val());",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "subject",
											"value": "crn0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S010.T001.005 - Verify OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-ref\", $( \"input[name='REF']\" ).val());",
											"    pm.environment.set(\"consent-action\", $( \"form\" ).attr(\"action\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "$ok",
											"value": "clicked",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_VALUE",
											"value": "123456",
											"type": "text"
										},
										{
											"key": "CODE_VERIFICATION_STATE",
											"value": "true",
											"type": "text"
										},
										{
											"key": "CSRF_TOKEN",
											"value": "{{consent-request-otp-csrf}}",
											"type": "text"
										},
										{
											"key": "submitform",
											"value": "true",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{consent-request-nonceurl}}",
									"host": [
										"{{dh-idp-host}}{{consent-request-nonceurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S010.T001.006 - Load Consent Agentless App",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    const $ = cheerio.load(responseBody);",
											"    pm.environment.set(\"consent-request-consent-completeurl\", $( \"form\" ).attr(\"action\"));",
											"    pm.environment.set(\"consent-request-consent-account\", $( \"input[name='accounts']\" ).eq(0).val());",
											"    pm.environment.set(\"consent-request-consent-account-2\", $( \"input[name='accounts']\" ).eq(1).val());",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "allowInteraction",
											"value": "true",
											"type": "text"
										},
										{
											"key": "connectionId",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "resumePath",
											"value": "{{consent-request-nonceurl}}",
											"type": "text"
										},
										{
											"key": "reauth",
											"value": "false",
											"type": "text"
										},
										{
											"key": "REF",
											"value": "{{consent-ref}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{consent-action}}",
									"host": [
										"{{consent-action}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S010.T001.007 - Perform consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    pm.environment.set(\"consent-ref-redirect\", locationHeader);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false,
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account}}",
											"type": "text"
										},
										{
											"key": "approved",
											"value": "allow",
											"type": "text"
										},
										{
											"key": "accounts",
											"value": "{{consent-request-consent-account-2}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{consent-request-consent-completeurl}}",
									"host": [
										"{{consent-request-consent-completeurl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S010.T001.008 - Follow REF Redirect",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var locationHeader = pm.response.headers.get(\"Location\");",
											"    if(!locationHeader)",
											"        locationHeader = pm.response.headers.get(\"Referer\");",
											"",
											"    var locationParams = locationHeader.split(\"#\")[1];",
											"    const eachParamArray = locationParams.split('&');",
											"    let params = {};",
											"    eachParamArray.forEach((param) => {",
											"        const key = param.split('=')[0];",
											"        const value = param.split('=')[1];",
											"        Object.assign(params, {[key]: value});",
											"    });",
											"    pm.environment.set(\"consent-request-authcode-callback\", locationHeader);",
											"    pm.environment.set(\"consent-request-authcode-callback-params\", locationParams);",
											"    pm.environment.set(\"consent-request-authcode-callback-code\", params[\"code\"]);",
											"    pm.environment.set(\"consent-request-authcode-callback-id_token\", params[\"id_token\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": false
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{consent-ref-redirect}}",
									"host": [
										"{{consent-ref-redirect}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S010.T001.009 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S010.T001.010 - Perform code exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-refresh-token-old\", response.refresh_token);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{consent-request-authcode-callback-code}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{pkce-challenge-s256}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "S010.T002 Roll Refresh Token with RT #1",
					"item": [
						{
							"name": "S010.T002.001 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S010.T002.002 - Perform refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
											"    pm.environment.set(\"consent-request-refresh-token-new\", response.refresh_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "{{consent-request-refresh-token-old}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "S010.T003 Roll Refresh Token with RT #1 (again), obtain RT #2",
					"item": [
						{
							"name": "S010.T003.001 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S010.T003.002 - Perform refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
											"    pm.environment.set(\"consent-request-refresh-token-new\", response.refresh_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "{{consent-request-refresh-token-old}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "S010.T004 Introspect RT #1",
					"item": [
						{
							"name": "S002.T004.001 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T004.002 - Introspect Refresh Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate exp is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('exp');",
											"});",
											"pm.test(\"Validate cdr_arrangement_id is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('cdr_arrangement_id');",
											"});",
											"pm.test(\"Validate active=true\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.active).to.equal(true);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-cdr-arrangement-id\", response[\"cdr_arrangement_id\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token",
											"value": "{{consent-request-refresh-token-old}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-introspect-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-introspect-endpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "S010.T005 Roll Refresh Token with RT #2, obtain RT #3",
					"item": [
						{
							"name": "S010.T005.001 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S010.T005.002 - Perform refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate access_token is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('access_token');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-request-access-token\", response.access_token);",
											"    pm.environment.set(\"consent-request-refresh-token-new-2\", response.refresh_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "{{consent-request-refresh-token-new}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "S010.T006 Roll Refresh Token with RT #1 (Fail)",
					"item": [
						{
							"name": "S010.T006.001 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S010.T006.002 - Perform refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "{{consent-request-refresh-token-old}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "S010.T007 Introspect RT #3",
					"item": [
						{
							"name": "S002.T007.001 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S002.T007.002 - Introspect Refresh Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate response header X-VALIDATED-CLIENTAUTH=TRUE\", function () {",
											"    pm.response.to.be.header(\"X-VALIDATED-CLIENTAUTH\", \"TRUE\");",
											"});",
											"pm.test(\"Validate exp is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('exp');",
											"});",
											"pm.test(\"Validate cdr_arrangement_id is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('cdr_arrangement_id');",
											"});",
											"pm.test(\"Validate active=true\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.active).to.equal(true);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-cdr-arrangement-id\", response[\"cdr_arrangement_id\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token",
											"value": "{{consent-request-refresh-token-new-2}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-introspect-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-introspect-endpoint}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "S010.T008 Roll Refresh Token with RT #2 (Fail)",
					"item": [
						{
							"name": "S010.T008.001 - Creates JWT-Bearer Client Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate client assertion is available\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response).to.have.property('client-assertion');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"consent-client-assertion\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "private-jwk",
											"value": "{{software-jwks-private}}",
											"type": "text"
										},
										{
											"key": "client-id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}/as/token.oauth2",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "{{softwareId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S010.T008.002 - Perform refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "refresh_token",
											"value": "{{consent-request-refresh-token-new}}",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "{{dcrClientId}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "refresh_token",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{default-redirecturi}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{consent-client-assertion}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}{{dh-idp-token-endpoint}}",
									"host": [
										"{{dh-idp-host}}{{dh-idp-token-endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "S999 Inactivate Software",
			"item": [
				{
					"name": "S999.T000 Get Current Next-Update value",
					"item": [
						{
							"name": "S999.T000.001 Get Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"postmanAT\", response[\"access_token\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "postman-cc",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "2FederateM0re",
											"type": "text",
											"disabled": true
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "adh-cache-write",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}/as/token.oauth2",
									"host": [
										"{{dh-idp-host}}"
									],
									"path": [
										"as",
										"token.oauth2"
									]
								}
							},
							"response": []
						},
						{
							"name": "S999.T000.002 GET Product Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"productObjectId\", response.Resources[0].id);",
											"    pm.environment.set(\"productObjectNextUpdate\", response.Resources[0][\"next-update\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{postmanAT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "postman-cc",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "2FederateM0re",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "adh-cache-write",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-dir-host}}/scim/v2/adh-cache?filter=endpoint-name eq \"GetSoftwareProductsStatus\"",
									"host": [
										"{{dh-dir-host}}"
									],
									"path": [
										"scim",
										"v2",
										"adh-cache"
									],
									"query": [
										{
											"key": "filter",
											"value": "endpoint-name eq \"GetSoftwareProductsStatus\""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "S999.T001 Inactive Test (Disable access)",
					"item": [
						{
							"name": "S999.T001.001 - Update Product Status to Inactive",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"ACTIVE\",\n    \"legalEntityId\": \"{{legalEntityId}}\",\n    \"legalEntityName\": \"{{data-recipient-id}} Ltd Pty\",\n    \"accreditationNumber\": \"123456\",\n    \"industry\": \"banking\",\n    \"logoUri\": \"https://mycompany.com/logo.png\",\n    \"dataRecipientBrands\": [\n        {\n            \"status\": \"ACTIVE\",\n            \"dataRecipientBrandId\": \"brand-{{flowUUID-datarecipient}}\",\n            \"brandName\": \"Brand One\",\n            \"logoUri\": \"https://mycompany.com/brand1/logo.png\",\n            \"softwareProducts\":[\n                {\n                    \"softwareProductId\": \"software-{{flowUUID-datarecipient}}\",\n                    \"softwareProductName\": \"Brand One Software One\",\n                    \"softwareProductDescription\": \"Brand One Software One Description\",\n                    \"logoUri\": \"https://mycompany.com/brand1/software1/logo.png\",\n                    \"status\": \"INACTIVE\",\n                    \"version\": \"1.0\",\n                    \"policyUri\": \"https://mycompany.com/brand1/software1/policy\",\n                    \"termsUri\": \"https://mycompany.com/brand1/software1/terms\",\n                    \"redirectUri\": \"https://httpbin.org/get\",\n                    \"scope\": \"bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read bank:payees:read bank:regular_payments:read common:customer.basic:read common:customer.detail:read\",\n                    \"recipientBaseUri\": \"https://mycompany.com/brand1\",\n                    \"jwksUri\": \"http://cdrregister:8084/helper/JWKS/{{flowUUID-datarecipient}}\",\n                    \"revocationJwksUri\": \"{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/revocation\"\n                }\n            ]\n        }\n    ]\n\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/admin/model/dataRecipient/{{legalEntityId}}",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"admin",
										"model",
										"dataRecipient",
										"{{legalEntityId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "S999.T001.002 - Get CDR Register Private JWK",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate kty is RSA\", function () {",
											"    var response = pm.response.json();",
											"    pm.expect(response.keys[0].kty).to.equal('RSA');",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"software-jwks-global-private\", btoa(JSON.stringify(response.keys[0])));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{cdr-register-testharness-host}}/helper/JWKS/_GLOBAL_/private",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"helper",
										"JWKS",
										"_GLOBAL_",
										"private"
									]
								}
							},
							"response": []
						},
						{
							"name": "S999.T001.003 - Generate Client Authentication JWT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"cdrregister-jwt\", response[\"client-assertion\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-private-jwk",
										"value": "{{software-jwks-global-private}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client-id",
											"value": "cdr-register",
											"type": "text"
										},
										{
											"key": "audience",
											"value": "{{dh-idp-host}}",
											"type": "text"
										},
										{
											"key": "kid",
											"value": "_GLOBAL_",
											"type": "text"
										},
										{
											"key": "token-endpoint",
											"value": "{{dh-idp-host}}",
											"type": "text"
										},
										{
											"key": "private-jwk",
											"value": "{{software-jwks-global-private}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/testtool/datarecipient/createClientAssertion",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"testtool",
										"datarecipient",
										"createClientAssertion"
									]
								}
							},
							"response": []
						},
						{
							"name": "S999.T001.004 - Call Admin API to force refresh",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{cdrregister-jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\":\n    {\n        \"action\":\"REFRESH\"\n    }    \n}"
								},
								"url": {
									"raw": "{{dh-idp-host}}/cds-au/v1/admin/register/metadata",
									"host": [
										"{{dh-idp-host}}"
									],
									"path": [
										"cds-au",
										"v1",
										"admin",
										"register",
										"metadata"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "S999.T002 Test Latest Next-Update value has changed",
					"item": [
						{
							"name": "S999.T002.001 Get Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"postmanAT\", response[\"access_token\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Certificate",
										"value": "{{mtlsHeader}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "postman-cc",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "2FederateM0re",
											"type": "text",
											"disabled": true
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "adh-cache-write",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-idp-host}}/as/token.oauth2",
									"host": [
										"{{dh-idp-host}}"
									],
									"path": [
										"as",
										"token.oauth2"
									]
								}
							},
							"response": []
						},
						{
							"name": "S999.T002.002 GET Product Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate next-update has changed\", function () {",
											"    var response = pm.response.json();",
											"    var latestNextUpdate = response.Resources[0][\"next-update\"];",
											"    var currentNextUpdate = pm.environment.get(\"productObjectNextUpdate\");",
											"",
											"    pm.expect(latestNextUpdate).to.not.equal(currentNextUpdate);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"productObjectId\", response.Resources[0].id);",
											"    pm.environment.set(\"productObjectNextUpdate\", response.Resources[0][\"next-update\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{postmanAT}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "postman-cc",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "2FederateM0re",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "adh-cache-write",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{dh-dir-host}}/scim/v2/adh-cache?filter=endpoint-name eq \"GetSoftwareProductsStatus\"",
									"host": [
										"{{dh-dir-host}}"
									],
									"path": [
										"scim",
										"v2",
										"adh-cache"
									],
									"query": [
										{
											"key": "filter",
											"value": "endpoint-name eq \"GetSoftwareProductsStatus\""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "S999.T003 Remove Test (Remove client and consent)",
					"item": [
						{
							"name": "S999.T003.001 - Update Product Status to Remove",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"ACTIVE\",\n    \"legalEntityId\": \"{{legalEntityId}}\",\n    \"legalEntityName\": \"{{data-recipient-id}} Ltd Pty\",\n    \"accreditationNumber\": \"123456\",\n    \"industry\": \"banking\",\n    \"logoUri\": \"https://mycompany.com/logo.png\",\n    \"dataRecipientBrands\": [\n        {\n            \"status\": \"ACTIVE\",\n            \"dataRecipientBrandId\": \"brand-{{flowUUID-datarecipient}}\",\n            \"brandName\": \"Brand One\",\n            \"logoUri\": \"https://mycompany.com/brand1/logo.png\",\n            \"softwareProducts\":[\n                {\n                    \"softwareProductId\": \"software-{{flowUUID-datarecipient}}\",\n                    \"softwareProductName\": \"Brand One Software One\",\n                    \"softwareProductDescription\": \"Brand One Software One Description\",\n                    \"logoUri\": \"https://mycompany.com/brand1/software1/logo.png\",\n                    \"status\": \"REMOVED\",\n                    \"version\": \"1.0\",\n                    \"policyUri\": \"https://mycompany.com/brand1/software1/policy\",\n                    \"termsUri\": \"https://mycompany.com/brand1/software1/terms\",\n                    \"redirectUri\": \"https://httpbin.org/get\",\n                    \"scope\": \"bank:accounts.basic:read bank:accounts.detail:read bank:transactions:read bank:payees:read bank:regular_payments:read common:customer.basic:read common:customer.detail:read\",\n                    \"recipientBaseUri\": \"https://mycompany.com/brand1\",\n                    \"jwksUri\": \"http://cdrregister:8084/helper/JWKS/{{flowUUID-datarecipient}}\",\n                    \"revocationJwksUri\": \"{{cdr-register-testharness-host}}/helper/JWKS/{{flowUUID-datarecipient}}/revocation\"\n                }\n            ]\n        }\n    ]\n\n}"
								},
								"url": {
									"raw": "{{cdr-register-testharness-host}}/admin/model/dataRecipient/{{legalEntityId}}",
									"host": [
										"{{cdr-register-testharness-host}}"
									],
									"path": [
										"admin",
										"model",
										"dataRecipient",
										"{{legalEntityId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"Object.prototype.jwt_decode_payload = function(jwt) {",
					"    var parts = jwt.split('.'); // header, payload, signature",
					"    return JSON.parse(atob(parts[1]));",
					"}",
					"",
					"Object.prototype.jwt_decode_header = function(jwt) {",
					"    var parts = jwt.split('.'); // header, payload, signature",
					"    return JSON.parse(atob(parts[0]));",
					"}",
					"Object.prototype.jwt_parts = function(jwt) {",
					"    var parts = jwt.split('.'); // header, payload, signature",
					"    return parts.length;",
					"}",
					"Object.prototype.test_http_status = function(http_status,response) {",
					"    pm.test(\"Validate response status=\"+http_status, function () {",
					"        response.to.have.status(http_status);",
					"    });",
					"}",
					"",
					"Object.prototype.test_jwt_alg = function(alg,jwt_header) {",
					"    pm.test(\"Validate JWT ALG =\"+alg, function () {",
					"        pm.expect(jwt_header.alg).to.eql(alg);",
					"    });",
					"}",
					"",
					"Object.prototype.test_params_object = function(params,object,suffix){",
					"    for (i=0; i<params.length; i++) {",
					"        pm.test(\"Validate \"+ params[i] + \" \" + suffix, function () {",
					"            pm.expect(object).to.have.property(params[i]);",
					"        });",
					"    }",
					"};"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "cdr-register-testharness-host",
			"value": "https://mockregister.data-holder.local"
		},
		{
			"key": "dh-idp-host",
			"value": "https://sso.data-holder.local"
		},
		{
			"key": "dh-idp-register-endpoint",
			"value": "/as/clients.oauth2"
		},
		{
			"key": "dh-idp-token-endpoint",
			"value": "/as/token.oauth2"
		},
		{
			"key": "pki-basicheader",
			"value": "Basic cGtpdXNlcjphYmNEMzBmZw=="
		},
		{
			"key": "default-nonce",
			"value": "ea18887b-8629-43f2-93e1-4346959fb2ec"
		},
		{
			"key": "default-state",
			"value": "887bea18-93e1-8629-43f2-59fb2ec43469"
		},
		{
			"key": "dh-idp-authorization-endpoint",
			"value": "/as/authorization.oauth2"
		},
		{
			"key": "default-redirecturi",
			"value": "https://httpbin.org/get"
		},
		{
			"key": "dh-idp-introspect-endpoint",
			"value": "/as/introspect.oauth2"
		},
		{
			"key": "dh-api-host",
			"value": "https://api.data-holder.local/cds-au"
		},
		{
			"key": "dh-idp-revocation-endpoint",
			"value": "/as/revoke_token.oauth2"
		},
		{
			"key": "dh-idp-userinfo-endpoint",
			"value": "/idp/userinfo.openid"
		},
		{
			"key": "dh-idp-cdrarrangement-endpoint",
			"value": "/data-holder/arrangements"
		},
		{
			"key": "openid-configuration",
			"value": "/.well-known/openid-configuration"
		},
		{
			"key": "grant-management-user",
			"value": "Administrator"
		},
		{
			"key": "grant-management-password",
			"value": "2FederateM0re"
		},
		{
			"key": "dh-dir-host",
			"value": "https://pd.data-holder.local"
		},
		{
			"key": "pkce-challenge",
			"value": "PNU4mSDcKWgrG1Sl8C7UT9n0PyvOJEuc6JV7r9YcCyE"
		},
		{
			"key": "pkce-challenge-s256",
			"value": "iE6J6yykJ68pWqYooNvqp17xNF_54jOQttyTG9j-E0pggUO.lsDm23t9ZdTjsFT.SpzludwTRlun8wQX8VJunzE09tnWHqviupObE-5rF_fAHlcsqMl5ti4Kx53vVf3j"
		},
		{
			"key": "data-recipient-id",
			"value": "abcd"
		},
		{
			"key": "mtlsHeader",
			"value": ""
		},
		{
			"key": "consent-request-access-token-sub",
			"value": "4b4a457a-1a7e-380a-a2fc-1412ae425ba9"
		}
	]
}