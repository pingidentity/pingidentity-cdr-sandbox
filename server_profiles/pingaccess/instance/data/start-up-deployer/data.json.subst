{
    "data": {
        "httpHostSource": {
            "headerNameList": [
                "Host",
                "X-Forwarded-Host"
            ],
            "listValueLocation": "LAST"
        },
        "virtualHosts": [
            {
                "trustedCertificateGroupId": 3,
                "port": 443,
                "host": "sso.${BASE_HOSTNAME}",
                "id": 5,
                "keyPairId": 0,
                "agentResourceCacheTTL": 900
            },
            {
                "trustedCertificateGroupId": 0,
                "port": 443,
                "host": "sso-admin.${BASE_HOSTNAME}",
                "id": 7,
                "keyPairId": 0,
                "agentResourceCacheTTL": 900
            },
            {
                "trustedCertificateGroupId": 3,
                "port": 443,
                "host": "api.${BASE_HOSTNAME}",
                "id": 10,
                "keyPairId": 0,
                "agentResourceCacheTTL": 900
            },
            {
                "trustedCertificateGroupId": 0,
                "port": 3000,
                "host": "pingaccess",
                "id": 11,
                "keyPairId": 0,
                "agentResourceCacheTTL": 900
            },
            {
                "trustedCertificateGroupId": 3,
                "port": 443,
                "host": "host.docker.internal",
                "id": 12,
                "keyPairId": 0,
                "agentResourceCacheTTL": 900
            },
            {
                "trustedCertificateGroupId": 0,
                "port": 443,
                "host": "mockregister.${BASE_HOSTNAME}",
                "id": 13,
                "keyPairId": 0,
                "agentResourceCacheTTL": 900
            },
            {
                "trustedCertificateGroupId": 0,
                "port": 443,
                "host": "pd.${BASE_HOSTNAME}",
                "id": 14,
                "keyPairId": 0,
                "agentResourceCacheTTL": 900
            },
            {
                "trustedCertificateGroupId": 0,
                "port": 443,
                "host": "consent.${BASE_HOSTNAME}",
                "id": 15,
                "keyPairId": 0,
                "agentResourceCacheTTL": 900
            },
            {
                "trustedCertificateGroupId": 0,
                "port": 443,
                "host": "spa.${DR_BASE_HOSTNAME}",
                "id": 16,
                "keyPairId": 0,
                "agentResourceCacheTTL": 900
            },
            {
                "trustedCertificateGroupId": 3,
                "port": 6443,
                "host": "api.${BASE_HOSTNAME}",
                "id": 17,
                "keyPairId": 0,
                "agentResourceCacheTTL": 900
            },
            {
                "trustedCertificateGroupId": 0,
                "port": 6443,
                "host": "consent.${BASE_HOSTNAME}",
                "id": 18,
                "keyPairId": 0,
                "agentResourceCacheTTL": 900
            },
            {
                "trustedCertificateGroupId": 0,
                "port": 6443,
                "host": "mockregister.${BASE_HOSTNAME}",
                "id": 19,
                "keyPairId": 0,
                "agentResourceCacheTTL": 900
            },
            {
                "trustedCertificateGroupId": 0,
                "port": 6443,
                "host": "pd.${BASE_HOSTNAME}",
                "id": 20,
                "keyPairId": 0,
                "agentResourceCacheTTL": 900
            },
            {
                "trustedCertificateGroupId": 0,
                "port": 6443,
                "host": "spa.${DR_BASE_HOSTNAME}",
                "id": 21,
                "keyPairId": 0,
                "agentResourceCacheTTL": 900
            },
            {
                "trustedCertificateGroupId": 3,
                "port": 6443,
                "host": "sso.${BASE_HOSTNAME}",
                "id": 22,
                "keyPairId": 0,
                "agentResourceCacheTTL": 900
            },
            {
                "trustedCertificateGroupId": 3,
                "port": 6443,
                "host": "sso-local.${BASE_HOSTNAME}",
                "id": 23,
                "keyPairId": 0,
                "agentResourceCacheTTL": 900
            },
            {
                "trustedCertificateGroupId": 3,
                "port": 443,
                "host": "sso-2.${BASE_HOSTNAME}",
                "id": 24,
                "keyPairId": 0,
                "agentResourceCacheTTL": 900
            },
            {
                "trustedCertificateGroupId": 3,
                "port": 6443,
                "host": "sso-2.${BASE_HOSTNAME}",
                "id": 25,
                "keyPairId": 0,
                "agentResourceCacheTTL": 900
            },
            {
                "trustedCertificateGroupId": 0,
                "port": 3000,
                "host": "sso.internal",
                "id": 26,
                "keyPairId": 0,
                "agentResourceCacheTTL": 900
            },
            {
                "trustedCertificateGroupId": 0,
                "port": 3000,
                "host": "sso-2.internal",
                "id": 27,
                "keyPairId": 0,
                "agentResourceCacheTTL": 900
            }
        ],
        "acmeDefaultServer": {
            "location": "https://localhost:9000/pa-admin-api/v3/acme/servers/08eb4cbc-20ed-409b-82c6-12fd0c92eb71",
            "id": "08eb4cbc-20ed-409b-82c6-12fd0c92eb71"
        },
        "httpsListeners": [
            {
                "restartRequired": false,
                "name": "ADMIN",
                "useServerCipherSuiteOrder": true,
                "id": 1,
                "keyPairId": 5
            },
            {
                "restartRequired": false,
                "name": "ENGINE",
                "useServerCipherSuiteOrder": true,
                "id": 2,
                "keyPairId": 8
            },
            {
                "restartRequired": true,
                "name": "AGENT",
                "useServerCipherSuiteOrder": true,
                "id": 3,
                "keyPairId": 7
            },
            {
                "restartRequired": false,
                "name": "SIDEBAND",
                "useServerCipherSuiteOrder": true,
                "id": 5,
                "keyPairId": 5
            }
        ],
        "rules": [
            {
                "configuration": {
                    "rejectionHandler": "1",
                    "errorResponseTemplateFile": "policy.error.page.template.html",
                    "errorResponseContentType": "text/html; charset=UTF-8",
                    "groovyScript": "import javax.xml.bind.DatatypeConverter;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.cert.CertificateEncodingException;\nimport java.security.cert.X509Certificate;\n\nimport java.io.ByteArrayInputStream;\nimport java.security.cert.CertificateException;\nimport java.security.cert.CertificateFactory;\nimport java.security.cert.X509Certificate;\nimport java.util.Base64;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\n\n// START CONFIGURATION\n\ndef BEGIN_CERT = \"-----BEGIN CERTIFICATE-----\";\ndef END_CERT = \"-----END CERTIFICATE-----\";\n\ndef HEADER_INCOMINGCERTIFICATE = \"X-Certificate\";\ndef HEADER_OUTGOINGCERTIFICATE = \"X-PFCertificate\";\ndef HEADER_CERTIFICATETHUMBPRINT = \"X-CertificateThumbprint\";\ndef IS_PROXY_TERMINATED = false;\ndef IS_CERT_HEADER_URL_ENCODED = false;\n\n// END CONFIGURATION\n\nif(exc?.response)\n{\n  addResponseHeader(exc?.response, \"X-VALIDATED-CLIENTAUTH\", \"TRUE\");\n}\nelse\n{\n  exc?.request?.header?.removeFields(HEADER_CERTIFICATETHUMBPRINT);\n  def certChain = getCertificate(exc, IS_PROXY_TERMINATED, HEADER_INCOMINGCERTIFICATE, HEADER_OUTGOINGCERTIFICATE, BEGIN_CERT, END_CERT, IS_CERT_HEADER_URL_ENCODED);\n\n  if(certChain)\n    exc?.request?.header?.add(HEADER_CERTIFICATETHUMBPRINT, getThumbprint(certChain));\n}\n\npass();\n\nvoid addResponseHeader(def response, def headerName, def headerValue)\n{\n  if(response)\n    response?.header?.add(headerName, headerValue);\n}\n\nString getThumbprint(def certChain)\n        throws NoSuchAlgorithmException, CertificateEncodingException {\n\n    if(certChain == null)\n          return null;\n\n    def cert = certChain;\n\n    MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n    byte[] der = cert.getEncoded();\n    md.update(der);\n    byte[] digest = md.digest();\n    String digestHex = DatatypeConverter.printHexBinary(digest);\n    return digestHex.toLowerCase();\n\n}\n\nX509Certificate getCertificate(def exc, def isTerminatedProxy, def headerName, def outgoingHeaderName, def beginCert, def endCert, def isCertHeaderUrlEncoded)\n{\n  X509Certificate certChain = null;\n  if(isTerminatedProxy)\n  {\n    def certificateFromHeader = exc?.request?.header?.getFirstValue(headerName);\n    if(certificateFromHeader)\n    {\n      //before decoding we need to get rod off the prefix and suffix\n      String cleanStr = certificateFromHeader.replaceAll(beginCert, \"\").replaceAll(endCert, \"\").replaceAll(\"[\\\\n\\\\t ]\", \"\");\n\n      if(isCertHeaderUrlEncoded)\n      {\n        try {\n          cleanStr = URLDecoder.decode(cleanStr, \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n          exc?.log.error(\"Unable to url decode header\");\n        }\n      }\n\n      exc?.request?.header?.removeFields(headerName);\n      exc?.request?.header?.removeFields(outgoingHeaderName);\n      exc?.request?.header?.add(outgoingHeaderName, cleanStr);\n\n      certChain = parseCertificate(cleanStr);\n    }\n  }\n  else if(exc?.sslData?.clientCertificateChain && !exc?.sslData?.clientCertificateChain.isEmpty())\n  \tcertChain = exc?.sslData?.clientCertificateChain.get(0);\n\n  return certChain;\n}\n\nX509Certificate parseCertificate(String cleanStr) {\n\n  byte [] decoded = Base64.getDecoder().decode(cleanStr);\n\n  try {\n    return (X509Certificate) CertificateFactory.getInstance(\"X.509\").generateCertificate(new ByteArrayInputStream(decoded));\n  } catch (CertificateException e) {\n\texc?.log?.warn(\"Bad certificate provided: \" + certStr);\n    return null;\n  }\n}\n",
                    "rejectionHandlingEnabled": true,
                    "errorResponseCode": 403,
                    "errorResponseStatusMsg": "Forbidden"
                },
                "name": "MTLS-HoK--SendThumbprint",
                "className": "com.pingidentity.pa.policy.GroovyPolicyInterceptor",
                "id": 1,
                "supportedDestinations": [
                    "Agent",
                    "Site"
                ]
            },
            {
                "configuration": {
                    "rejectionHandler": "4",
                    "errorResponseTemplateFile": "policy.error.page.template.html",
                    "errorResponseContentType": "text/html; charset=UTF-8",
                    "groovyScript": "import javax.xml.bind.DatatypeConverter;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.cert.CertificateEncodingException;\nimport java.security.cert.X509Certificate;\nimport java.util.Base64;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport java.io.ByteArrayInputStream;\nimport java.security.cert.CertificateException;\nimport java.security.cert.CertificateFactory;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\n\n// START CONFIGURATION\n\ndef BEGIN_CERT = \"-----BEGIN CERTIFICATE-----\";\ndef END_CERT = \"-----END CERTIFICATE-----\";\n\ndef HEADER_INCOMINGCERTIFICATE = \"X-Certificate\";\ndef HEADER_OUTGOINGCERTIFICATE = \"X-PFCertificate\";\ndef IS_PROXY_TERMINATED = false;\ndef IS_CERT_HEADER_URL_ENCODED = false;\n\n// END CONFIGURATION\n\ndef certChain = getCertificate(exc, IS_PROXY_TERMINATED, HEADER_INCOMINGCERTIFICATE, HEADER_OUTGOINGCERTIFICATE, BEGIN_CERT, END_CERT, IS_CERT_HEADER_URL_ENCODED);\n\ndef authHeader = exc?.request?.header?.getValues(\"Authorization\");\n\nif(exc?.response)\n{\n  addResponseHeader(exc?.response, \"X-VALIDATED-CLIENTAUTH\", \"TRUE\");\n  pass();\n}\nelse if(certChain)\n{\n  if(authHeader && authHeader?.size() == 1)\n  {\n    def token = exc?.request?.header?.getFirstValue(\"Authorization\");\n\n    if(validateThumbprint(token, certChain))\n      pass();\n    else\n      fail();\n  }\n  else\n    fail();\n}\nelse\n\tpass();\n\nboolean validateThumbprint(def token, def cert)\n{\n  if(token != null && token.startsWith(\"Bearer \"))\n  {\n    def accessToken = token.replace(\"Bearer \", \"\");\n    def cnfValue = getAccessTokenClaim(accessToken, \"cnf.x5t#S256\");\n\n    if(cnfValue == null || cnfValue.equals(\"\"))\n    \treturn true;\n\n\tdef expectedThumbprint = getThumbprint(cert);\n\n    if(expectedThumbprint != null && cnfValue.equals(expectedThumbprint))\n      return true;\n    else\n      return false;\n  }\n\n  return true;\n}\n\nvoid addResponseHeader(def response, def headerName, def headerValue)\n{\n  if(response)\n    response?.header?.add(headerName, headerValue);\n}\n\nString getThumbprint(def certChain)\n        throws NoSuchAlgorithmException, CertificateEncodingException {\n\n    if(certChain == null)\n          return null;\n\n    def cert = certChain;\n\n    MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n    byte[] der = cert.getEncoded();\n    md.update(der);\n    byte[] digest = md.digest();\n    String digestHex = DatatypeConverter.printHexBinary(digest);\n    return digestHex.toLowerCase();\n\n}\n\nString getAccessTokenClaim(String accessToken, String claim)\n{\n    def accessTokenSplit = accessToken.split(\"\\\\.\");\n    def accessTokenBodyEncoded = accessTokenSplit[1];\n    def accessTokenBody = new String(Base64.getDecoder().decode(accessTokenBodyEncoded));\n\n    return getClaimValue(accessTokenBody, claim);\n}\n\nString getClaimValue(String responseStr, String jsonPath)\n{\n    ObjectMapper mapper = new ObjectMapper();\n    JsonNode resultObject = mapper.readTree(responseStr);\n\n    String [] splitJsonPath = jsonPath.split(\"\\\\.\");\n\n    for(String path : splitJsonPath)\n    {\n        resultObject = resultObject.findPath(path);\n    }\n\n    return resultObject.textValue();\n\n}\n\nX509Certificate getCertificate(def exc, def isTerminatedProxy, def headerName, def outgoingHeaderName, def beginCert, def endCert, def isCertHeaderUrlEncoded)\n{\n  X509Certificate certChain = null;\n  if(isTerminatedProxy)\n  {\n    def certificateFromHeader = exc?.request?.header?.getFirstValue(headerName);\n    if(certificateFromHeader)\n    {\n      //before decoding we need to get rod off the prefix and suffix\n      String cleanStr = certificateFromHeader.replaceAll(beginCert, \"\").replaceAll(endCert, \"\").replaceAll(\"[\\\\n\\\\t ]\", \"\");\n\n      if(isCertHeaderUrlEncoded)\n      {\n        try {\n          cleanStr = URLDecoder.decode(cleanStr, \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n          exc?.log.error(\"Unable to url decode header\");\n        }\n      }\n\n      exc?.request?.header?.removeFields(headerName);\n      exc?.request?.header?.removeFields(outgoingHeaderName);\n      exc?.request?.header?.add(outgoingHeaderName, cleanStr);\n\n      certChain = parseCertificate(cleanStr);\n    }\n  }\n  else if(exc?.sslData?.clientCertificateChain && !exc?.sslData?.clientCertificateChain.isEmpty())\n  \tcertChain = exc?.sslData?.clientCertificateChain.get(0);\n\n  return certChain;\n}\n\nX509Certificate parseCertificate(String cleanStr) {\n\n  byte [] decoded = Base64.getDecoder().decode(cleanStr);\n\n  try {\n    return (X509Certificate) CertificateFactory.getInstance(\"X.509\").generateCertificate(new ByteArrayInputStream(decoded));\n  } catch (CertificateException e) {\n\texc?.log?.warn(\"Bad certificate provided: \" + certStr);\n    return null;\n  }\n}\n",
                    "rejectionHandlingEnabled": true,
                    "errorResponseCode": 403,
                    "errorResponseStatusMsg": "Forbidden"
                },
                "name": "MTLS-HoK-VerifyAccessToken",
                "className": "com.pingidentity.pa.policy.GroovyPolicyInterceptor",
                "id": 2,
                "supportedDestinations": [
                    "Agent",
                    "Site"
                ]
            },
            {
                "configuration": {
                    "rejectionHandler": "5",
                    "errorResponseTemplateFile": "policy.error.page.template.html",
                    "errorResponseContentType": "text/html; charset=UTF-8",
                    "groovyScript": "import java.util.Base64\nimport com.fasterxml.jackson.databind.JsonNode\nimport com.fasterxml.jackson.databind.ObjectMapper\nimport java.security.cert.CertificateEncodingException;\nimport java.security.cert.X509Certificate;\n\nimport java.io.ByteArrayInputStream;\nimport java.security.cert.CertificateException;\nimport java.security.cert.CertificateFactory;\nimport java.security.cert.X509Certificate;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\n\n// START CONFIGURATION\n\ndef BEGIN_CERT = \"-----BEGIN CERTIFICATE-----\";\ndef END_CERT = \"-----END CERTIFICATE-----\";\n\ndef HEADER_INCOMINGCERTIFICATE = \"X-Certificate\";\ndef HEADER_OUTGOINGCERTIFICATE = \"X-PFCertificate\";\ndef IS_PROXY_TERMINATED = false;\ndef IS_CERT_HEADER_URL_ENCODED = false;\n\n// END CONFIGURATION\n\ndef host = exc?.request?.header?.host;\n\nif(host.equals(\"pingaccess:3000\"))\n{\n  pass();\n}\nelse if(exc?.response)\n{\n  addResponseHeader(exc?.response, \"X-VALIDATED-CLIENTAUTH\", \"TRUE\");\n  pass();\n}\nelse\n{\n  def CDR_CLIENTID_PREFIX = \"dcr-\";\n\n  def token = exc?.request?.header?.getFirstValue(\"Authorization\");\n  def isPass = true;\n\n  def clientId = null;\n\n  if(token)\n  \tclientId = getAccessTokenClaim(token, \"client_id\");\n\n  if(clientId == null)\n  {\n    def clientAssertion = getRequestParameter(exc?.request, \"client_assertion\");\n    if(clientAssertion != null)\n    \tclientId = getAccessTokenClaim(clientAssertion, \"sub\");\n  }\n\n  if(clientId == null)\n    clientId = getRequestParameter(exc?.request, \"client_id\");\n\n  if(clientId == null)\n    clientId = \"\";\n\n  if(clientId.startsWith(CDR_CLIENTID_PREFIX))\n  {\n    def certChain = getCertificate(exc, IS_PROXY_TERMINATED, HEADER_INCOMINGCERTIFICATE, HEADER_OUTGOINGCERTIFICATE, BEGIN_CERT, END_CERT, IS_CERT_HEADER_URL_ENCODED);\n    if(!certChain)\n      isPass = false;\n  }\n\n  if(isPass)\n    pass();\n  else\n    fail();\n}\n\nvoid addResponseHeader(def response, def headerName, def headerValue)\n{\n  if(response)\n    response?.header?.add(headerName, headerValue);\n}\n\nString getRequestParameter(def request, def paramName)\n{\n  def postParams = request?.getPostParams();\n  if(postParams == null)\n    return null;\n\n  if(!postParams.containsKey(paramName))\n    return null;\n\n  return postParams.get(paramName)[0];\n}\n\nString getAccessTokenClaim(String accessToken, String claim)\n{\n    def accessTokenSplit = accessToken.split(\"\\\\.\");\n    if(accessTokenSplit.length != 3)\n      return null;\n\n    def accessTokenBodyEncoded = accessTokenSplit[1];\n    def accessTokenBody = new String(Base64.getDecoder().decode(accessTokenBodyEncoded));\n\n    return getClaimValue(accessTokenBody, claim);\n}\n\nString getClaimValue(String responseStr, String jsonPath)\n{\n    ObjectMapper mapper = new ObjectMapper();\n    JsonNode resultObject = mapper.readTree(responseStr);\n\n    String [] splitJsonPath = jsonPath.split(\"\\\\.\");\n\n    for(String path : splitJsonPath)\n    {\n        resultObject = resultObject.findPath(path);\n    }\n\n    return resultObject.textValue();\n\n}\n\nX509Certificate getCertificate(def exc, def isTerminatedProxy, def headerName, def outgoingHeaderName, def beginCert, def endCert, def isCertHeaderUrlEncoded)\n{\n  X509Certificate certChain = null;\n  if(isTerminatedProxy)\n  {\n    def certificateFromHeader = exc?.request?.header?.getFirstValue(headerName);\n    if(certificateFromHeader)\n    {\n      //before decoding we need to get rod off the prefix and suffix\n      String cleanStr = certificateFromHeader.replaceAll(beginCert, \"\").replaceAll(endCert, \"\").replaceAll(\"[\\\\n\\\\t ]\", \"\");\n\n      if(isCertHeaderUrlEncoded)\n      {\n        try {\n          cleanStr = URLDecoder.decode(cleanStr, \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n          exc?.log.error(\"Unable to url decode header\");\n        }\n      }\n\n      exc?.request?.header?.removeFields(headerName);\n      exc?.request?.header?.removeFields(outgoingHeaderName);\n      exc?.request?.header?.add(outgoingHeaderName, cleanStr);\n\n      certChain = parseCertificate(cleanStr);\n    }\n  }\n  else if(exc?.sslData?.clientCertificateChain && !exc?.sslData?.clientCertificateChain.isEmpty())\n  \tcertChain = exc?.sslData?.clientCertificateChain.get(0);\n\n  return certChain;\n}\n\nX509Certificate parseCertificate(String cleanStr) {\n\n  byte [] decoded = Base64.getDecoder().decode(cleanStr);\n\n  try {\n    return (X509Certificate) CertificateFactory.getInstance(\"X.509\").generateCertificate(new ByteArrayInputStream(decoded));\n  } catch (CertificateException e) {\n\texc?.log?.warn(\"Bad certificate provided: \" + certStr);\n    return null;\n  }\n}\n",
                    "rejectionHandlingEnabled": true,
                    "errorResponseCode": 403,
                    "errorResponseStatusMsg": "Forbidden"
                },
                "name": "MTLS-RequireClientAuth",
                "className": "com.pingidentity.pa.policy.GroovyPolicyInterceptor",
                "id": 3,
                "supportedDestinations": [
                    "Agent",
                    "Site"
                ]
            },
            {
                "configuration": {
                    "allowedReqHeaders": [
                        "Accept",
                        "Content-Type",
                        "Authorization"
                    ],
                    "exposedRespHeaders": [],
                    "cacheMaxAge": 600,
                    "allowedOrigins": ["*"],
                    "overriddenReqMethods": null,
                    "allowCredentials": false,
                    "maskWildcardPolicy": false
                },
                "name": "CORS - Allow All",
                "className": "com.pingidentity.pa.policy.cors.CrossOriginRequestPolicyInterceptor",
                "id": 4,
                "supportedDestinations": [
                    "Agent",
                    "Site"
                ]
            },
            {
                "configuration": {
                    "rejectionHandler": "6",
                    "errorResponseTemplateFile": "policy.error.page.template.html",
                    "errorResponseContentType": "text/html; charset=UTF-8",
                    "groovyScript": "def request = exc?.request;\n\nif(\"post\".equalsIgnoreCase(request?.method?.methodName))\n{\n  def postParams = request?.getPostParams();\n  \n  if(postParams.containsKey(\"token\"))\n  {\n    def tokenValues = postParams?.get(\"token\");\n    \n    if(tokenValues.length != 1)\n    \tfail();\n    else\n    {\n      def tokenValue = tokenValues[0];\n\n      //assuming access token is a JWT\n      if(tokenValue.indexOf(\".\") > 0)\n        fail();\n      else\n      {\n        if(!postParams.containsKey(\"token_type_hint\"))\n        {\n          def bodyStr = new String(request?.body?.content);\n          bodyStr = bodyStr + \"&token_type_hint=refresh_token\";\n          request?.setBodyContent(bodyStr.getBytes());\n          pass();\n        }\n        pass();\n      }\n    }\n  }\n  else\n    anything();\n}\nelse\n  anything();",
                    "rejectionHandlingEnabled": true,
                    "errorResponseCode": 403,
                    "errorResponseStatusMsg": "Forbidden"
                },
                "name": "PingFederate-RestrictIntrospectRefreshToken",
                "className": "com.pingidentity.pa.policy.GroovyPolicyInterceptor",
                "id": 5,
                "supportedDestinations": [
                    "Agent",
                    "Site"
                ]
            },
            {
                "configuration": {
                    "tokenEndpoint": "/as/token.oauth2",
                    "revocationEndpoint": "/as/revoke_token.oauth2",
                    "retainAttributeList": [
                        "cdr_arrangement_id",
                        "scope",
                        "jsonencoded_authorization_details"
                    ],
                    "introspectionEndpoint": "/as/introspect.oauth2",
                    "encryptionKey": {"value": "${_data_rules_6_configuration_encryptionKey_value}"},
                    "accessTokenEncryptionKeys": {"value": "${_data_rules_6_configuration_accessTokenEncryptionKeys_value}"},
                    "issuer": "anybank"
                },
                "name": "CDR AU - Refresh Token Processor",
                "className": "com.pingidentity.ps.cdr.pa.CDRRefreshTokenProcessor",
                "id": 6,
                "supportedDestinations": [
                    "Agent",
                    "Site"
                ]
            },
            {
                "configuration": {
                    "rejectionHandler": "5",
                    "errorResponseTemplateFile": "policy.error.page.template.html",
                    "errorResponseContentType": "text/html; charset=UTF-8",
                    "groovyScript": "import java.util.Base64\nimport com.fasterxml.jackson.databind.JsonNode\nimport com.fasterxml.jackson.databind.ObjectMapper\nimport java.security.cert.CertificateEncodingException;\nimport java.security.cert.X509Certificate;\n\nimport java.io.ByteArrayInputStream;\nimport java.security.cert.CertificateException;\nimport java.security.cert.CertificateFactory;\nimport java.security.cert.X509Certificate;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\n\n// START CONFIGURATION\n\ndef BEGIN_CERT = \"-----BEGIN CERTIFICATE-----\";\ndef END_CERT = \"-----END CERTIFICATE-----\";\n\ndef HEADER_INCOMINGCERTIFICATE = \"X-Certificate\";\ndef HEADER_OUTGOINGCERTIFICATE = \"X-PFCertificate\";\ndef IS_PROXY_TERMINATED = false;\ndef IS_CERT_HEADER_URL_ENCODED = false;\n\n// END CONFIGURATION\n\ndef host = exc?.request?.header?.host;\n\nif(host.equals(\"pingaccess:3000\"))\n{\n  pass();\n}\nelse if(exc?.response)\n{\n  addResponseHeader(exc?.response, \"X-VALIDATED-CLIENTAUTH\", \"TRUE\");\n  pass();\n}\nelse\n{\n  def certChain = getCertificate(exc, IS_PROXY_TERMINATED, HEADER_INCOMINGCERTIFICATE, HEADER_OUTGOINGCERTIFICATE, BEGIN_CERT, END_CERT, IS_CERT_HEADER_URL_ENCODED);\n  if(!certChain)\n    fail();\n  else\n    pass();\n}\n\nvoid addResponseHeader(def response, def headerName, def headerValue)\n{\n  if(response)\n    response?.header?.add(headerName, headerValue);\n}\n\nX509Certificate getCertificate(def exc, def isTerminatedProxy, def headerName, def outgoingHeaderName, def beginCert, def endCert, def isCertHeaderUrlEncoded)\n{\n  X509Certificate certChain = null;\n  if(isTerminatedProxy)\n  {\n    def certificateFromHeader = exc?.request?.header?.getFirstValue(headerName);\n    if(certificateFromHeader)\n    {\n      //before decoding we need to get rod off the prefix and suffix\n      String cleanStr = certificateFromHeader.replaceAll(beginCert, \"\").replaceAll(endCert, \"\").replaceAll(\"[\\\\n\\\\t ]\", \"\");\n\n      if(isCertHeaderUrlEncoded)\n      {\n        try {\n          cleanStr = URLDecoder.decode(cleanStr, \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n          exc?.log.error(\"Unable to url decode header\");\n        }\n      }\n\n      exc?.request?.header?.removeFields(headerName);\n      exc?.request?.header?.removeFields(outgoingHeaderName);\n      exc?.request?.header?.add(outgoingHeaderName, cleanStr);\n\n      certChain = parseCertificate(cleanStr);\n    }\n  }\n  else if(exc?.sslData?.clientCertificateChain && !exc?.sslData?.clientCertificateChain.isEmpty())\n  \tcertChain = exc?.sslData?.clientCertificateChain.get(0);\n\n  return certChain;\n}\n\nX509Certificate parseCertificate(String cleanStr) {\n\n  byte [] decoded = Base64.getDecoder().decode(cleanStr);\n\n  try {\n    return (X509Certificate) CertificateFactory.getInstance(\"X.509\").generateCertificate(new ByteArrayInputStream(decoded));\n  } catch (CertificateException e) {\n\texc?.log?.warn(\"Bad certificate provided: \" + certStr);\n    return null;\n  }\n}\n",
                    "rejectionHandlingEnabled": true,
                    "errorResponseCode": 403,
                    "errorResponseStatusMsg": "Forbidden"
                },
                "name": "MTLS-RequireClientAuthAlways",
                "className": "com.pingidentity.pa.policy.GroovyPolicyInterceptor",
                "id": 8,
                "supportedDestinations": [
                    "Agent",
                    "Site"
                ]
            },
            {
                "configuration": {
                    "rejectionHandler": "1",
                    "errorResponseTemplateFile": "policy.error.page.template.html",
                    "errorResponseContentType": "text/html; charset=UTF-8",
                    "groovyScript": "if(!exc?.response)\n{\n\tdef header = exc?.request?.header;\n\theader?.add(\"X-Forwarded-Proto\", \"https\");\n\theader?.add(\"X-Forwarded-Port\", \"443\");\n}\nanything(\"Custom header set into request\");",
                    "rejectionHandlingEnabled": true,
                    "errorResponseCode": 403,
                    "errorResponseStatusMsg": "Forbidden"
                },
                "name": "Send-XForwardedHeaders",
                "className": "com.pingidentity.pa.policy.GroovyPolicyInterceptor",
                "id": 9,
                "supportedDestinations": [
                    "Agent",
                    "Site"
                ]
            },
            {
                "configuration": {
                    "rejectionHandler": "1",
                    "errorResponseTemplateFile": "policy.error.page.template.html",
                    "errorResponseContentType": "text/html; charset=UTF-8",
                    "groovyScript": "if(!exc?.response)\n{\n  def header = exc?.request?.header;\n  header?.add(\"X-Forwarded-Host\", \"mockregister.${BASE_HOSTNAME}\");\n}\nanything(\"Custom header set into request\");",
                    "rejectionHandlingEnabled": true,
                    "errorResponseCode": 403,
                    "errorResponseStatusMsg": "Forbidden"
                },
                "name": "Send-XForwardedHeaders-MockRegister",
                "className": "com.pingidentity.pa.policy.GroovyPolicyInterceptor",
                "id": 10,
                "supportedDestinations": [
                    "Agent",
                    "Site"
                ]
            },
            {
                "configuration": {
                    "rejectionHandler": "1",
                    "errorResponseTemplateFile": "policy.error.page.template.html",
                    "errorResponseContentType": "text/html; charset=UTF-8",
                    "groovyScript": "if(!exc?.response)\n{\n  def header = exc?.request?.header;\n  header?.add(\"X-Forwarded-Host\", \"sso.${BASE_HOSTNAME}\");\n}\nanything(\"Custom header set into request\");",
                    "rejectionHandlingEnabled": true,
                    "errorResponseCode": 403,
                    "errorResponseStatusMsg": "Forbidden"
                },
                "name": "PingFed-FixForwardedHost",
                "className": "com.pingidentity.pa.policy.GroovyPolicyInterceptor",
                "id": 11,
                "supportedDestinations": [
                    "Agent",
                    "Site"
                ]
            },
            {
                "configuration": {
                    "mapTo": "/as/clients.oauth2$1",
                    "mapFrom": "^/register(.*)"
                },
                "name": "ClientRegistration-URLRewrite",
                "className": "com.pingidentity.pa.policy.rewrite.SynapseURLRewritePolicyInterceptor",
                "id": 12,
                "supportedDestinations": ["Site"]
            },
            {
                "configuration": {
                    "clientId": "pingaccess-cc",
                    "errorResponseTemplateFile": "oauth.error.json",
                    "errorResponseContentType": "application/json; charset=UTF-8",
                    "errorResponseCode": 400,
                    "errorResponseStatusMsg": "Forbidden",
                    "clientSecret": {"value": "${_data_rules_13_configuration_clientSecret_value}"},
                    "clientScope": "consent_admin",
                    "thirdPartySCIMService": "acd68d0e-f601-4dc9-b4e2-293e67b388a0"
                },
                "name": "CDR Validate Arrangement",
                "className": "com.pingidentity.ps.cdr.pa.CDRValidateArrangementRule",
                "id": 13,
                "supportedDestinations": [
                    "Agent",
                    "Site"
                ]
            },
            {
                "configuration": {
                    "clientId": "pingaccess-cc",
                    "refreshInterval": 10,
                    "errorResponseCode": 400,
                    "scimFilter": "endpoint-name eq \"GetSoftwareProductsStatus\"",
                    "clientIdPrefix": "dcr-sso-,dcr-sso_2-",
                    "scimEndpoint": "https://pingdirectory:1443/scim/v2/adh-cache",
                    "ignoreSSL": true,
                    "errorResponseTemplateFile": "policy.error.page.template.html",
                    "errorResponseContentType": "text/html; charset=UTF-8",
                    "errorResponseStatusMsg": "Forbidden",
                    "clientSecret": {"value": "${_data_rules_14_configuration_clientSecret_value}"},
                    "oauthTokenEndpoint": "https://pingfederate:9031/as/token.oauth2",
                    "clientScope": "adh-cache-read",
                    "managedEndpoints": ["/as/authorization.oauth2"]
                },
                "name": "CDR Validate Status Rule - Web",
                "className": "com.pingidentity.ps.cdr.pa.CDRValidateStatusRule",
                "id": 14,
                "supportedDestinations": [
                    "Agent",
                    "Site"
                ]
            },
            {
                "configuration": {
                    "clientId": "pingaccess-cc",
                    "refreshInterval": 0,
                    "errorResponseCode": 403,
                    "scimFilter": "endpoint-name eq \"GetSoftwareProductsStatus\"",
                    "clientIdPrefix": "dcr-sso-,dcr-sso_2-",
                    "scimEndpoint": "https://pingdirectory:1443/scim/v2/adh-cache",
                    "ignoreSSL": true,
                    "errorResponseTemplateFile": "general.error.json",
                    "errorResponseContentType": "application/json; charset=UTF-8",
                    "errorResponseStatusMsg": "Forbidden",
                    "clientSecret": {"value": "${_data_rules_15_configuration_clientSecret_value}"},
                    "oauthTokenEndpoint": "https://pingfederate:9031/as/token.oauth2",
                    "clientScope": "adh-cache-read",
                    "managedEndpoints": [
                        "/register",
                        "/cds-au",
                        "/as/clients.oauth2",
                        "/as/par.oauth2",
                        "/as/introspect.oauth2",
                        "/idp/userinfo.openid",
                        "/as/token.oauth2"
                    ]
                },
                "name": "CDR Validate Status Rule - API",
                "className": "com.pingidentity.ps.cdr.pa.CDRValidateStatusRule",
                "id": 15,
                "supportedDestinations": [
                    "Agent",
                    "Site"
                ]
            },
            {
                "configuration": {
                    "clientId": "pingaccess-cc",
                    "errorResponseTemplateFile": "oauth.error.json",
                    "errorResponseContentType": "application/json; charset=UTF-8",
                    "errorResponseCode": 403,
                    "scimTokenEndpoint": "adr-token-refresh",
                    "scimFilter": "user_ref eq \"%s\" and data_holder_issuer eq \"%s\" and context eq \"%s\" and software_id eq \"%s\"",
                    "errorResponseStatusMsg": "Forbidden",
                    "clientSecret": {"value": "${_data_rules_16_configuration_clientSecret_value}"},
                    "dataHolderIssuer": "${ADH_ID}",
                    "clientScope": "adr-clients-read",
                    "thirdPartySCIMService": "acd68d0e-f601-4dc9-b4e2-293e67b388a0"
                },
                "name": "Rule-ADR-InjectToken-sso.${BASE_HOSTNAME}",
                "className": "com.pingidentity.ps.cdr.data.in.pa.CDRInjectDataHolderTokenRule",
                "id": 16,
                "supportedDestinations": [
                    "Agent",
                    "Site"
                ]
            },
            {
                "configuration": {
                    "rejectionHandler": "1",
                    "errorResponseTemplateFile": "policy.error.page.template.html",
                    "errorResponseContentType": "text/html; charset=UTF-8",
                    "groovyScript": "if(!exc?.response)\n{\n  def header = exc?.request?.header;\n  header?.add(\"X-Forwarded-Proto\", \"https\");\n  header?.add(\"X-Forwarded-Port\", \"443\");\n}\nanything(\"Custom header set into request\");",
                    "rejectionHandlingEnabled": true,
                    "errorResponseCode": 403,
                    "errorResponseStatusMsg": "Forbidden"
                },
                "name": "X-Forwarded-Proto-HTTPS",
                "className": "com.pingidentity.pa.policy.GroovyPolicyInterceptor",
                "id": 17,
                "supportedDestinations": [
                    "Agent",
                    "Site"
                ]
            },
            {
                "configuration": {
                    "rejectionHandler": "1",
                    "errorResponseTemplateFile": "policy.error.page.template.html",
                    "errorResponseContentType": "text/html; charset=UTF-8",
                    "groovyScript": "def CONST_DCR_HEADER = \"X-DCR-PREFIX\";\n\nif(!exc?.response)\n{\n  exc?.request?.header?.removeFields(CONST_DCR_HEADER);\n  def host = exc?.request?.header?.host;\n  host = (host == null) ? \"sso.${BASE_HOSTNAME}\" : host;\n  \n  def prefix = host.replace(\":6443\", \"\").replace(\"${BASE_HOSTNAME}\", \"\").replaceAll(\"-\", \"_\").replaceAll(\"\\\\.\", \"-\");\n  \n  exc?.request?.header?.add(CONST_DCR_HEADER, prefix);\n}\n\nanything();",
                    "rejectionHandlingEnabled": true,
                    "errorResponseCode": 403,
                    "errorResponseStatusMsg": "Forbidden"
                },
                "name": "DCR Prefix Rule",
                "className": "com.pingidentity.pa.policy.GroovyPolicyInterceptor",
                "id": 18,
                "supportedDestinations": [
                    "Agent",
                    "Site"
                ]
            },
            {
                "configuration": {
                    "mapTo": "/",
                    "mapFrom": "/sso-1/"
                },
                "name": "DataIn-SSO1-URLRewrite",
                "className": "com.pingidentity.pa.policy.rewrite.SynapseURLRewritePolicyInterceptor",
                "id": 19,
                "supportedDestinations": ["Site"]
            },
            {
                "configuration": {
                    "clientId": "pingaccess-cc",
                    "errorResponseTemplateFile": "oauth.error.json",
                    "errorResponseContentType": "application/json; charset=UTF-8",
                    "errorResponseCode": 403,
                    "scimTokenEndpoint": "adr-token-refresh",
                    "scimFilter": "user_ref eq \"%s\" and data_holder_issuer eq \"%s\" and context eq \"%s\" and software_id eq \"%s\"",
                    "errorResponseStatusMsg": "Forbidden",
                    "clientSecret": {"value": "${_data_rules_20_configuration_clientSecret_value}"},
                    "dataHolderIssuer": "${ADH2_ID}",
                    "clientScope": "adr-clients-read",
                    "thirdPartySCIMService": "acd68d0e-f601-4dc9-b4e2-293e67b388a0"
                },
                "name": "Rule-ADR-InjectToken-sso-2.${BASE_HOSTNAME}",
                "className": "com.pingidentity.ps.cdr.data.in.pa.CDRInjectDataHolderTokenRule",
                "id": 20,
                "supportedDestinations": [
                    "Agent",
                    "Site"
                ]
            },
            {
                "configuration": {
                    "mapTo": "/",
                    "mapFrom": "/sso-2/"
                },
                "name": "DataIn-SSO2-URLRewrite",
                "className": "com.pingidentity.pa.policy.rewrite.SynapseURLRewritePolicyInterceptor",
                "id": 21,
                "supportedDestinations": ["Site"]
            },
            {
                "configuration": {"accessTokenEncryptionKeys": {"value": "${_data_rules_22_configuration_accessTokenEncryptionKeys_value}"}},
                "name": "CDR Access Token Decrypter",
                "className": "com.pingidentity.ps.cdr.pa.CDRAccessTokenDecryptionRule",
                "id": 22,
                "supportedDestinations": [
                    "Agent",
                    "Site"
                ]
            },
            {
                "configuration": {
                    "rejectionHandler": "7",
                    "errorResponseTemplateFile": "policy.error.page.template.html",
                    "errorResponseContentType": "text/html; charset=UTF-8",
                    "groovyScript": "import java.util.Base64\nimport com.fasterxml.jackson.databind.JsonNode\nimport com.fasterxml.jackson.databind.ObjectMapper\n\ndef clientAssertion = getRequestParameter(exc?.request, \"client_assertion\");\ndef hasAssertion = (clientAssertion != null && !clientAssertion.trim().equals(\"\"));\n\nif(hasAssertion)\n{\n  def sub = getJwtClaimClaim(clientAssertion, \"sub\");\n  def iss = getJwtClaimClaim(clientAssertion, \"iss\");\n\n  if(iss == null || sub == null || !iss.equals(sub))\n    fail();\n  else\n    pass();\n}\nelse\n  pass();\n\nString getRequestParameter(def request, def paramName)\n{\n  def postParams = request?.getPostParams();\n  if(postParams == null)\n    return null;\n\n  if(!postParams.containsKey(paramName))\n    return null;\n\n  return postParams.get(paramName)[0];\n}\n\nString getJwtClaimClaim(String accessToken, String claim)\n{\n    def accessTokenSplit = accessToken.split(\"\\\\.\");\n    if(accessTokenSplit.length != 3)\n      return null;\n\n    def accessTokenBodyEncoded = accessTokenSplit[1];\n    def accessTokenBody = new String(Base64.getDecoder().decode(accessTokenBodyEncoded));\n\n    return getClaimValue(accessTokenBody, claim);\n}\n\nString getClaimValue(String responseStr, String jsonPath)\n{\n    ObjectMapper mapper = new ObjectMapper();\n    JsonNode resultObject = mapper.readTree(responseStr);\n\n    String [] splitJsonPath = jsonPath.split(\"\\\\.\");\n\n    for(String path : splitJsonPath)\n    {\n        resultObject = resultObject.findPath(path);\n    }\n\n    return resultObject.textValue();\n\n}",
                    "rejectionHandlingEnabled": true,
                    "errorResponseCode": 403,
                    "errorResponseStatusMsg": "Forbidden"
                },
                "name": "CDR-ClientAssertion-IssuerValidation",
                "className": "com.pingidentity.pa.policy.GroovyPolicyInterceptor",
                "id": 23,
                "supportedDestinations": [
                    "Agent",
                    "Site"
                ]
            }
        ],
        "sites": [
            {
                "trustedCertificateGroupId": 2,
                "loadBalancingStrategyId": 0,
                "maxWebSocketConnections": -1,
                "keepAliveTimeout": 0,
                "useTargetHostHeader": false,
                "siteAuthenticatorIds": ["1"],
                "useProxy": false,
                "secure": true,
                "sendPaCookie": true,
                "targets": ["pingfederate:9032"],
                "expectedHostname": null,
                "skipHostnameVerification": true,
                "name": "pingfederate",
                "id": 1,
                "availabilityProfileId": 1,
                "maxConnections": -1
            },
            {
                "trustedCertificateGroupId": 0,
                "loadBalancingStrategyId": 0,
                "maxWebSocketConnections": -1,
                "keepAliveTimeout": 0,
                "useTargetHostHeader": true,
                "siteAuthenticatorIds": [],
                "useProxy": false,
                "secure": false,
                "sendPaCookie": true,
                "targets": ["cdrregister:8084"],
                "expectedHostname": null,
                "skipHostnameVerification": false,
                "name": "cdr-register",
                "id": 7,
                "availabilityProfileId": 1,
                "maxConnections": -1
            },
            {
                "trustedCertificateGroupId": 2,
                "loadBalancingStrategyId": 0,
                "maxWebSocketConnections": -1,
                "keepAliveTimeout": 0,
                "useTargetHostHeader": false,
                "siteAuthenticatorIds": [],
                "useProxy": false,
                "secure": true,
                "sendPaCookie": true,
                "targets": ["pingdirectory:1443"],
                "expectedHostname": null,
                "skipHostnameVerification": true,
                "name": "pingdirectory",
                "id": 8,
                "availabilityProfileId": 1,
                "maxConnections": -1
            },
            {
                "trustedCertificateGroupId": 0,
                "loadBalancingStrategyId": 0,
                "maxWebSocketConnections": -1,
                "keepAliveTimeout": 0,
                "useTargetHostHeader": false,
                "siteAuthenticatorIds": [],
                "useProxy": false,
                "secure": false,
                "sendPaCookie": true,
                "targets": ["agentless-consentapp:7879"],
                "expectedHostname": null,
                "skipHostnameVerification": false,
                "name": "consentapp-site",
                "id": 9,
                "availabilityProfileId": 1,
                "maxConnections": -1
            },
            {
                "trustedCertificateGroupId": 2,
                "loadBalancingStrategyId": 0,
                "maxWebSocketConnections": -1,
                "keepAliveTimeout": 0,
                "useTargetHostHeader": false,
                "siteAuthenticatorIds": [],
                "useProxy": false,
                "secure": true,
                "sendPaCookie": true,
                "targets": ["pingdatagovernance:1443"],
                "expectedHostname": null,
                "skipHostnameVerification": true,
                "name": "mock-dh-api",
                "id": 10,
                "availabilityProfileId": 1,
                "maxConnections": -1
            },
            {
                "trustedCertificateGroupId": 2,
                "loadBalancingStrategyId": 0,
                "maxWebSocketConnections": -1,
                "keepAliveTimeout": 0,
                "useTargetHostHeader": true,
                "siteAuthenticatorIds": ["1"],
                "useProxy": false,
                "secure": true,
                "sendPaCookie": false,
                "targets": ["${ADR_SSO_ENDPOINT}"],
                "expectedHostname": null,
                "skipHostnameVerification": false,
                "name": "DataHolder-Site-sso.${BASE_HOSTNAME}",
                "id": 11,
                "availabilityProfileId": 1,
                "maxConnections": -1
            },
            {
                "trustedCertificateGroupId": 2,
                "loadBalancingStrategyId": 0,
                "maxWebSocketConnections": -1,
                "keepAliveTimeout": 0,
                "useTargetHostHeader": true,
                "siteAuthenticatorIds": ["1"],
                "useProxy": false,
                "secure": true,
                "sendPaCookie": false,
                "targets": ["${ADR_API_ENDPOINT}"],
                "expectedHostname": null,
                "skipHostnameVerification": false,
                "name": "DataHolder-Site-api.${BASE_HOSTNAME}",
                "id": 12,
                "availabilityProfileId": 1,
                "maxConnections": -1
            },
            {
                "trustedCertificateGroupId": 0,
                "loadBalancingStrategyId": 0,
                "maxWebSocketConnections": -1,
                "keepAliveTimeout": 0,
                "useTargetHostHeader": true,
                "siteAuthenticatorIds": [],
                "useProxy": false,
                "secure": false,
                "sendPaCookie": true,
                "targets": ["data-in-spa:2280"],
                "expectedHostname": null,
                "skipHostnameVerification": false,
                "name": "Site-DataInSPA",
                "id": 13,
                "availabilityProfileId": 1,
                "maxConnections": -1
            },
            {
                "trustedCertificateGroupId": 2,
                "loadBalancingStrategyId": 0,
                "maxWebSocketConnections": -1,
                "keepAliveTimeout": 0,
                "useTargetHostHeader": true,
                "siteAuthenticatorIds": ["1"],
                "useProxy": false,
                "secure": true,
                "sendPaCookie": true,
                "targets": ["sso-2.${BASE_HOSTNAME}:6443"],
                "expectedHostname": null,
                "skipHostnameVerification": true,
                "name": "DataHolder-Site-sso-2.${BASE_HOSTNAME}",
                "id": 14,
                "availabilityProfileId": 1,
                "maxConnections": -1
            }
        ],
        "siteAuthenticators": [{
            "configuration": {"keyPairId": "5"},
            "name": "CDR-SiteAuthenticator",
            "className": "com.pingidentity.pa.siteauthenticators.MutualTlsSiteAuthenticator",
            "id": 1
        }],
        "adminAuthBasic": {"enabled": true},
        "httpMonitoring": {"auditLevel": "OFF"},
        "httpProtocolSource": {"headerName": "X-Forwarded-Proto"},
        "reservedApplication": {"contextRoot": "/pa"},
        "tokenProvider": {
            "type": "PingFederate",
            "useThirdParty": false
        },
        "webSessionMgmt": {
            "nonceCookieTimeToLiveInMinutes": 5,
            "signingAlgorithm": "P-256",
            "sessionStateCookieName": "PA_STATE",
            "encryptionAlgorithm": "A128CBC-HS256",
            "keyRollEnabled": true,
            "issuer": "PingAccess",
            "cookieName": "PA",
            "keyRollPeriodInHours": 24,
            "updateTokenWindowInSeconds": 60
        },
        "adminConfig": {
            "httpProxyId": 0,
            "httpsProxyId": 0,
            "hostPort": "pingaccess-admin:9090"
        },
        "adminAuthWebSession": {
            "cookieDomain": null,
            "audience": "PingAccessUI",
            "sessionTimeoutInMinutes": 240,
            "expirationWarningInMinutes": 1,
            "idleTimeoutInMinutes": 30,
            "sessionPollIntervalInSeconds": 10,
            "cookieType": "Encrypted"
        },
        "pingFederate": {
            "loadBalancingStrategyId": 0,
            "trustedCertificateGroupId": 2,
            "useSlo": false,
            "auditLevel": "OFF",
            "useProxy": false,
            "secure": true,
            "targets": ["pingfederate:9031"],
            "expectedHostname": "",
            "backChannelBasePath": null,
            "application": null,
            "basePath": null,
            "port": 6443,
            "skipHostnameVerification": true,
            "backChannelSecure": true,
            "host": "sso.${BASE_HOSTNAME}",
            "availabilityProfileId": 0
        },
        "trustedCerts": [
            {
                "fileData": "${_data_trustedCerts_3_pingfederate_service_fileData}",
                "alias": "pingfederate-service",
                "id": 3
            },
            {
                "fileData": "${_data_trustedCerts_17_cdr_trustcert_default_fileData}",
                "alias": "cdr_trustcert_default",
                "id": 17
            }
        ],
        "engineListeners": [
            {
                "trustedCertificateGroupId": 0,
                "port": 3000,
                "name": "Default Engine Listener",
                "id": 2,
                "secure": true
            },
            {
                "trustedCertificateGroupId": 0,
                "port": 6443,
                "name": "Local Dev Listener",
                "id": 5,
                "secure": true
            }
        ],
        "httpIpSource": {
            "fallbackToLastHopIp": true,
            "headerNameList": ["X-Forwarded-For"],
            "listValueLocation": "LAST"
        },
        "globalUnprotectedResources": [{
            "auditLevel": "ON",
            "wildcardPath": "/ext/oauth/standardATM/jwks",
            "name": "StandardATM JWKS endpoint",
            "description": "JWKS endpoint",
            "id": "3a2b5451-00ec-40e3-9556-183452460586",
            "enabled": true
        }],
        "loadBalancingStrategies": [{
            "configuration": {
                "stickySessionEnabled": false,
                "cookieName": "PA_S"
            },
            "name": "Default Round Robin Strategy",
            "className": "com.pingidentity.pa.ha.lb.roundrobin.CookieBasedRoundRobinPlugin",
            "id": 2
        }],
        "resources": [
            {
                "resourceTypeConfiguration": {"responseGenerator": null},
                "pathPrefixes": ["/*"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": null,
                "enabled": true,
                "rootResource": true,
                "name": "Root Resource",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 1,
                "pathPatterns": [{
                    "pattern": "/*",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 1,
                "policy": {
                    "Web": [],
                    "API": []
                },
                "resourceType": "Standard",
                "authenticationChallengePolicyId": null
            },
            {
                "resourceTypeConfiguration": {"responseGenerator": null},
                "pathPrefixes": [
                    "/as/clients.oauth2",
                    "/register"
                ],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": "Web",
                "enabled": true,
                "rootResource": false,
                "name": "DCR Create Endpoint",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 4,
                "pathPatterns": [
                    {
                        "pattern": "/as/clients.oauth2",
                        "type": "WILDCARD"
                    },
                    {
                        "pattern": "/register",
                        "type": "WILDCARD"
                    }
                ],
                "unprotected": false,
                "applicationId": 1,
                "policy": {
                    "Web": [
                        {
                            "id": 12,
                            "type": "Rule"
                        },
                        {
                            "id": 8,
                            "type": "Rule"
                        },
                        {
                            "id": 18,
                            "type": "Rule"
                        }
                    ],
                    "API": []
                },
                "resourceType": "Standard",
                "authenticationChallengePolicyId": null
            },
            {
                "resourceTypeConfiguration": {"responseGenerator": null},
                "pathPrefixes": ["/as/revoke_token.oauth2"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": "Web",
                "enabled": true,
                "rootResource": false,
                "name": "Revocation Endpoint",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 5,
                "pathPatterns": [{
                    "pattern": "/as/revoke_token.oauth2",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 1,
                "policy": {
                    "Web": [
                        {
                            "id": 23,
                            "type": "Rule"
                        },
                        {
                            "id": 3,
                            "type": "Rule"
                        },
                        {
                            "id": 6,
                            "type": "Rule"
                        }
                    ],
                    "API": []
                },
                "resourceType": "Standard",
                "authenticationChallengePolicyId": null
            },
            {
                "resourceTypeConfiguration": {"responseGenerator": null},
                "pathPrefixes": ["/as/introspect.oauth2"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": "Web",
                "enabled": true,
                "rootResource": false,
                "name": "Introspection Endpoint",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 6,
                "pathPatterns": [{
                    "pattern": "/as/introspect.oauth2",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 1,
                "policy": {
                    "Web": [
                        {
                            "id": 23,
                            "type": "Rule"
                        },
                        {
                            "id": 3,
                            "type": "Rule"
                        },
                        {
                            "id": 6,
                            "type": "Rule"
                        },
                        {
                            "id": 5,
                            "type": "Rule"
                        }
                    ],
                    "API": []
                },
                "resourceType": "Standard",
                "authenticationChallengePolicyId": null
            },
            {
                "resourceTypeConfiguration": {"responseGenerator": null},
                "pathPrefixes": ["/idp/userinfo.openid"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": "Web",
                "enabled": true,
                "rootResource": false,
                "name": "UserInfo Service",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 7,
                "pathPatterns": [{
                    "pattern": "/idp/userinfo.openid",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 1,
                "policy": {
                    "Web": [
                        {
                            "id": 22,
                            "type": "Rule"
                        },
                        {
                            "id": 3,
                            "type": "Rule"
                        },
                        {
                            "id": 2,
                            "type": "Rule"
                        }
                    ],
                    "API": []
                },
                "resourceType": "Standard",
                "authenticationChallengePolicyId": null
            },
            {
                "resourceTypeConfiguration": {"responseGenerator": null},
                "pathPrefixes": ["/as/token.oauth2"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": "Web",
                "enabled": true,
                "rootResource": false,
                "name": "Token Endpoint",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 8,
                "pathPatterns": [{
                    "pattern": "/as/token.oauth2",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 1,
                "policy": {
                    "Web": [
                        {
                            "id": 23,
                            "type": "Rule"
                        },
                        {
                            "id": 3,
                            "type": "Rule"
                        },
                        {
                            "id": 1,
                            "type": "Rule"
                        },
                        {
                            "id": 6,
                            "type": "Rule"
                        }
                    ],
                    "API": []
                },
                "resourceType": "Standard",
                "authenticationChallengePolicyId": null
            },
            {
                "resourceTypeConfiguration": {"responseGenerator": null},
                "pathPrefixes": ["/.well-known/openid-configuration"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": "Web",
                "enabled": false,
                "rootResource": false,
                "name": "Well Known EndPoint",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 11,
                "pathPatterns": [{
                    "pattern": "/.well-known/openid-configuration",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 1,
                "policy": {
                    "Web": [],
                    "API": []
                },
                "resourceType": "Standard",
                "authenticationChallengePolicyId": null
            },
            {
                "resourceTypeConfiguration": {"responseGenerator": null},
                "pathPrefixes": ["/*"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": null,
                "enabled": true,
                "rootResource": true,
                "name": "Root Resource",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 13,
                "pathPatterns": [{
                    "pattern": "/*",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 7,
                "policy": {
                    "Web": [],
                    "API": []
                },
                "resourceType": "Standard",
                "authenticationChallengePolicyId": null
            },
            {
                "resourceTypeConfiguration": {"responseGenerator": null},
                "pathPrefixes": [
                    "/as/clients.oauth2/*",
                    "/register/*"
                ],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": "Web",
                "enabled": true,
                "rootResource": false,
                "name": "DCR Management Endpoints",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 14,
                "pathPatterns": [
                    {
                        "pattern": "/as/clients.oauth2/*",
                        "type": "WILDCARD"
                    },
                    {
                        "pattern": "/register/*",
                        "type": "WILDCARD"
                    }
                ],
                "unprotected": false,
                "applicationId": 1,
                "policy": {
                    "Web": [
                        {
                            "id": 22,
                            "type": "Rule"
                        },
                        {
                            "id": 12,
                            "type": "Rule"
                        },
                        {
                            "id": 3,
                            "type": "Rule"
                        },
                        {
                            "id": 2,
                            "type": "Rule"
                        },
                        {
                            "id": 18,
                            "type": "Rule"
                        }
                    ],
                    "API": []
                },
                "resourceType": "Standard",
                "authenticationChallengePolicyId": null
            },
            {
                "resourceTypeConfiguration": {"responseGenerator": null},
                "pathPrefixes": ["/*"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": null,
                "enabled": true,
                "rootResource": true,
                "name": "Root Resource",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 15,
                "pathPatterns": [{
                    "pattern": "/*",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 8,
                "policy": {
                    "Web": [],
                    "API": []
                },
                "resourceType": "Standard",
                "authenticationChallengePolicyId": null
            },
            {
                "resourceTypeConfiguration": {"responseGenerator": null},
                "pathPrefixes": ["/as/par.oauth2"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": "Web",
                "enabled": true,
                "rootResource": false,
                "name": "PAR Endpoint",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 16,
                "pathPatterns": [{
                    "pattern": "/as/par.oauth2",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 1,
                "policy": {
                    "Web": [
                        {
                            "id": 23,
                            "type": "Rule"
                        },
                        {
                            "id": 3,
                            "type": "Rule"
                        },
                        {
                            "id": 13,
                            "type": "Rule"
                        }
                    ],
                    "API": []
                },
                "resourceType": "Standard",
                "authenticationChallengePolicyId": null
            },
            {
                "resourceTypeConfiguration": {"responseGenerator": null},
                "pathPrefixes": ["/as/authorization.oauth2"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": "Web",
                "enabled": true,
                "rootResource": false,
                "name": "Authorization Endpoint",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 17,
                "pathPatterns": [{
                    "pattern": "/as/authorization.oauth2",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 1,
                "policy": {
                    "Web": [{
                        "id": 14,
                        "type": "Rule"
                    }],
                    "API": []
                },
                "resourceType": "Standard",
                "authenticationChallengePolicyId": null
            },
            {
                "resourceTypeConfiguration": {"responseGenerator": null},
                "pathPrefixes": ["/*"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": null,
                "enabled": true,
                "rootResource": true,
                "name": "Root Resource",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 18,
                "pathPatterns": [{
                    "pattern": "/*",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 9,
                "policy": {
                    "Web": [],
                    "API": []
                },
                "resourceType": "Standard",
                "authenticationChallengePolicyId": null
            },
            {
                "resourceTypeConfiguration": {"responseGenerator": null},
                "pathPrefixes": ["/data-holder/arrangements/*"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": "Web",
                "enabled": true,
                "rootResource": false,
                "name": "CDR Arrangement Endpoint - ADH",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 19,
                "pathPatterns": [{
                    "pattern": "/data-holder/arrangements/*",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 1,
                "policy": {
                    "Web": [
                        {
                            "id": 23,
                            "type": "Rule"
                        },
                        {
                            "id": 8,
                            "type": "Rule"
                        }
                    ],
                    "API": []
                },
                "resourceType": "Standard",
                "authenticationChallengePolicyId": null
            },
            {
                "resourceTypeConfiguration": {"responseGenerator": null},
                "pathPrefixes": ["/*"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": null,
                "enabled": true,
                "rootResource": true,
                "name": "Root Resource",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 20,
                "pathPatterns": [{
                    "pattern": "/*",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 10,
                "policy": {
                    "Web": [],
                    "API": []
                },
                "resourceType": "Standard",
                "authenticationChallengePolicyId": null
            },
            {
                "resourceTypeConfiguration": {"responseGenerator": null},
                "pathPrefixes": ["/*"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": null,
                "enabled": true,
                "rootResource": true,
                "name": "Root Resource",
                "anonymous": true,
                "queryParamConfig": null,
                "id": 21,
                "pathPatterns": [{
                    "pattern": "/*",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 11,
                "policy": {
                    "Web": [],
                    "API": []
                },
                "resourceType": "Standard",
                "authenticationChallengePolicyId": null
            },
            {
                "resourceTypeConfiguration": {"responseGenerator": null},
                "pathPrefixes": ["/*"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": null,
                "enabled": true,
                "rootResource": true,
                "name": "Root Resource",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 22,
                "pathPatterns": [{
                    "pattern": "/*",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 12,
                "policy": {
                    "Web": [],
                    "API": []
                },
                "resourceType": "Standard",
                "authenticationChallengePolicyId": null
            },
            {
                "resourceTypeConfiguration": {"responseGenerator": null},
                "pathPrefixes": ["/*"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": null,
                "enabled": true,
                "rootResource": true,
                "name": "Root Resource",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 23,
                "pathPatterns": [{
                    "pattern": "/*",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 13,
                "policy": {
                    "Web": [],
                    "API": []
                },
                "resourceType": "Standard",
                "authenticationChallengePolicyId": null
            },
            {
                "resourceTypeConfiguration": {"responseGenerator": null},
                "pathPrefixes": ["/*"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": null,
                "enabled": true,
                "rootResource": true,
                "name": "Root Resource",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 24,
                "pathPatterns": [{
                    "pattern": "/*",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 14,
                "policy": {
                    "Web": [],
                    "API": []
                },
                "resourceType": "Standard",
                "authenticationChallengePolicyId": null
            },
            {
                "resourceTypeConfiguration": {"responseGenerator": null},
                "pathPrefixes": ["/*"],
                "methods": ["*"],
                "auditLevel": "ON",
                "defaultAuthTypeOverride": null,
                "enabled": true,
                "rootResource": true,
                "name": "Root Resource",
                "anonymous": false,
                "queryParamConfig": null,
                "id": 25,
                "pathPatterns": [{
                    "pattern": "/*",
                    "type": "WILDCARD"
                }],
                "unprotected": false,
                "applicationId": 15,
                "policy": {
                    "Web": [],
                    "API": []
                },
                "resourceType": "Standard",
                "authenticationChallengePolicyId": null
            }
        ],
        "thirdPartyServices": [{
            "trustedCertificateGroupId": 2,
            "loadBalancingStrategyId": 0,
            "skipHostnameVerification": true,
            "name": "PingDirectoryWeb",
            "id": "acd68d0e-f601-4dc9-b4e2-293e67b388a0",
            "useProxy": false,
            "secure": true,
            "targets": ["pingdirectory:1443"],
            "availabilityProfileId": 1,
            "hostValue": null,
            "maxConnections": -1,
            "expectedHostname": null
        }],
        "unknownResources": {
            "errorContentType": "HTML",
            "errorTemplateFile": "general.error.page.template.html",
            "auditLevel": "OFF",
            "errorStatusCode": 403,
            "agentDefaultMode": "DENY",
            "agentDefaultCacheTTL": 900
        },
        "rejectionHandlers": [
            {
                "configuration": {
                    "templateFile": "policy.error.page.template.html",
                    "contentType": "HTML",
                    "responseCode": 403
                },
                "name": "Default Web Rejection Handler",
                "className": "com.pingidentity.pa.policy.rejectionhandler.errortemplate.ErrorTemplateRejectionHandlerPlugin",
                "id": 1
            },
            {
                "configuration": {
                    "templateFile": "oauth.error.json",
                    "contentType": "JSON",
                    "responseCode": 403
                },
                "name": "Default API Rejection Handler",
                "className": "com.pingidentity.pa.policy.rejectionhandler.errortemplate.ErrorTemplateRejectionHandlerPlugin",
                "id": 2
            },
            {
                "configuration": {
                    "templateFile": "oauth.error.json",
                    "contentType": "JSON",
                    "responseCode": 429
                },
                "name": "Default Rate Limiting Rejection Handler",
                "className": "com.pingidentity.pa.policy.rejectionhandler.errortemplate.ErrorTemplateRejectionHandlerPlugin",
                "id": 3
            },
            {
                "configuration": {
                    "templateFile": "oauth.error.invalidhok.json",
                    "contentType": "JSON",
                    "responseCode": 403
                },
                "name": "AccessDenied-InvalidHoK",
                "className": "com.pingidentity.pa.policy.rejectionhandler.errortemplate.ErrorTemplateRejectionHandlerPlugin",
                "id": 4
            },
            {
                "configuration": {
                    "templateFile": "oauth.error.mtls.json",
                    "contentType": "JSON",
                    "responseCode": 400
                },
                "name": "AccessDenied-RequireMTLS",
                "className": "com.pingidentity.pa.policy.rejectionhandler.errortemplate.ErrorTemplateRejectionHandlerPlugin",
                "id": 5
            },
            {
                "configuration": {
                    "templateFile": "introspect.fail.json",
                    "contentType": "JSON",
                    "responseCode": 200
                },
                "name": "Introspect-EnforceFail",
                "className": "com.pingidentity.pa.policy.rejectionhandler.errortemplate.ErrorTemplateRejectionHandlerPlugin",
                "id": 6
            },
            {
                "configuration": {
                    "templateFile": "oauth.error.clientassertion.invalidissuer.json",
                    "contentType": "JSON",
                    "responseCode": 400
                },
                "name": "AccessDenied-ClientAssertion-InvalidIssuer",
                "className": "com.pingidentity.pa.policy.rejectionhandler.errortemplate.ErrorTemplateRejectionHandlerPlugin",
                "id": 7
            }
        ],
        "acmeServers": [
            {
                "name": "Let's Encrypt",
                "id": "08eb4cbc-20ed-409b-82c6-12fd0c92eb71",
                "acmeAccounts": [],
                "url": "https://acme-v02.api.letsencrypt.org/directory"
            },
            {
                "name": "Let's Encrypt Staging Environment",
                "id": "8572f98e-482e-41c2-8a3d-6a0b2fc99734",
                "acmeAccounts": [],
                "url": "https://acme-staging-v02.api.letsencrypt.org/directory"
            }
        ],
        "environment": {"name": null},
        "identityMappings": [
            {
                "configuration": {
                    "exclusionList": false,
                    "exclusionListSubject": null,
                    "headerClientCertificateMappings": [],
                    "exclusionListAttributes": [],
                    "attributeHeaderMappings": [{
                        "headerName": "X-SUBJECT",
                        "subject": true,
                        "attributeName": "sub"
                    }],
                    "headerNamePrefix": null
                },
                "name": "ADR-IdentityMapping",
                "className": "com.pingidentity.pa.identitymappings.HeaderIdentityMapping",
                "id": 2
            },
            {
                "configuration": {
                    "exclusionList": false,
                    "exclusionListSubject": null,
                    "headerClientCertificateMappings": [
                        {"headerName": "X-PFCertificate"},
                        {"headerName": "X-PFCertificateChain"}
                    ],
                    "exclusionListAttributes": [],
                    "attributeHeaderMappings": [],
                    "headerNamePrefix": null
                },
                "name": "MTLS Identity Mapping",
                "className": "com.pingidentity.pa.identitymappings.HeaderIdentityMapping",
                "id": 3
            }
        ],
        "pingFederateOAuth": {
            "clientId": "pingaccess_validator",
            "tokenTimeToLiveSeconds": -1,
            "subjectAttributeName": "sub",
            "name": "PingFederate",
            "clientCredentials": {
                "clientId": "pingaccess_validator",
                "credentialsType": "SECRET",
                "clientSecret": {"value": "${_data_pingFederateOAuth_clientCredentials_clientSecret_value}"},
                "keyPairId": 0
            },
            "clientSecret": {"value": "${_data_pingFederateOAuth_clientSecret_PingFederate_value}"},
            "cacheTokens": false,
            "accessValidatorId": 1,
            "sendAudience": true,
            "useTokenIntrospection": true
        },
        "authTokenMgmt": {
            "signingAlgorithm": "P-256",
            "keyRollEnabled": true,
            "issuer": "PingAccessAuthToken",
            "keyRollPeriodInHours": 24
        },
        "keyPairs": [
            {
                "password": "${_data_keyPairs_5_Generated__ADMIN_password}",
                "fileData": "${_data_keyPairs_5_Generated__ADMIN_fileData}",
                "alias": "Generated: ADMIN",
                "hsmProviderId": 0,
                "id": 5
            },
            {
                "password": "${_data_keyPairs_7_Generated__AGENT_password}",
                "fileData": "${_data_keyPairs_7_Generated__AGENT_fileData}",
                "alias": "Generated: AGENT",
                "hsmProviderId": 0,
                "id": 7
            },
            {
                "password": "${_data_keyPairs_8_Generated__ENGINE_password}",
                "fileData": "${_data_keyPairs_8_Generated__ENGINE_fileData}",
                "alias": "Generated: ENGINE",
                "hsmProviderId": 0,
                "id": 8
            },
            {
                "password": "${_data_keyPairs_10_config_query_password}",
                "fileData": "${_data_keyPairs_10_config_query_fileData}",
                "alias": "config-query",
                "hsmProviderId": 0,
                "id": 10
            }
        ],
        "trustedCertGroups": [{
            "skipCertificateDateCheck": true,
            "name": "MTLS Certificate Group",
            "useJavaTrustStore": false,
            "certIds": [17],
            "id": 3,
            "systemGroup": false,
            "ignoreAllCertificateErrors": false,
            "revocationChecking": {
                "ocsp": false,
                "denyRevocationStatusUnknown": false,
                "crlChecking": false
            }
        }],
        "availabilityProfiles": [{
            "configuration": {
                "retryDelay": 250,
                "maxRetries": 2,
                "failureHttpStatusCodes": [],
                "pooledConnectionTimeout": -1,
                "readTimeout": -1,
                "connectTimeout": 10000,
                "failedRetryTimeout": 60
            },
            "name": "Default Availability Profile",
            "className": "com.pingidentity.pa.ha.availability.ondemand.OnDemandAvailabilityPlugin",
            "id": 1
        }],
        "applications": [
            {
                "applicationType": "Web",
                "agentId": 0,
                "virtualHostIds": [
                    "12",
                    "22",
                    "23",
                    "24",
                    "25",
                    "5",
                    "7"
                ],
                "spaSupportEnabled": false,
                "webSessionId": 0,
                "destination": "Site",
                "description": "",
                "allowEmptyPathSegments": false,
                "agentCacheInvalidatedExpiration": 1616709250468,
                "enabled": true,
                "agentCacheInvalidatedResponseDuration": 900,
                "issuer": null,
                "defaultAuthType": "Web",
                "id": 1,
                "manualOrderingEnabled": false,
                "policy": {
                    "Web": [
                        {
                            "id": 15,
                            "type": "Rule"
                        },
                        {
                            "id": 11,
                            "type": "Rule"
                        }
                    ],
                    "API": []
                },
                "authenticationChallengePolicyId": null,
                "resourceOrder": [],
                "requireHTTPS": true,
                "contextRoot": "/",
                "identityMappingIds": {
                    "Web": 3,
                    "API": 0
                },
                "name": "PingFederate-Application",
                "siteId": 1,
                "realm": null,
                "lastModified": 1616709250468,
                "sidebandClientId": null,
                "accessValidatorId": 0,
                "caseSensitivePath": false
            },
            {
                "applicationType": "API",
                "agentId": 0,
                "virtualHostIds": [
                    "10",
                    "12",
                    "17"
                ],
                "spaSupportEnabled": true,
                "webSessionId": 0,
                "destination": "Site",
                "description": "",
                "allowEmptyPathSegments": false,
                "agentCacheInvalidatedExpiration": 1616709250468,
                "enabled": true,
                "agentCacheInvalidatedResponseDuration": 900,
                "issuer": null,
                "defaultAuthType": "API",
                "id": 7,
                "manualOrderingEnabled": false,
                "policy": {
                    "Web": [],
                    "API": [
                        {
                            "id": 22,
                            "type": "Rule"
                        },
                        {
                            "id": 15,
                            "type": "Rule"
                        },
                        {
                            "id": 3,
                            "type": "Rule"
                        },
                        {
                            "id": 2,
                            "type": "Rule"
                        }
                    ]
                },
                "authenticationChallengePolicyId": null,
                "resourceOrder": [],
                "requireHTTPS": true,
                "contextRoot": "/cds-au/v1",
                "identityMappingIds": {
                    "Web": 0,
                    "API": 0
                },
                "name": "Mock Bank API",
                "siteId": 10,
                "realm": null,
                "lastModified": 1616709250468,
                "sidebandClientId": null,
                "accessValidatorId": 1,
                "caseSensitivePath": false
            },
            {
                "applicationType": "Web",
                "agentId": 0,
                "virtualHostIds": [
                    "13",
                    "19"
                ],
                "spaSupportEnabled": false,
                "webSessionId": 0,
                "destination": "Site",
                "description": "",
                "allowEmptyPathSegments": false,
                "agentCacheInvalidatedExpiration": 1616709250468,
                "enabled": true,
                "agentCacheInvalidatedResponseDuration": 900,
                "issuer": null,
                "defaultAuthType": "Web",
                "id": 8,
                "manualOrderingEnabled": false,
                "policy": {
                    "Web": [
                        {
                            "id": 9,
                            "type": "Rule"
                        },
                        {
                            "id": 10,
                            "type": "Rule"
                        }
                    ],
                    "API": []
                },
                "authenticationChallengePolicyId": null,
                "resourceOrder": [],
                "requireHTTPS": true,
                "contextRoot": "/",
                "identityMappingIds": {
                    "Web": 0,
                    "API": 0
                },
                "name": "CDR Register",
                "siteId": 7,
                "realm": null,
                "lastModified": 1616709250468,
                "sidebandClientId": null,
                "accessValidatorId": 0,
                "caseSensitivePath": false
            },
            {
                "applicationType": "API",
                "agentId": 0,
                "virtualHostIds": [
                    "14",
                    "20"
                ],
                "spaSupportEnabled": false,
                "webSessionId": 0,
                "destination": "Site",
                "description": "",
                "allowEmptyPathSegments": false,
                "agentCacheInvalidatedExpiration": 1616709250468,
                "enabled": true,
                "agentCacheInvalidatedResponseDuration": 900,
                "issuer": null,
                "defaultAuthType": "Web",
                "id": 9,
                "manualOrderingEnabled": false,
                "policy": {
                    "Web": [],
                    "API": []
                },
                "authenticationChallengePolicyId": null,
                "resourceOrder": [],
                "requireHTTPS": true,
                "contextRoot": "/",
                "identityMappingIds": {
                    "Web": 0,
                    "API": 0
                },
                "name": "PingDirectory-Web",
                "siteId": 8,
                "realm": null,
                "lastModified": 1616709250468,
                "sidebandClientId": null,
                "accessValidatorId": 0,
                "caseSensitivePath": false
            },
            {
                "applicationType": "Web",
                "agentId": 0,
                "virtualHostIds": [
                    "15",
                    "18"
                ],
                "spaSupportEnabled": true,
                "webSessionId": 0,
                "destination": "Site",
                "description": "",
                "allowEmptyPathSegments": false,
                "agentCacheInvalidatedExpiration": 1616709250468,
                "enabled": true,
                "agentCacheInvalidatedResponseDuration": 900,
                "issuer": null,
                "defaultAuthType": "Web",
                "id": 10,
                "manualOrderingEnabled": false,
                "policy": {
                    "Web": [{
                        "id": 9,
                        "type": "Rule"
                    }],
                    "API": []
                },
                "authenticationChallengePolicyId": null,
                "resourceOrder": [],
                "requireHTTPS": true,
                "contextRoot": "/",
                "identityMappingIds": {
                    "Web": 0,
                    "API": 0
                },
                "name": "Consent Application",
                "siteId": 9,
                "realm": null,
                "lastModified": 1616709250468,
                "sidebandClientId": null,
                "accessValidatorId": 0,
                "caseSensitivePath": false
            },
            {
                "applicationType": "API",
                "agentId": 0,
                "virtualHostIds": ["26"],
                "spaSupportEnabled": true,
                "webSessionId": 0,
                "destination": "Site",
                "description": "",
                "allowEmptyPathSegments": false,
                "agentCacheInvalidatedExpiration": 1616709250468,
                "enabled": true,
                "agentCacheInvalidatedResponseDuration": 900,
                "issuer": null,
                "defaultAuthType": "API",
                "id": 11,
                "manualOrderingEnabled": false,
                "policy": {
                    "Web": [],
                    "API": []
                },
                "authenticationChallengePolicyId": null,
                "resourceOrder": [],
                "requireHTTPS": true,
                "contextRoot": "/",
                "identityMappingIds": {
                    "Web": 0,
                    "API": 0
                },
                "name": "Application-DataHolder-sso.${BASE_HOSTNAME}",
                "siteId": 11,
                "realm": null,
                "lastModified": 1616709250468,
                "sidebandClientId": null,
                "accessValidatorId": 1,
                "caseSensitivePath": false
            },
            {
                "applicationType": "API",
                "agentId": 0,
                "virtualHostIds": [
                    "11",
                    "16",
                    "21"
                ],
                "spaSupportEnabled": true,
                "webSessionId": 0,
                "destination": "Site",
                "description": "",
                "allowEmptyPathSegments": false,
                "agentCacheInvalidatedExpiration": 1616709250468,
                "enabled": true,
                "agentCacheInvalidatedResponseDuration": 900,
                "issuer": null,
                "defaultAuthType": "API",
                "id": 12,
                "manualOrderingEnabled": false,
                "policy": {
                    "Web": [],
                    "API": [
                        {
                            "id": 19,
                            "type": "Rule"
                        },
                        {
                            "id": 16,
                            "type": "Rule"
                        }
                    ]
                },
                "authenticationChallengePolicyId": null,
                "resourceOrder": [],
                "requireHTTPS": true,
                "contextRoot": "/sso-1/cds-au",
                "identityMappingIds": {
                    "Web": 0,
                    "API": 2
                },
                "name": "API-DataHolder-sso-1",
                "siteId": 12,
                "realm": null,
                "lastModified": 1616709250468,
                "sidebandClientId": null,
                "accessValidatorId": 1,
                "caseSensitivePath": false
            },
            {
                "applicationType": "Web",
                "agentId": 0,
                "virtualHostIds": [
                    "16",
                    "21"
                ],
                "spaSupportEnabled": true,
                "webSessionId": 0,
                "destination": "Site",
                "description": "",
                "allowEmptyPathSegments": false,
                "agentCacheInvalidatedExpiration": 1616709250468,
                "enabled": true,
                "agentCacheInvalidatedResponseDuration": 900,
                "issuer": null,
                "defaultAuthType": "Web",
                "id": 13,
                "manualOrderingEnabled": false,
                "policy": {
                    "Web": [],
                    "API": []
                },
                "authenticationChallengePolicyId": null,
                "resourceOrder": [],
                "requireHTTPS": true,
                "contextRoot": "/",
                "identityMappingIds": {
                    "Web": 0,
                    "API": 0
                },
                "name": "Application-DataIn-SPA",
                "siteId": 13,
                "realm": null,
                "lastModified": 1616709250468,
                "sidebandClientId": null,
                "accessValidatorId": 0,
                "caseSensitivePath": false
            },
            {
                "applicationType": "Web",
                "agentId": 0,
                "virtualHostIds": ["27"],
                "spaSupportEnabled": true,
                "webSessionId": 0,
                "destination": "Site",
                "description": "",
                "allowEmptyPathSegments": false,
                "agentCacheInvalidatedExpiration": 1616709250468,
                "enabled": true,
                "agentCacheInvalidatedResponseDuration": 900,
                "issuer": null,
                "defaultAuthType": "Web",
                "id": 14,
                "manualOrderingEnabled": false,
                "policy": {
                    "Web": [],
                    "API": []
                },
                "authenticationChallengePolicyId": null,
                "resourceOrder": [],
                "requireHTTPS": true,
                "contextRoot": "/",
                "identityMappingIds": {
                    "Web": 0,
                    "API": 0
                },
                "name": "Application-DataHolder-sso-2.${BASE_HOSTNAME}",
                "siteId": 14,
                "realm": null,
                "lastModified": 1616709250468,
                "sidebandClientId": null,
                "accessValidatorId": 0,
                "caseSensitivePath": false
            },
            {
                "applicationType": "API",
                "agentId": 0,
                "virtualHostIds": ["16"],
                "spaSupportEnabled": true,
                "webSessionId": 0,
                "destination": "Site",
                "description": "",
                "allowEmptyPathSegments": false,
                "agentCacheInvalidatedExpiration": 1616709250468,
                "enabled": true,
                "agentCacheInvalidatedResponseDuration": 900,
                "issuer": null,
                "defaultAuthType": "API",
                "id": 15,
                "manualOrderingEnabled": false,
                "policy": {
                    "Web": [],
                    "API": [
                        {
                            "id": 21,
                            "type": "Rule"
                        },
                        {
                            "id": 20,
                            "type": "Rule"
                        }
                    ]
                },
                "authenticationChallengePolicyId": null,
                "resourceOrder": [],
                "requireHTTPS": true,
                "contextRoot": "/sso-2/cds-au",
                "identityMappingIds": {
                    "Web": 0,
                    "API": 2
                },
                "name": "API-DataHolder-sso-2",
                "siteId": 12,
                "realm": null,
                "lastModified": 1616709250468,
                "sidebandClientId": null,
                "accessValidatorId": 1,
                "caseSensitivePath": false
            }
        ],
        "oauthKeyMgmt": {
            "signingAlgorithm": null,
            "keyRollEnabled": true,
            "keyRollPeriodInHours": 24
        }
    },
    "version": "6.3.0.3"
}
