{
	"info": {
		"_postman_id": "0a7bc49c-7ced-4fd0-ad11-d4563b177b3b",
		"name": "CDR - Manual Config - Setup",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "PingFederate",
			"item": [
				{
					"name": "Configure Authentication Policies",
					"item": [
						{
							"name": "Global Configuration",
							"item": [
								{
									"name": "Configure Base",
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "2Federate",
													"type": "string"
												},
												{
													"key": "username",
													"value": "Administrator",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "X-XSRF-Header",
												"value": "PingFederate",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"metadata\": {\"pfVersion\": \"10.3.4.0\"},\n        \"operations\": [\n        {\n            \"operationType\": \"SAVE\",\n            \"subResource\": \"com.pingidentity.ps.cdr.pf.grantstorage.consentapi.ConsentAPIAccessGrantManager\",\n            \"items\": [\n                {\n                    \"stringValue\": \"adminATM\",\n                    \"id\": \"CONSENT_API_ACCESSTOKENMANAGER\",\n                    \"type\": \"STRING\"\n                },\n                {\n                    \"stringValue\": \"administrator\",\n                    \"id\": \"CONSENT_API_ACCESSTOKEN_SUBJECT\",\n                    \"type\": \"STRING\"\n                },\n                {\n                    \"stringValue\": \"cn=consent service account\",\n                    \"id\": \"CONSENT_API_ACTOR\",\n                    \"type\": \"STRING\"\n                },\n                {\n                    \"stringValue\": \"consent_admin\",\n                    \"id\": \"CONSENT_API_ADMINSCOPE\",\n                    \"type\": \"STRING\"\n                },\n                {\n                    \"stringValue\": \"pingfederate_grants\",\n                    \"id\": \"CONSENT_API_CLIENTID\",\n                    \"type\": \"STRING\"\n                },\n                {\n                    \"stringValue\": \"CDR Consent\",\n                    \"id\": \"CONSENT_API_DATATEXT\",\n                    \"type\": \"STRING\"\n                },\n                {\n                    \"stringValue\": \"{\\\"id\\\":\\\"pf-persistent-grant\\\",\\\"locale\\\":\\\"en-AU\\\",\\\"version\\\":\\\"1.0\\\"}\",\n                    \"id\": \"CONSENT_API_DEFAULT_DEFINITION\",\n                    \"type\": \"STRING\"\n                },\n                {\n                    \"stringValue\": \"https://{{pa-local-pingdirectory-host}}\",\n                    \"id\": \"CONSENT_API_HOST\",\n                    \"type\": \"STRING\"\n                },\n                {\n                    \"stringValue\": \"\",\n                    \"id\": \"CONSENT_API_PASSWORD\",\n                    \"type\": \"STRING\"\n                },\n                {\n                    \"stringValue\": \"\",\n                    \"id\": \"CONSENT_API_USERNAME\",\n                    \"type\": \"STRING\"\n                },\n                {\n                    \"stringValue\": \"500\",\n                    \"id\": \"HTTP_IDLE_TIMEOUT\",\n                    \"type\": \"STRING\"\n                },\n                {\n                    \"stringValue\": \"true\",\n                    \"id\": \"HTTP_IGNORE_SSL\",\n                    \"type\": \"STRING\"\n                },\n                {\n                    \"stringValue\": \"10\",\n                    \"id\": \"HTTP_MAX_CONNECTIONS\",\n                    \"type\": \"STRING\"\n                }\n            ],\n            \"resourceType\": \"/configStore\"\n        },\n        {\n            \"operationType\": \"SAVE\",\n            \"subResource\": \"org.sourceid.oauth20.domain.ClientManagerLdapImpl\",\n            \"items\": [\n                {\n                    \"stringValue\": \"LDAP-C29DCC21274C10A483A76237675C3A22715D638C\",\n                    \"id\": \"PingFederateDSJNDIName\",\n                    \"type\": \"STRING\"\n                },\n                {\n                    \"stringValue\": \"ou=clients,o=appintegrations\",\n                    \"id\": \"SearchBase\",\n                    \"type\": \"STRING\"\n                }\n            ],\n            \"resourceType\": \"/configStore\"\n        },\n        {\n            \"operationType\": \"SAVE\",\n            \"subResource\": \"org.sourceid.saml20.service.session.data.impl.SessionStorageManagerLdapImpl\",\n            \"items\": [\n                {\n                    \"stringValue\": \"LDAP-C29DCC21274C10A483A76237675C3A22715D638C\",\n                    \"id\": \"PingFederateDSJNDIName\",\n                    \"type\": \"STRING\"\n                },\n                {\n                    \"stringValue\": \"ou=sessions,o=appintegrations\",\n                    \"id\": \"SearchBase\",\n                    \"type\": \"STRING\"\n                }\n            ],\n            \"resourceType\": \"/configStore\"\n        },\n        {\n            \"operationType\": \"SAVE\",\n            \"subResource\": \"org.sourceid.oauth20.handlers.process.exchange.execution.SecurityTokenCreator\",\n            \"items\": [{\n                \"listValue\": [\n                    \"org.sourceid.wstrust.processor.oauth.BearerAccessTokenTokenProcessor\",\n                    \"org.sourceid.wstrust.processor.jwt.JWTTokenProcessor\"\n                ],\n                \"id\": \"base64-required-plugins\",\n                \"type\": \"LIST\"\n            }],\n            \"resourceType\": \"/configStore\"\n        },\n        {\n            \"operationType\": \"SAVE\",\n            \"items\": [{\n                \"accepted\": true,\n                \"licenseAgreementUrl\": \"https://78d5fab5e503:9999/pf-admin-api/license-agreement\"\n            }],\n            \"resourceType\": \"/license/agreement\"\n        },\n        {\n            \"operationType\": \"SAVE\",\n            \"items\": [{\n                \"password\": \"{{pf-api-admin-password}}\",\n                \"roles\": [\n                    \"ADMINISTRATOR\",\n                    \"CRYPTO_ADMINISTRATOR\",\n                    \"EXPRESSION_ADMINISTRATOR\",\n                    \"USER_ADMINISTRATOR\"\n                ],\n                \"auditor\": false,\n                \"description\": \"Initial administrator user.\",\n                \"active\": true,\n                \"username\": \"{{pf-api-admin-user}}\"\n            }],\n            \"resourceType\": \"/administrativeAccounts\"\n        },\n        {\n            \"operationType\": \"SAVE\",\n            \"items\": [{\n                \"password\": \"{{pf-server-cert-password}}\",\n                \"fileData\": \"{{pf-server-cert-p12b64}}\",\n                \"format\": \"PKCS12\",\n                \"id\": \"wxom4n4v8ayu7yx47eqbj8bl0\"\n            }],\n            \"resourceType\": \"/keyPairs/sslServer\"\n        },\n        {\n            \"operationType\": \"SAVE\",\n            \"items\": [{\n                \"activeRuntimeServerCerts\": [{\n                    \"location\": \"https://localhost:9999/pf-admin-api/v1/keyPairs/sslServer/wxom4n4v8ayu7yx47eqbj8bl0\",\n                    \"id\": \"wxom4n4v8ayu7yx47eqbj8bl0\"\n                }],\n                \"activeAdminConsoleCerts\": [{\n                    \"location\": \"https://localhost:9999/pf-admin-api/v1/keyPairs/sslServer/wxom4n4v8ayu7yx47eqbj8bl0\",\n                    \"id\": \"wxom4n4v8ayu7yx47eqbj8bl0\"\n                }],\n                \"adminConsoleCertRef\": {\n                    \"location\": \"https://localhost:9999/pf-admin-api/v1/keyPairs/sslServer/wxom4n4v8ayu7yx47eqbj8bl0\",\n                    \"id\": \"wxom4n4v8ayu7yx47eqbj8bl0\"\n                },\n                \"runtimeServerCertRef\": {\n                    \"location\": \"https://localhost:9999/pf-admin-api/v1/keyPairs/sslServer/wxom4n4v8ayu7yx47eqbj8bl0\",\n                    \"id\": \"wxom4n4v8ayu7yx47eqbj8bl0\"\n                }\n            }],\n            \"resourceType\": \"/keyPairs/sslServer/settings\"\n        },\n        {\n            \"operationType\": \"SAVE\",\n            \"items\": [{\n                \"hostnamesTags\": [{\n                    \"defaultSource\": true,\n                    \"hostnames\": [\"{{pf-ldap-host}}\"]\n                }],\n                \"timeBetweenEvictions\": 60000,\n                \"binaryAttributes\": [],\n                \"ldapType\": \"PING_DIRECTORY\",\n                \"type\": \"LDAP\",\n                \"password\": \"{{pf-ldap-password}}\",\n                \"minConnections\": 10,\n                \"createIfNecessary\": true,\n                \"id\": \"LDAP-C29DCC21274C10A483A76237675C3A22715D638C\",\n                \"ldapDnsSrvPrefix\": \"_ldap._tcp\",\n                \"connectionTimeout\": 3000,\n                \"maxConnections\": 100,\n                \"ldapsDnsSrvPrefix\": \"_ldaps._tcp\",\n                \"useDnsSrvRecords\": false,\n                \"bindAnonymously\": false,\n                \"maxWait\": -1,\n                \"verifyHost\": true,\n                \"hostnames\": [\"{{pf-ldap-host}}\"],\n                \"dnsTtl\": 60000,\n                \"useSsl\": false,\n                \"maskAttributeValues\": false,\n                \"testOnBorrow\": false,\n                \"testOnReturn\": false,\n                \"readTimeout\": 3000,\n                \"name\": \"pingdirectory\",\n                \"userDN\": \"{{pf-ldap-username}}\"\n            }],\n            \"resourceType\": \"/dataStores\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{pf-base-url}}/pf-admin-api/v1/bulk/import",
											"host": [
												"{{pf-base-url}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"bulk",
												"import"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create OAuth Client Management PCV",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-XSRF-Header",
												"value": "PingFederate",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"oauthManagementPCV\",\n  \"name\": \"oauthManagementPCV\",\n  \"pluginDescriptorRef\": {\n    \"id\": \"org.sourceid.saml20.domain.SimpleUsernamePasswordCredentialValidator\",\n    \"location\": \"https://tamtran-r.lan:9999/pf-admin-api/v1/passwordCredentialValidators/descriptors/org.sourceid.saml20.domain.SimpleUsernamePasswordCredentialValidator\"\n  },\n  \"configuration\": {\n    \"tables\": [\n      {\n        \"name\": \"Users\",\n        \"rows\": [\n          {\n            \"fields\": [\n              {\n                \"name\": \"Username\",\n                \"value\": \"{{pf-oauth-clientmgt-admin-username}}\"\n              },\n              {\n                \"name\": \"Password\",\n                \"value\": \"{{pf-oauth-clientmgt-admin-password}}\"\n              },\n              {\n                \"name\": \"Confirm Password\",\n                \"value\": \"{{pf-oauth-clientmgt-admin-password}}\"\n              },\n              {\n                \"name\": \"Relax Password Requirements\",\n                \"value\": \"false\"\n              }\n            ],\n            \"defaultRow\": false\n          }\n        ]\n      }\n    ],\n    \"fields\": []\n  },\n  \"attributeContract\": {\n    \"coreAttributes\": [\n      {\n        \"name\": \"username\"\n      }\n    ]\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{pf-base-url}}/pf-admin-api/v1/passwordCredentialValidators",
											"host": [
												"{{pf-base-url}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"passwordCredentialValidators"
											]
										}
									},
									"response": []
								},
								{
									"name": "Proxy Settings",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-XSRF-Header",
												"value": "PingFederate",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"forwardedHostHeaderName\": \"X-FORWARDED-HOST\",\n  \"forwardedHostHeaderIndex\": \"LAST\",\n  \"proxyTerminatesHttpsConns\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{pf-base-url}}/pf-admin-api/v1/incomingProxySettings",
											"host": [
												"{{pf-base-url}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"incomingProxySettings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Enable Authentication Policy",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-XSRF-Header",
												"value": "PingFederate",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"enableIdpAuthnSelection\": true,\n  \"enableSpAuthnSelection\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{pf-base-url}}/pf-admin-api/v1/authenticationPolicies/settings",
											"host": [
												"{{pf-base-url}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"authenticationPolicies",
												"settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Default Disable Sessions",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-XSRF-Header",
												"value": "PingFederate",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"enableSessions\": false,\n  \"persistentSessions\": false,\n  \"hashUniqueUserKeyAttribute\": false,\n  \"idleTimeoutMins\": 60,\n  \"idleTimeoutDisplayUnit\": \"MINUTES\",\n  \"maxTimeoutMins\": 480,\n  \"maxTimeoutDisplayUnit\": \"MINUTES\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{pf-base-url}}/pf-admin-api/v1/session/authenticationSessionPolicies/global",
											"host": [
												"{{pf-base-url}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"session",
												"authenticationSessionPolicies",
												"global"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set OAuth Authorization Server Settings",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-XSRF-Header",
												"value": "PingFederate",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"defaultScopeDescription\": \"\",\n  \"scopes\": [\n    {\n      \"name\": \"address\",\n      \"description\": \"View my address\",\n      \"dynamic\": false\n    },\n    {\n      \"name\": \"phone\",\n      \"description\": \"View my phone\",\n      \"dynamic\": false\n    },\n    {\n      \"name\": \"openid\",\n      \"description\": \"OpenID Connect\",\n      \"dynamic\": false\n    },\n    {\n      \"name\": \"offline_access\",\n      \"description\": \"Offline access\",\n      \"dynamic\": false\n    },\n    {\n      \"name\": \"profile\",\n      \"description\": \"View my profile\",\n      \"dynamic\": false\n    },\n    {\n      \"name\": \"email\",\n      \"description\": \"View my email\",\n      \"dynamic\": false\n    }\n  ],\n  \"scopeGroups\": [],\n  \"exclusiveScopes\": [\n    {\n      \"name\": \"consent_admin\",\n      \"description\": \"Consent API - Admin\",\n      \"dynamic\": false\n    },\n    {\n      \"name\": \"consent\",\n      \"description\": \"Consent API - User\",\n      \"dynamic\": false\n    },\n    {\n      \"name\": \"adh-cache-read\",\n      \"description\": \"adh-cache-read\",\n      \"dynamic\": false\n    },\n    {\n      \"name\": \"adh-cache-write\",\n      \"description\": \"adh-cache-write\",\n      \"dynamic\": false\n    },\n    {\n      \"name\": \"energy:electricity.usage:read\",\n      \"description\": \"Electricity Usage Data\",\n      \"dynamic\": false\n    },\n    {\n      \"name\": \"energy:billing:read\",\n      \"description\": \"Energy Billing Data\",\n      \"dynamic\": false\n    },\n    {\n      \"name\": \"energy:electricity.servicepoints.detail:read\",\n      \"description\": \"Detailed Service Point Data\",\n      \"dynamic\": false\n    },\n    {\n      \"name\": \"energy:accounts.basic:read\",\n      \"description\": \"Basic Energy Account Data\",\n      \"dynamic\": false\n    },\n    {\n      \"name\": \"energy:accounts.paymentschedule:read\",\n      \"description\": \"Energy Regular Payments Data\",\n      \"dynamic\": false\n    },\n    {\n      \"name\": \"energy:electricity.der:read\",\n      \"description\": \"Distributed Energy Resource Data\",\n      \"dynamic\": false\n    },\n    {\n      \"name\": \"energy:accounts.detail:read\",\n      \"description\": \"Detailed Energy Account Data\",\n      \"dynamic\": false\n    },\n    {\n      \"name\": \"energy:electricity.servicepoints.basic:read\",\n      \"description\": \"Basic Service Point Data\",\n      \"dynamic\": false\n    },\n    {\n      \"name\": \"energy:accounts.concessions:read\",\n      \"description\": \"Energy Concession & Hardship Data\",\n      \"dynamic\": false\n    },\n    {\n      \"name\": \"bank:accounts.basic:read\",\n      \"description\": \"Basic Bank Account Data\",\n      \"dynamic\": false\n    },\n    {\n      \"name\": \"bank:payees:read\",\n      \"description\": \"Bank Payee Data\",\n      \"dynamic\": false\n    },\n    {\n      \"name\": \"bank:accounts.detail:read\",\n      \"description\": \"Detailed Bank Account Data\",\n      \"dynamic\": false\n    },\n    {\n      \"name\": \"bank:transactions:read\",\n      \"description\": \"Bank Transaction Data\",\n      \"dynamic\": false\n    },\n    {\n      \"name\": \"bank:regular_payments:read\",\n      \"description\": \"Bank Regular Payments\",\n      \"dynamic\": false\n    },\n    {\n      \"name\": \"common:customer.detail:read\",\n      \"description\": \"Detailed Customer Data\",\n      \"dynamic\": false\n    },\n    {\n      \"name\": \"common:customer.basic:read\",\n      \"description\": \"Basic Customer Data\",\n      \"dynamic\": false\n    },\n    {\n      \"name\": \"cdr:registration\",\n      \"description\": \"CDR Dynamic Client Registration Management Scope\",\n      \"dynamic\": false\n    }\n  ],\n  \"exclusiveScopeGroups\": [],\n  \"authorizationCodeTimeout\": 30,\n  \"authorizationCodeEntropy\": 30,\n  \"disallowPlainPKCE\": false,\n  \"includeIssuerInAuthorizationResponse\": false,\n  \"persistentGrantLifetime\": 365,\n  \"persistentGrantLifetimeUnit\": \"DAYS\",\n  \"persistentGrantIdleTimeout\": -1,\n  \"persistentGrantIdleTimeoutTimeUnit\": \"DAYS\",\n  \"refreshTokenLength\": 42,\n  \"rollRefreshTokenValues\": false,\n  \"refreshRollingInterval\": 672,\n  \"persistentGrantReuseGrantTypes\": [],\n  \"persistentGrantContract\": {\n    \"extendedAttributes\": [\n      {\n        \"name\": \"SELECTED_ACCOUNTS\"\n      },\n      {\n        \"name\": \"SHARING_DURATION_EXPIRES_AT\"\n      },\n      {\n        \"name\": \"APPROVED_SCOPES\"\n      },\n      {\n        \"name\": \"CLAIMS_USERINFO\"\n      },\n      {\n        \"name\": \"CLAIMS_IDTOKEN\"\n      },\n      {\n        \"name\": \"AUTH_TIME\"\n      },\n      {\n        \"name\": \"ACR_VALUES\"\n      },\n      {\n        \"name\": \"SUBJECT\"\n      },\n      {\n        \"name\": \"CUSTOMER_REF\"\n      },\n      {\n        \"name\": \"CONSENTAPI_ID\"\n      },\n      {\n        \"name\": \"AVAILABLE_ACCOUNTS\"\n      },\n      {\n        \"name\": \"CONSENTAPI_DEFINITION\"\n      },\n      {\n        \"name\": \"ISSUER\"\n      },\n      {\n        \"name\": \"ADR_ORG_ID\"\n      },\n      {\n        \"name\": \"PERSISTENT_GRANT_LIFETIME\"\n      },\n      {\n        \"name\": \"RAR_AUTHZ_DETAILS\"\n      }\n    ],\n    \"coreAttributes\": [\n      {\n        \"name\": \"USER_KEY\"\n      },\n      {\n        \"name\": \"USER_NAME\"\n      }\n    ]\n  },\n  \"bypassAuthorizationForApprovedGrants\": false,\n  \"allowUnidentifiedClientROCreds\": false,\n  \"allowUnidentifiedClientExtensionGrants\": false,\n  \"tokenEndpointBaseUrl\": \"\",\n  \"userAuthorizationUrl\": \"\",\n  \"registeredAuthorizationPath\": \"\",\n  \"pendingAuthorizationTimeout\": 600,\n  \"bypassActivationCodeConfirmation\": false,\n  \"devicePollingInterval\": 5,\n  \"userAuthorizationConsentPageSetting\": \"INTERNAL\",\n  \"adminWebServicePcvRef\": {\n    \"id\": \"oauthManagementPCV\"\n  },\n  \"atmIdForOAuthGrantManagement\": \"\",\n  \"scopeForOAuthGrantManagement\": \"\",\n  \"allowedOrigins\": [\n  ],\n  \"trackUserSessionsForLogout\": false,\n  \"parReferenceTimeout\": 60,\n  \"parReferenceLength\": 24,\n  \"parStatus\": \"ENABLED\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{pf-base-url}}/pf-admin-api/v1/oauth/authServerSettings",
											"host": [
												"{{pf-base-url}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"oauth",
												"authServerSettings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure Server Settings",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-XSRF-Header",
												"value": "PingFederate",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"contactInfo\": {},\n  \"rolesAndProtocols\": {\n    \"oauthRole\": {\n      \"enableOauth\": true,\n      \"enableOpenIdConnect\": true\n    },\n    \"idpRole\": {\n      \"enable\": true,\n      \"enableSaml11\": true,\n      \"enableSaml10\": true,\n      \"enableWsFed\": true,\n      \"enableWsTrust\": true,\n      \"saml20Profile\": {\n        \"enable\": true\n      },\n      \"enableOutboundProvisioning\": true\n    },\n    \"spRole\": {\n      \"enable\": true,\n      \"enableSaml11\": true,\n      \"enableSaml10\": true,\n      \"enableWsFed\": true,\n      \"enableWsTrust\": true,\n      \"saml20Profile\": {\n        \"enable\": true,\n        \"enableXASP\": true\n      },\n      \"enableInboundProvisioning\": true,\n      \"enableOpenIDConnect\": true\n    },\n    \"enableIdpDiscovery\": true\n  },\n  \"federationInfo\": {\n    \"baseUrl\": \"https://localhost\",\n    \"saml2EntityId\": \"https://localhost\",\n    \"saml1xIssuerId\": \"\",\n    \"saml1xSourceId\": \"\",\n    \"wsfedRealm\": \"\"\n  },\n  \"notifications\": {\n    \"notifyAdminUserPasswordChanges\": false\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{pf-base-url}}/pf-admin-api/v1/serverSettings",
											"host": [
												"{{pf-base-url}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"serverSettings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure Virtual Host",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-XSRF-Header",
												"value": "PingFederate",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"virtualHostNames\": [\n    \"{{cdrIssuerHost}}\"\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{pf-base-url}}/pf-admin-api/v1/virtualHostNames",
											"host": [
												"{{pf-base-url}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"virtualHostNames"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure Extended Properties",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-XSRF-Header",
												"value": "PingFederate",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"items\": [\n    {\n      \"name\": \"legal_entity_id\",\n      \"description\": \"legal_entity_id\",\n      \"multiValued\": false\n    },\n    {\n      \"name\": \"client_uri\",\n      \"description\": \"client_uri\",\n      \"multiValued\": false\n    },\n    {\n      \"name\": \"last_software_statement\",\n      \"description\": \"last software statement used for DCR\",\n      \"multiValued\": false\n    },\n    {\n      \"name\": \"application_type\",\n      \"description\": \"application_type\",\n      \"multiValued\": false\n    },\n    {\n      \"name\": \"client_description\",\n      \"description\": \"client_description\",\n      \"multiValued\": false\n    },\n    {\n      \"name\": \"dh_host\",\n      \"description\": \"dh_host\",\n      \"multiValued\": false\n    },\n    {\n      \"name\": \"software_id\",\n      \"description\": \"software_id\",\n      \"multiValued\": false\n    },\n    {\n      \"name\": \"org_id\",\n      \"description\": \"org_id\",\n      \"multiValued\": false\n    },\n    {\n      \"name\": \"revocation_uri\",\n      \"description\": \"revocation_uri\",\n      \"multiValued\": false\n    },\n    {\n      \"name\": \"software_roles\",\n      \"description\": \"software_roles\",\n      \"multiValued\": false\n    },\n    {\n      \"name\": \"tos_uri\",\n      \"description\": \"tos_uri\",\n      \"multiValued\": false\n    },\n    {\n      \"name\": \"org_name\",\n      \"description\": \"org_name\",\n      \"multiValued\": false\n    },\n    {\n      \"name\": \"legal_entity_name\",\n      \"description\": \"legal_entity_name\",\n      \"multiValued\": false\n    },\n    {\n      \"name\": \"recipient_base_uri\",\n      \"description\": \"recipient_base_uri\",\n      \"multiValued\": false\n    },\n    {\n      \"name\": \"policy_uri\",\n      \"description\": \"policy_uri\",\n      \"multiValued\": false\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{pf-base-url}}/pf-admin-api/v1/extendedProperties",
											"host": [
												"{{pf-base-url}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"extendedProperties"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Configure IdP Authentication",
							"item": [
								{
									"name": "Configure CDR - Initiate Request Adapter",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-XSRF-Header",
												"value": "PingFederate",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"cdrInitiateRequestAdapter\",\n  \"name\": \"CDR - Initiate Request Flow\",\n  \"pluginDescriptorRef\": {\n    \"id\": \"com.pingidentity.ps.cdr.pf.adapter.idp.CDRAdapterSelector\",\n    \"location\": \"https://3f4f7f2896b8:9999/pf-admin-api/v1/idp/adapters/descriptors/com.pingidentity.ps.cdr.pf.adapter.idp.CDRAdapterSelector\"\n  },\n  \"configuration\": {\n    \"tables\": [],\n    \"fields\": [\n      {\n        \"name\": \"CA Value\",\n        \"value\": \"urn:cds.au:cdr:2\"\n      },\n      {\n        \"name\": \"SCA Value\",\n        \"value\": \"urn:cds.au:cdr:3\"\n      },\n      {\n        \"name\": \"LOA2 Scopes\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Max Sharing Duration\",\n        \"value\": \"365\"\n      },\n      {\n        \"name\": \"Host Header\",\n        \"value\": \"X-Forwarded-Host\"\n      }\n    ]\n  },\n  \"attributeContract\": {\n    \"coreAttributes\": [\n      {\n        \"name\": \"claims_requestedACR\",\n        \"masked\": false,\n        \"pseudonym\": false\n      },\n      {\n        \"name\": \"claims_idtoken\",\n        \"masked\": false,\n        \"pseudonym\": false\n      },\n      {\n        \"name\": \"claims_userinfo\",\n        \"masked\": false,\n        \"pseudonym\": false\n      },\n      {\n        \"name\": \"caValue\",\n        \"masked\": false,\n        \"pseudonym\": true\n      },\n      {\n        \"name\": \"claims_sharingDurationExpiresAt\",\n        \"masked\": false,\n        \"pseudonym\": false\n      },\n      {\n        \"name\": \"claims_cdrArrangementId\",\n        \"masked\": false,\n        \"pseudonym\": false\n      }\n    ],\n    \"extendedAttributes\": [\n    ],\n    \"maskOgnlValues\": false\n  },\n  \"attributeMapping\": {\n    \"attributeSources\": [],\n    \"attributeContractFulfillment\": {\n      \"claims_requestedACR\": {\n        \"source\": {\n          \"type\": \"ADAPTER\"\n        },\n        \"value\": \"claims_requestedACR\"\n      },\n      \"claims_idtoken\": {\n        \"source\": {\n          \"type\": \"ADAPTER\"\n        },\n        \"value\": \"claims_idtoken\"\n      },\n      \"claims_userinfo\": {\n        \"source\": {\n          \"type\": \"ADAPTER\"\n        },\n        \"value\": \"claims_userinfo\"\n      },\n      \"caValue\": {\n        \"source\": {\n          \"type\": \"ADAPTER\"\n        },\n        \"value\": \"caValue\"\n      },\n      \"claims_sharingDurationExpiresAt\": {\n        \"source\": {\n          \"type\": \"ADAPTER\"\n        },\n        \"value\": \"claims_sharingDurationExpiresAt\"\n      },\n      \"claims_cdrArrangementId\": {\n        \"source\": {\n          \"type\": \"ADAPTER\"\n        },\n        \"value\": \"claims_cdrArrangementId\"\n      }\n    },\n    \"issuanceCriteria\": {\n      \"conditionalCriteria\": []\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{pf-base-url}}/pf-admin-api/v1/idp/adapters",
											"host": [
												"{{pf-base-url}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"idp",
												"adapters"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure CDR - Consent Agentless Adapter",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-XSRF-Header",
												"value": "PingFederate",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"consentAgentlessAdapter\",\n  \"name\": \"CDR - Consent\",\n  \"pluginDescriptorRef\": {\n    \"id\": \"com.pingidentity.pf.adapters.referenceid.IdpBackchannelReferenceAuthnAdapter\",\n    \"location\": \"https://3f4f7f2896b8:9999/pf-admin-api/v1/idp/adapters/descriptors/com.pingidentity.pf.adapters.referenceid.IdpBackchannelReferenceAuthnAdapter\"\n  },\n  \"configuration\": {\n    \"tables\": [],\n    \"fields\": [\n      {\n        \"name\": \"Authentication Endpoint\",\n        \"value\": \"{{pf-consent-agentless-authendpoint}}\"\n      },\n      {\n        \"name\": \"User Name\",\n        \"value\": \"{{pf-consent-agentless-username}}\"\n      },\n      {\n        \"name\": \"Pass Phrase\",\n        \"value\": \"{{pf-consent-agentless-password}}\"\n      },\n      {\n        \"name\": \"Allowed Subject DN\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Allowed Issuer DN\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Logout Service Endpoint\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Logout Mode\",\n        \"value\": \"NONE\"\n      },\n      {\n        \"name\": \"Prefix Referenced Attributes\",\n        \"value\": \"true\"\n      },\n      {\n        \"name\": \"Ignore Untracked HTTP Parameters\",\n        \"value\": \"true\"\n      },\n      {\n        \"name\": \"Send Request Parameters\",\n        \"value\": \"NONE\"\n      },\n      {\n        \"name\": \"Transport Mode\",\n        \"value\": \"2\"\n      },\n      {\n        \"name\": \"Reference Duration\",\n        \"value\": \"30\"\n      },\n      {\n        \"name\": \"Reference Length\",\n        \"value\": \"30\"\n      },\n      {\n        \"name\": \"Require SSL/TLS\",\n        \"value\": \"true\"\n      },\n      {\n        \"name\": \"Outgoing Attribute Format\",\n        \"value\": \"JSON\"\n      },\n      {\n        \"name\": \"Incoming Attribute Format\",\n        \"value\": \"JSON\"\n      },\n      {\n        \"name\": \"Skip Host Name Validation \",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Relax Password Requirements\",\n        \"value\": \"false\"\n      }\n    ]\n  },\n  \"attributeContract\": {\n    \"coreAttributes\": [\n      {\n        \"name\": \"subject\",\n        \"masked\": false,\n        \"pseudonym\": true\n      }\n    ],\n    \"extendedAttributes\": [\n      {\n        \"name\": \"decision\",\n        \"masked\": false,\n        \"pseudonym\": false\n      },\n      {\n        \"name\": \"accounts\",\n        \"masked\": false,\n        \"pseudonym\": false\n      },\n      {\n        \"name\": \"scopes\",\n        \"masked\": false,\n        \"pseudonym\": false\n      },\n      {\n        \"name\": \"consent_id\",\n        \"masked\": false,\n        \"pseudonym\": false\n      }\n    ],\n    \"maskOgnlValues\": false\n  },\n  \"attributeMapping\": {\n    \"attributeSources\": [],\n    \"attributeContractFulfillment\": {\n      \"decision\": {\n        \"source\": {\n          \"type\": \"ADAPTER\"\n        },\n        \"value\": \"decision\"\n      },\n      \"subject\": {\n        \"source\": {\n          \"type\": \"ADAPTER\"\n        },\n        \"value\": \"subject\"\n      },\n      \"accounts\": {\n        \"source\": {\n          \"type\": \"ADAPTER\"\n        },\n        \"value\": \"accounts\"\n      },\n      \"scopes\": {\n        \"source\": {\n          \"type\": \"ADAPTER\"\n        },\n        \"value\": \"scopes\"\n      },\n      \"consent_id\": {\n        \"source\": {\n          \"type\": \"ADAPTER\"\n        },\n        \"value\": \"consent_id\"\n      }\n    },\n    \"issuanceCriteria\": {\n      \"conditionalCriteria\": []\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{pf-base-url}}/pf-admin-api/v1/idp/adapters",
											"host": [
												"{{pf-base-url}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"idp",
												"adapters"
											]
										}
									},
									"response": []
								},
								{
									"name": "Call CIAM IdP Discovery",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate response status=200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Set environment variables for next test\", function () {",
													"    var response = pm.response.json();",
													"    pm.environment.set(\"ciamIdpAuthorizationEndpoint\", response.authorization_endpoint);",
													"    pm.environment.set(\"ciamIdpTokenEndpoint\", response.token_endpoint);",
													"    pm.environment.set(\"ciamIdpUserinfoEndpoint\", response.userinfo_endpoint);",
													"    pm.environment.set(\"ciamIdpJWKSEndpoint\", response.jwks_uri);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-XSRF-Header",
												"value": "PingFederate",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{ciamIdpIssuer}}/.well-known/openid-configuration",
											"host": [
												"{{ciamIdpIssuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "Configure CIAM IdP Connection",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-XSRF-Header",
												"value": "PingFederate",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"type\": \"IDP\",\n  \"id\": \"ciamIdpConnection\",\n  \"name\": \"CIAM Identify Account Owner\",\n  \"entityId\": \"{{ciamIdpIssuer}}\",\n  \"active\": true,\n  \"contactInfo\": {},\n  \"loggingMode\": \"STANDARD\",\n  \"licenseConnectionGroup\": \"\",\n  \"additionalAllowedEntitiesConfiguration\": {\n    \"allowAdditionalEntities\": false,\n    \"allowAllEntities\": false,\n    \"additionalAllowedEntities\": []\n  },\n  \"errorPageMsgId\": \"errorDetail.spSsoFailure\",\n  \"idpBrowserSso\": {\n    \"protocol\": \"OIDC\",\n    \"defaultTargetUrl\": \"\",\n    \"idpIdentityMapping\": \"NONE\",\n    \"attributeContract\": {\n      \"coreAttributes\": [\n        {\n          \"name\": \"sub\",\n          \"masked\": false\n        }\n      ],\n      \"extendedAttributes\": [\n      ]\n    },\n    \"adapterMappings\": [],\n    \"authenticationPolicyContractMappings\": [],\n    \"oidcProviderSettings\": {\n      \"scopes\": \"openid profile\",\n      \"authorizationEndpoint\": \"{{ciamIdpAuthorizationEndpoint}}\",\n      \"loginType\": \"CODE\",\n      \"authenticationScheme\": \"POST\",\n      \"enablePKCE\": true,\n      \"tokenEndpoint\": \"{{ciamIdpTokenEndpoint}}\",\n      \"userInfoEndpoint\": \"{{ciamIdpUserinfoEndpoint}}\",\n      \"jwksURL\": \"{{ciamIdpJWKSEndpoint}}\",\n      \"requestParameters\": [\n        {\n          \"name\": \"prompt\",\n          \"attributeValue\": {\n            \"source\": {\n              \"type\": \"TEXT\"\n            },\n            \"value\": \"login\"\n          },\n          \"applicationEndpointOverride\": true\n        }\n      ]\n    }\n  },\n  \"oidcClientCredentials\": {\n    \"clientId\": \"{{ciamIdpClientId}}\",\n    \"clientSecret\": \"{{ciamIdpClientSecret}}\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{pf-base-url}}/pf-admin-api/v1/sp/idpConnections",
											"host": [
												"{{pf-base-url}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"sp",
												"idpConnections"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Configure AuthN Policy Contract",
							"item": [
								{
									"name": "Create cdrPolicyContract",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-XSRF-Header",
												"value": "PingFederate",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"cdrPolicyContract\",\n    \"name\": \"CDR Policy Contract\",\n    \"coreAttributes\": [\n    {\n        \"name\": \"subject\"\n    }\n    ],\n    \"extendedAttributes\": [\n    {\n        \"name\": \"cdr_consent_id\"\n    },\n    {\n        \"name\": \"result\"\n    },\n    {\n        \"name\": \"authorizationDetails\"\n    },\n    {\n        \"name\": \"acr\"\n    },\n    {\n        \"name\": \"cdrArrangementId\"\n    },\n    {\n        \"name\": \"sharingDurationExpiresAt\"\n    },\n    {\n        \"name\": \"customerRef\"\n    },\n    {\n        \"name\": \"SAML_AUTHN_CTX\"\n    },\n    {\n        \"name\": \"accounts\"\n    },\n    {\n        \"name\": \"scopes\"\n    },\n    {\n        \"name\": \"idtokenClaims\"\n    },\n    {\n        \"name\": \"accounts_available\"\n    },\n    {\n        \"name\": \"userinfoClaims\"\n    }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{pf-base-url}}/pf-admin-api/v1/authenticationPolicyContracts",
											"host": [
												"{{pf-base-url}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"authenticationPolicyContracts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create cdrPolicyFragmentInputContract",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-XSRF-Header",
												"value": "PingFederate",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"cdrPolicyFragmentInputContract\",\n    \"name\": \"CDR Policy Fragment Input Contract\",\n    \"coreAttributes\": [\n    {\n        \"name\": \"subject\"\n    }\n    ],\n    \"extendedAttributes\": [\n    {\n        \"name\": \"claims_requestedACR\"\n    },\n    {\n        \"name\": \"claims_idtoken\"\n    },\n    {\n        \"name\": \"claims_userinfo\"\n    },\n    {\n        \"name\": \"claims_sharingDurationExpiresAt\"\n    },\n    {\n        \"name\": \"claims_cdrArrangementId\"\n    }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{pf-base-url}}/pf-admin-api/v1/authenticationPolicyContracts",
											"host": [
												"{{pf-base-url}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"authenticationPolicyContracts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Configure AuthN Policies",
							"item": [
								{
									"name": "Create CA Fragment",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-XSRF-Header",
												"value": "PingFederate",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"cdrPolicyFragmentCAFlow\",\n    \"name\": \"CDR Policy Fragment - CA Flow\",\n    \"rootNode\": {\n    \"action\": {\n        \"type\": \"AUTHN_SOURCE\",\n        \"authenticationSource\": {\n        \"type\": \"IDP_CONNECTION\",\n        \"sourceRef\": {\n            \"id\": \"ciamIdpConnection\",\n            \"location\": \"https://3f4f7f2896b8:9999/pf-admin-api/v1/sp/idpConnections/ciamIdpConnection\"\n        }\n        }\n    },\n    \"children\": [\n        {\n        \"action\": {\n            \"type\": \"DONE\",\n            \"context\": \"Fail\"\n        }\n        },\n        {\n        \"action\": {\n            \"type\": \"AUTHN_SOURCE\",\n            \"context\": \"Success\",\n            \"authenticationSource\": {\n            \"type\": \"IDP_ADAPTER\",\n            \"sourceRef\": {\n                \"id\": \"consentAgentlessAdapter\",\n                \"location\": \"https://3f4f7f2896b8:9999/pf-admin-api/v1/idp/adapters/consentAgentlessAdapter\"\n            }\n            },\n            \"inputUserIdMapping\": {\n            \"source\": {\n                \"type\": \"IDP_CONNECTION\",\n                \"id\": \"ciamIdpConnection\"\n            },\n            \"value\": \"sub\"\n            },\n            \"userIdAuthenticated\": true\n        },\n        \"children\": [\n            {\n            \"action\": {\n                \"type\": \"DONE\",\n                \"context\": \"Fail\"\n            }\n            },\n            {\n            \"action\": {\n                \"type\": \"APC_MAPPING\",\n                \"context\": \"Success\",\n                \"authenticationPolicyContractRef\": {\n                \"id\": \"cdrPolicyContract\",\n                \"location\": \"https://3f4f7f2896b8:9999/pf-admin-api/v1/authenticationPolicyContracts/cdrPolicyContract\"\n                },\n                \"attributeMapping\": {\n                \"attributeSources\": [],\n                \"attributeContractFulfillment\": {\n                    \"cdr_consent_id\": {\n                    \"source\": {\n                        \"type\": \"ADAPTER\",\n                        \"id\": \"consentAgentlessAdapter\"\n                    },\n                    \"value\": \"consent_id\"\n                    },\n                    \"subject\": {\n                    \"source\": {\n                        \"type\": \"ADAPTER\",\n                        \"id\": \"consentAgentlessAdapter\"\n                    },\n                    \"value\": \"subject\"\n                    },\n                    \"authorizationDetails\": {\n                    \"source\": {\n                        \"type\": \"NO_MAPPING\"\n                    }\n                    },\n                    \"result\": {\n                    \"source\": {\n                        \"type\": \"TEXT\"\n                    },\n                    \"value\": \"approve\"\n                    },\n                    \"acr\": {\n                    \"source\": {\n                        \"type\": \"INPUTS\",\n                        \"id\": \"inputs\"\n                    },\n                    \"value\": \"claims_requestedACR\"\n                    },\n                    \"cdrArrangementId\": {\n                    \"source\": {\n                        \"type\": \"INPUTS\",\n                        \"id\": \"inputs\"\n                    },\n                    \"value\": \"claims_cdrArrangementId\"\n                    },\n                    \"sharingDurationExpiresAt\": {\n                    \"source\": {\n                        \"type\": \"INPUTS\",\n                        \"id\": \"inputs\"\n                    },\n                    \"value\": \"claims_sharingDurationExpiresAt\"\n                    },\n                    \"customerRef\": {\n                    \"source\": {\n                        \"type\": \"IDP_CONNECTION\",\n                        \"id\": \"ciamIdpConnection\"\n                    },\n                    \"value\": \"sub\"\n                    },\n                    \"SAML_AUTHN_CTX\": {\n                    \"source\": {\n                        \"type\": \"INPUTS\",\n                        \"id\": \"inputs\"\n                    },\n                    \"value\": \"claims_requestedACR\"\n                    },\n                    \"accounts\": {\n                    \"source\": {\n                        \"type\": \"ADAPTER\",\n                        \"id\": \"consentAgentlessAdapter\"\n                    },\n                    \"value\": \"accounts\"\n                    },\n                    \"accounts_available\": {\n                    \"source\": {\n                        \"type\": \"NO_MAPPING\"\n                    }\n                    },\n                    \"idtokenClaims\": {\n                    \"source\": {\n                        \"type\": \"INPUTS\",\n                        \"id\": \"inputs\"\n                    },\n                    \"value\": \"claims_idtoken\"\n                    },\n                    \"scopes\": {\n                    \"source\": {\n                        \"type\": \"ADAPTER\",\n                        \"id\": \"consentAgentlessAdapter\"\n                    },\n                    \"value\": \"scopes\"\n                    },\n                    \"userinfoClaims\": {\n                    \"source\": {\n                        \"type\": \"INPUTS\",\n                        \"id\": \"inputs\"\n                    },\n                    \"value\": \"claims_userinfo\"\n                    }\n                },\n                \"issuanceCriteria\": {\n                    \"conditionalCriteria\": []\n                }\n                }\n            }\n            }\n        ]\n        }\n    ]\n    },\n    \"inputs\": {\n    \"id\": \"cdrPolicyFragmentInputContract\",\n    \"location\": \"https://3f4f7f2896b8:9999/pf-admin-api/v1/authenticationPolicyContracts/cdrPolicyFragmentInputContract\"\n    },\n    \"outputs\": {\n    \"id\": \"cdrPolicyContract\",\n    \"location\": \"https://3f4f7f2896b8:9999/pf-admin-api/v1/authenticationPolicyContracts/cdrPolicyContract\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{pf-base-url}}/pf-admin-api/v1/authenticationPolicies/fragments",
											"host": [
												"{{pf-base-url}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"authenticationPolicies",
												"fragments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Default Policy",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-XSRF-Header",
												"value": "PingFederate",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"failIfNoSelection\": false,\n  \"authnSelectionTrees\": [\n    {\n      \"rootNode\": {\n        \"action\": {\n          \"type\": \"AUTHN_SOURCE\",\n          \"authenticationSource\": {\n            \"type\": \"IDP_ADAPTER\",\n            \"sourceRef\": {\n              \"id\": \"cdrInitiateRequestAdapter\",\n              \"location\": \"https://3f4f7f2896b8:9999/pf-admin-api/v1/idp/adapters/cdrInitiateRequestAdapter\"\n            }\n          },\n          \"attributeRules\": {\n            \"items\": [\n              {\n                \"attributeName\": \"caValue\",\n                \"condition\": \"EQUALS_CASE_INSENSITIVE\",\n                \"expectedValue\": \"CA\",\n                \"result\": \"LOA2\"\n              }\n            ],\n            \"fallbackToSuccess\": false\n          }\n        },\n        \"children\": [\n          {\n            \"action\": {\n              \"type\": \"DONE\",\n              \"context\": \"Fail\"\n            }\n          },\n          {\n            \"action\": {\n              \"type\": \"FRAGMENT\",\n              \"context\": \"LOA2\",\n              \"fragment\": {\n                \"id\": \"cdrPolicyFragmentCAFlow\",\n                \"location\": \"https://3f4f7f2896b8:9999/pf-admin-api/v1/authenticationPolicies/fragments/cdrPolicyFragmentCAFlow\"\n              },\n              \"fragmentMapping\": {\n                \"attributeSources\": [],\n                \"attributeContractFulfillment\": {\n                  \"claims_requestedACR\": {\n                    \"source\": {\n                      \"type\": \"ADAPTER\",\n                      \"id\": \"cdrInitiateRequestAdapter\"\n                    },\n                    \"value\": \"claims_requestedACR\"\n                  },\n                  \"claims_idtoken\": {\n                    \"source\": {\n                      \"type\": \"ADAPTER\",\n                      \"id\": \"cdrInitiateRequestAdapter\"\n                    },\n                    \"value\": \"claims_idtoken\"\n                  },\n                  \"subject\": {\n                    \"source\": {\n                      \"type\": \"NO_MAPPING\"\n                    }\n                  },\n                  \"claims_userinfo\": {\n                    \"source\": {\n                      \"type\": \"ADAPTER\",\n                      \"id\": \"cdrInitiateRequestAdapter\"\n                    },\n                    \"value\": \"claims_userinfo\"\n                  },\n                  \"claims_sharingDurationExpiresAt\": {\n                    \"source\": {\n                      \"type\": \"ADAPTER\",\n                      \"id\": \"cdrInitiateRequestAdapter\"\n                    },\n                    \"value\": \"claims_sharingDurationExpiresAt\"\n                  },\n                  \"claims_cdrArrangementId\": {\n                    \"source\": {\n                      \"type\": \"ADAPTER\",\n                      \"id\": \"cdrInitiateRequestAdapter\"\n                    },\n                    \"value\": \"claims_cdrArrangementId\"\n                  }\n                },\n                \"issuanceCriteria\": {\n                  \"conditionalCriteria\": []\n                }\n              }\n            },\n            \"children\": [\n              {\n                \"action\": {\n                  \"type\": \"DONE\",\n                  \"context\": \"Fail\"\n                }\n              },\n              {\n                \"action\": {\n                  \"type\": \"APC_MAPPING\",\n                  \"context\": \"Success\",\n                  \"authenticationPolicyContractRef\": {\n                    \"id\": \"cdrPolicyContract\",\n                    \"location\": \"https://3f4f7f2896b8:9999/pf-admin-api/v1/authenticationPolicyContracts/cdrPolicyContract\"\n                  },\n                  \"attributeMapping\": {\n                    \"attributeSources\": [],\n                    \"attributeContractFulfillment\": {\n                      \"cdr_consent_id\": {\n                        \"source\": {\n                          \"type\": \"FRAGMENT\",\n                          \"id\": \"cdrPolicyFragmentCAFlow\"\n                        },\n                        \"value\": \"cdr_consent_id\"\n                      },\n                      \"subject\": {\n                        \"source\": {\n                          \"type\": \"FRAGMENT\",\n                          \"id\": \"cdrPolicyFragmentCAFlow\"\n                        },\n                        \"value\": \"subject\"\n                      },\n                      \"authorizationDetails\": {\n                        \"source\": {\n                          \"type\": \"FRAGMENT\",\n                          \"id\": \"cdrPolicyFragmentCAFlow\"\n                        },\n                        \"value\": \"authorizationDetails\"\n                      },\n                      \"result\": {\n                        \"source\": {\n                          \"type\": \"FRAGMENT\",\n                          \"id\": \"cdrPolicyFragmentCAFlow\"\n                        },\n                        \"value\": \"result\"\n                      },\n                      \"acr\": {\n                        \"source\": {\n                          \"type\": \"FRAGMENT\",\n                          \"id\": \"cdrPolicyFragmentCAFlow\"\n                        },\n                        \"value\": \"acr\"\n                      },\n                      \"cdrArrangementId\": {\n                        \"source\": {\n                          \"type\": \"FRAGMENT\",\n                          \"id\": \"cdrPolicyFragmentCAFlow\"\n                        },\n                        \"value\": \"cdrArrangementId\"\n                      },\n                      \"sharingDurationExpiresAt\": {\n                        \"source\": {\n                          \"type\": \"FRAGMENT\",\n                          \"id\": \"cdrPolicyFragmentCAFlow\"\n                        },\n                        \"value\": \"sharingDurationExpiresAt\"\n                      },\n                      \"customerRef\": {\n                        \"source\": {\n                          \"type\": \"FRAGMENT\",\n                          \"id\": \"cdrPolicyFragmentCAFlow\"\n                        },\n                        \"value\": \"customerRef\"\n                      },\n                      \"SAML_AUTHN_CTX\": {\n                        \"source\": {\n                          \"type\": \"FRAGMENT\",\n                          \"id\": \"cdrPolicyFragmentCAFlow\"\n                        },\n                        \"value\": \"SAML_AUTHN_CTX\"\n                      },\n                      \"accounts\": {\n                        \"source\": {\n                          \"type\": \"FRAGMENT\",\n                          \"id\": \"cdrPolicyFragmentCAFlow\"\n                        },\n                        \"value\": \"accounts\"\n                      },\n                      \"accounts_available\": {\n                        \"source\": {\n                          \"type\": \"FRAGMENT\",\n                          \"id\": \"cdrPolicyFragmentCAFlow\"\n                        },\n                        \"value\": \"accounts_available\"\n                      },\n                      \"idtokenClaims\": {\n                        \"source\": {\n                          \"type\": \"FRAGMENT\",\n                          \"id\": \"cdrPolicyFragmentCAFlow\"\n                        },\n                        \"value\": \"idtokenClaims\"\n                      },\n                      \"scopes\": {\n                        \"source\": {\n                          \"type\": \"FRAGMENT\",\n                          \"id\": \"cdrPolicyFragmentCAFlow\"\n                        },\n                        \"value\": \"scopes\"\n                      },\n                      \"userinfoClaims\": {\n                        \"source\": {\n                          \"type\": \"FRAGMENT\",\n                          \"id\": \"cdrPolicyFragmentCAFlow\"\n                        },\n                        \"value\": \"userinfoClaims\"\n                      }\n                    },\n                    \"issuanceCriteria\": {\n                      \"conditionalCriteria\": []\n                    }\n                  }\n                }\n              }\n            ]\n          }\n        ]\n      },\n      \"id\": \"cdrPolicyDefaultFlow\",\n      \"name\": \"CDR Policy v1.4\",\n      \"enabled\": true\n    }\n  ],\n  \"defaultAuthenticationSources\": [],\n  \"trackedHttpParameters\": [\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{pf-base-url}}/pf-admin-api/v1/authenticationPolicies/default",
											"host": [
												"{{pf-base-url}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"authenticationPolicies",
												"default"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Configure Security Settings",
					"item": [
						{
							"name": "Import CDR Signing Key",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingFederate",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"cdr_signing\",\n  \"fileData\": \"{{pf-signing-key-cdr-p12b64}}\",\n  \"format\": \"PKCS12\",\n  \"password\": \"{{pf-signing-key-cdr-password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pf-base-url}}/pf-admin-api/v1/keyPairs/signing/import",
									"host": [
										"{{pf-base-url}}"
									],
									"path": [
										"pf-admin-api",
										"v1",
										"keyPairs",
										"signing",
										"import"
									]
								}
							},
							"response": []
						},
						{
							"name": "Import Internal Signing Key",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingFederate",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"internal_signing\",\n  \"fileData\": \"{{pf-signing-key-internal-p12b64}}\",\n  \"format\": \"PKCS12\",\n  \"password\": \"{{pf-signing-key-internal-password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pf-base-url}}/pf-admin-api/v1/keyPairs/signing/import",
									"host": [
										"{{pf-base-url}}"
									],
									"path": [
										"pf-admin-api",
										"v1",
										"keyPairs",
										"signing",
										"import"
									]
								}
							},
							"response": []
						},
						{
							"name": "Import ACCC Trusted CA Cert",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingFederate",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"accc_ca_cert\",\n  \"fileData\": \"{{cdrACCCTrustedCA}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pf-base-url}}/pf-admin-api/v1/certificates/ca/import",
									"host": [
										"{{pf-base-url}}"
									],
									"path": [
										"pf-admin-api",
										"v1",
										"certificates",
										"ca",
										"import"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure OIDC Static Keys",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingFederate",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"staticJwksEnabled\": true,\n  \"rsaActiveCertRef\": {\n    \"id\": \"cdr_signing\",\n    \"location\": \"https://3f4f7f2896b8:9999/pf-admin-api/v1/keyPairs/signing/cdr_signing\"\n  },\n  \"rsaPublishX5cParameter\": true,\n  \"rsaDecryptionActiveCertRef\": {\n    \"id\": \"cdr_signing\",\n    \"location\": \"https://3f4f7f2896b8:9999/pf-admin-api/v1/keyPairs/signing/cdr_signing\"\n  },\n  \"rsaDecryptionPublishX5cParameter\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pf-base-url}}/pf-admin-api/v1/keyPairs/oauthOpenIdConnect",
									"host": [
										"{{pf-base-url}}"
									],
									"path": [
										"pf-admin-api",
										"v1",
										"keyPairs",
										"oauthOpenIdConnect"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Configure OAuth Settings",
					"item": [
						{
							"name": "Create Persistent Grant Mapping",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingFederate",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"attributeSources\": [],\n    \"attributeContractFulfillment\": {\n    \"APPROVED_SCOPES\": {\n        \"source\": {\n        \"type\": \"AUTHENTICATION_POLICY_CONTRACT\"\n        },\n        \"value\": \"scopes\"\n    },\n    \"AVAILABLE_ACCOUNTS\": {\n        \"source\": {\n        \"type\": \"NO_MAPPING\"\n        }\n    },\n    \"ACR_VALUES\": {\n        \"source\": {\n        \"type\": \"AUTHENTICATION_POLICY_CONTRACT\"\n        },\n        \"value\": \"SAML_AUTHN_CTX\"\n    },\n    \"RAR_AUTHZ_DETAILS\": {\n        \"source\": {\n        \"type\": \"NO_MAPPING\"\n        }\n    },\n    \"AUTH_TIME\": {\n        \"source\": {\n        \"type\": \"EXPRESSION\"\n        },\n        \"value\": \"(@java.time.Instant@now()).getEpochSecond()\"\n    },\n    \"USER_NAME\": {\n        \"source\": {\n        \"type\": \"AUTHENTICATION_POLICY_CONTRACT\"\n        },\n        \"value\": \"subject\"\n    },\n    \"CUSTOMER_REF\": {\n        \"source\": {\n        \"type\": \"AUTHENTICATION_POLICY_CONTRACT\"\n        },\n        \"value\": \"customerRef\"\n    },\n    \"ADR_ORG_ID\": {\n        \"source\": {\n        \"type\": \"EXTENDED_PROPERTIES\"\n        },\n        \"value\": \"org_id\"\n    },\n    \"CONSENTAPI_ID\": {\n        \"source\": {\n        \"type\": \"AUTHENTICATION_POLICY_CONTRACT\"\n        },\n        \"value\": \"cdrArrangementId\"\n    },\n    \"ISSUER\": {\n        \"source\": {\n        \"type\": \"EXPRESSION\"\n        },\n        \"value\": \"#requestString=#this.get(\\\"context.HttpRequest\\\").getObjectValue().getRequestURL().toString(), #url=new java.net.URL(#requestString), #port=(#url.getPort()==-1)?\\\"\\\":\\\":\\\"+#url.getPort(), #url.getProtocol() + \\\"://\\\" + #url.getHost() + #port\"\n    },\n    \"PERSISTENT_GRANT_LIFETIME\": {\n        \"source\": {\n        \"type\": \"EXPRESSION\"\n        },\n        \"value\": \"(#this.get(\\\"sharingDurationExpiresAt\\\") == null || #this.get(\\\"sharingDurationExpiresAt\\\") == 0)?0:1\"\n    },\n    \"CONSENTAPI_DEFINITION\": {\n        \"source\": {\n        \"type\": \"TEXT\"\n        },\n        \"value\": \"{\\\"id\\\":\\\"pf-persistent-grant\\\",\\\"locale\\\":\\\"en-AU\\\",\\\"version\\\":\\\"1.0\\\"}\"\n    },\n    \"SHARING_DURATION_EXPIRES_AT\": {\n        \"source\": {\n        \"type\": \"AUTHENTICATION_POLICY_CONTRACT\"\n        },\n        \"value\": \"sharingDurationExpiresAt\"\n    },\n    \"SELECTED_ACCOUNTS\": {\n        \"source\": {\n        \"type\": \"AUTHENTICATION_POLICY_CONTRACT\"\n        },\n        \"value\": \"accounts\"\n    },\n    \"CLAIMS_IDTOKEN\": {\n        \"source\": {\n        \"type\": \"AUTHENTICATION_POLICY_CONTRACT\"\n        },\n        \"value\": \"idtokenClaims\"\n    },\n    \"SUBJECT\": {\n        \"source\": {\n        \"type\": \"AUTHENTICATION_POLICY_CONTRACT\"\n        },\n        \"value\": \"cdrArrangementId\"\n    },\n    \"CLAIMS_USERINFO\": {\n        \"source\": {\n        \"type\": \"AUTHENTICATION_POLICY_CONTRACT\"\n        },\n        \"value\": \"userinfoClaims\"\n    },\n    \"USER_KEY\": {\n        \"source\": {\n        \"type\": \"AUTHENTICATION_POLICY_CONTRACT\"\n        },\n        \"value\": \"customerRef\"\n    }\n    },\n    \"issuanceCriteria\": {\n    \"conditionalCriteria\": []\n    },\n    \"id\": \"cdrPolicyContract\",\n    \"authenticationPolicyContractRef\": {\n    \"id\": \"cdrPolicyContract\",\n    \"location\": \"https://3f4f7f2896b8:9999/pf-admin-api/v1/authenticationPolicyContracts/cdrPolicyContract\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pf-base-url}}/pf-admin-api/v1/oauth/authenticationPolicyContractMappings",
									"host": [
										"{{pf-base-url}}"
									],
									"path": [
										"pf-admin-api",
										"v1",
										"oauth",
										"authenticationPolicyContractMappings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Admin JWT ATM",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingFederate",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"adminATM\",\n  \"name\": \"adminATM\",\n  \"pluginDescriptorRef\": {\n    \"id\": \"com.pingidentity.pf.access.token.management.plugins.JwtBearerAccessTokenManagementPlugin\",\n    \"location\": \"https://3f4f7f2896b8:9999/pf-admin-api/v1/oauth/accessTokenManagers/descriptors/com.pingidentity.pf.access.token.management.plugins.JwtBearerAccessTokenManagementPlugin\"\n  },\n  \"configuration\": {\n    \"tables\": [\n      {\n        \"name\": \"Symmetric Keys\",\n        \"rows\": []\n      },\n      {\n        \"name\": \"Certificates\",\n        \"rows\": [\n          {\n            \"fields\": [\n              {\n                \"name\": \"Key ID\",\n                \"value\": \"admin_signing\"\n              },\n              {\n                \"name\": \"Certificate\",\n                \"value\": \"internal_signing\"\n              }\n            ],\n            \"defaultRow\": false\n          }\n        ]\n      }\n    ],\n    \"fields\": [\n      {\n        \"name\": \"Token Lifetime\",\n        \"value\": \"30\"\n      },\n      {\n        \"name\": \"Use Centralized Signing Key\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"JWS Algorithm\",\n        \"value\": \"RS256\"\n      },\n      {\n        \"name\": \"Active Symmetric Key ID\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Active Signing Certificate Key ID\",\n        \"value\": \"admin_signing\"\n      },\n      {\n        \"name\": \"JWE Algorithm\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"JWE Content Encryption Algorithm\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Active Symmetric Encryption Key ID\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Asymmetric Encryption Key\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Asymmetric Encryption JWKS URL\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Include Key ID Header Parameter\",\n        \"value\": \"true\"\n      },\n      {\n        \"name\": \"Include X.509 Thumbprint Header Parameter\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Default JWKS URL Cache Duration\",\n        \"value\": \"720\"\n      },\n      {\n        \"name\": \"Include JWE Key ID Header Parameter\",\n        \"value\": \"true\"\n      },\n      {\n        \"name\": \"Include JWE X.509 Thumbprint Header Parameter\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Client ID Claim Name\",\n        \"value\": \"client_id\"\n      },\n      {\n        \"name\": \"Scope Claim Name\",\n        \"value\": \"scope\"\n      },\n      {\n        \"name\": \"Space Delimit Scope Values\",\n        \"value\": \"true\"\n      },\n      {\n        \"name\": \"Issuer Claim Value\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Audience Claim Value\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"JWT ID Claim Length\",\n        \"value\": \"0\"\n      },\n      {\n        \"name\": \"Access Grant GUID Claim Name\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"JWKS Endpoint Path\",\n        \"value\": \"/AdminJWKS\"\n      },\n      {\n        \"name\": \"JWKS Endpoint Cache Duration\",\n        \"value\": \"720\"\n      },\n      {\n        \"name\": \"Publish Key ID X.509 URL\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Publish Thumbprint X.509 URL\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Expand Scope Groups\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Type Header Value\",\n        \"value\": \"\"\n      }\n    ]\n  },\n  \"attributeContract\": {\n    \"coreAttributes\": [],\n    \"extendedAttributes\": [\n      {\n        \"name\": \"sub\",\n        \"multiValued\": false\n      }\n    ]\n  },\n  \"selectionSettings\": {\n    \"resourceUris\": []\n  },\n  \"accessControlSettings\": {\n    \"restrictClients\": false,\n    \"allowedClients\": []\n  },\n  \"sessionValidationSettings\": {\n    \"checkValidAuthnSession\": false,\n    \"checkSessionRevocationStatus\": false,\n    \"updateAuthnSessionActivity\": false,\n    \"includeSessionId\": false\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pf-base-url}}/pf-admin-api/v1/oauth/accessTokenManagers",
									"host": [
										"{{pf-base-url}}"
									],
									"path": [
										"pf-admin-api",
										"v1",
										"oauth",
										"accessTokenManagers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Baseline JWT ATM",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingFederate",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"cdrBaselineJWTATM\",\n  \"name\": \"cdrBaselineJWTATM\",\n  \"pluginDescriptorRef\": {\n    \"id\": \"com.pingidentity.pf.access.token.management.plugins.JwtBearerAccessTokenManagementPlugin\",\n    \"location\": \"https://3f4f7f2896b8:9999/pf-admin-api/v1/oauth/accessTokenManagers/descriptors/com.pingidentity.pf.access.token.management.plugins.JwtBearerAccessTokenManagementPlugin\"\n  },\n  \"configuration\": {\n    \"tables\": [\n      {\n        \"name\": \"Symmetric Keys\",\n        \"rows\": [\n          {\n            \"fields\": [\n              {\n                \"name\": \"Key ID\",\n                \"value\": \"encryption\"\n              },\n              {\n                \"name\": \"Key\",\n                \"value\": \"{{cdrAccessTokenEncryptionKey}}\"\n              },\n              {\n                \"name\": \"Encoding\",\n                \"value\": \"b64u\"\n              }\n            ],\n            \"defaultRow\": false\n          }\n        ]\n      },\n      {\n        \"name\": \"Certificates\",\n        \"rows\": []\n      }\n    ],\n    \"fields\": [\n      {\n        \"name\": \"Token Lifetime\",\n        \"value\": \"8\"\n      },\n      {\n        \"name\": \"Use Centralized Signing Key\",\n        \"value\": \"true\"\n      },\n      {\n        \"name\": \"JWS Algorithm\",\n        \"value\": \"PS256\"\n      },\n      {\n        \"name\": \"Active Symmetric Key ID\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Active Signing Certificate Key ID\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"JWE Algorithm\",\n        \"value\": \"A256KW\"\n      },\n      {\n        \"name\": \"JWE Content Encryption Algorithm\",\n        \"value\": \"A128CBC-HS256\"\n      },\n      {\n        \"name\": \"Active Symmetric Encryption Key ID\",\n        \"value\": \"encryption\"\n      },\n      {\n        \"name\": \"Asymmetric Encryption Key\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Asymmetric Encryption JWKS URL\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Include Key ID Header Parameter\",\n        \"value\": \"true\"\n      },\n      {\n        \"name\": \"Include X.509 Thumbprint Header Parameter\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Default JWKS URL Cache Duration\",\n        \"value\": \"720\"\n      },\n      {\n        \"name\": \"Include JWE Key ID Header Parameter\",\n        \"value\": \"true\"\n      },\n      {\n        \"name\": \"Include JWE X.509 Thumbprint Header Parameter\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Client ID Claim Name\",\n        \"value\": \"client_id\"\n      },\n      {\n        \"name\": \"Scope Claim Name\",\n        \"value\": \"scope\"\n      },\n      {\n        \"name\": \"Space Delimit Scope Values\",\n        \"value\": \"true\"\n      },\n      {\n        \"name\": \"Issuer Claim Value\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Audience Claim Value\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"JWT ID Claim Length\",\n        \"value\": \"20\"\n      },\n      {\n        \"name\": \"Access Grant GUID Claim Name\",\n        \"value\": \"cdr_arrangement_id\"\n      },\n      {\n        \"name\": \"JWKS Endpoint Path\",\n        \"value\": \"/cdrJWKS\"\n      },\n      {\n        \"name\": \"JWKS Endpoint Cache Duration\",\n        \"value\": \"720\"\n      },\n      {\n        \"name\": \"Publish Key ID X.509 URL\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Publish Thumbprint X.509 URL\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Expand Scope Groups\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Type Header Value\",\n        \"value\": \"\"\n      }\n    ]\n  },\n  \"attributeContract\": {\n    \"coreAttributes\": [],\n    \"extendedAttributes\": [\n      {\n        \"name\": \"sub\",\n        \"multiValued\": false\n      },\n      {\n        \"name\": \"iss\",\n        \"multiValued\": false\n      },\n      {\n        \"name\": \"cnf\",\n        \"multiValued\": false\n      }\n    ],\n    \"defaultSubjectAttribute\": \"sub\"\n  },\n  \"selectionSettings\": {\n    \"resourceUris\": []\n  },\n  \"accessControlSettings\": {\n    \"restrictClients\": false,\n    \"allowedClients\": []\n  },\n  \"sessionValidationSettings\": {\n    \"checkValidAuthnSession\": false,\n    \"checkSessionRevocationStatus\": false,\n    \"updateAuthnSessionActivity\": false,\n    \"includeSessionId\": false\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pf-base-url}}/pf-admin-api/v1/oauth/accessTokenManagers",
									"host": [
										"{{pf-base-url}}"
									],
									"path": [
										"pf-admin-api",
										"v1",
										"oauth",
										"accessTokenManagers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Revocable JWT ATM",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingFederate",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"cdrRevocableATM\",\n  \"name\": \"cdrRevocableATM\",\n  \"pluginDescriptorRef\": {\n    \"id\": \"com.pingidentity.ps.cdr.pf.bearertoken.RevocableJwtBearerAccessTokenManagementPlugin\",\n    \"location\": \"https://3f4f7f2896b8:9999/pf-admin-api/v1/oauth/accessTokenManagers/descriptors/com.pingidentity.ps.cdr.pf.bearertoken.RevocableJwtBearerAccessTokenManagementPlugin\"\n  },\n  \"configuration\": {\n    \"tables\": [],\n    \"fields\": [\n      {\n        \"name\": \"JWT Access Token Manager\",\n        \"value\": \"cdrBaselineJWTATM\"\n      }\n    ]\n  },\n  \"attributeContract\": {\n    \"coreAttributes\": [],\n    \"extendedAttributes\": [\n      {\n        \"name\": \"sub\",\n        \"multiValued\": false\n      },\n      {\n        \"name\": \"iss\",\n        \"multiValued\": false\n      },\n      {\n        \"name\": \"cnf\",\n        \"multiValued\": false\n      }\n    ],\n    \"defaultSubjectAttribute\": \"sub\"\n  },\n  \"selectionSettings\": {\n    \"resourceUris\": [\n      \"{{cdrDataHolderBankAPIBaseURI}}\"\n    ]\n  },\n  \"accessControlSettings\": {\n    \"restrictClients\": false,\n    \"allowedClients\": []\n  },\n  \"sessionValidationSettings\": {\n    \"checkValidAuthnSession\": false,\n    \"checkSessionRevocationStatus\": false,\n    \"updateAuthnSessionActivity\": false,\n    \"includeSessionId\": false\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pf-base-url}}/pf-admin-api/v1/oauth/accessTokenManagers",
									"host": [
										"{{pf-base-url}}"
									],
									"path": [
										"pf-admin-api",
										"v1",
										"oauth",
										"accessTokenManagers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create CDR DCR Policy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.collectionVariables.get(\"cdrIssuerPort\") == null || pm.collectionVariables.get(\"cdrIssuerPort\") == \"\" || pm.collectionVariables.get(\"cdrIssuerPort\") == \"443\")",
											"{",
											"    pm.environment.set(\"dataholderPortSuffix\", pm.collectionVariables.get(\"cdrIssuerPort\"));",
											"}",
											"else",
											"{",
											"    pm.environment.set(\"dataholderPortSuffix\", \":\" + pm.collectionVariables.get(\"cdrIssuerPort\"));",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingFederate",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"cdrDCRAURegister\",\n  \"name\": \"CDR DCR Registration Policy\",\n  \"pluginDescriptorRef\": {\n    \"id\": \"com.pingidentity.ps.cdr.pf.clientregistration.CDRAUPlugin\",\n    \"location\": \"https://3f4f7f2896b8:9999/pf-admin-api/v1/oauth/clientRegistrationPolicies/descriptors/com.pingidentity.ps.cdr.pf.clientregistration.CDRAUPlugin\"\n  },\n  \"configuration\": {\n    \"tables\": [],\n    \"fields\": [\n      {\n        \"name\": \"PingFederate Base URL\",\n        \"value\": \"https://localhost:9031\"\n      },\n      {\n        \"name\": \"Org ID Claim Name\",\n        \"value\": \"org_id\"\n      },\n      {\n        \"name\": \"Issuer\",\n        \"value\": \"cdr-register\"\n      },\n      {\n        \"name\": \"JWKS URL\",\n        \"value\": \"{{cdrACCCJWKS}}\"\n      },\n      {\n        \"name\": \"CDR Access Token Manager\",\n        \"value\": \"cdrRevocableATM\"\n      },\n      {\n        \"name\": \"Common Scopes\",\n        \"value\": \"openid,profile\"\n      },\n      {\n        \"name\": \"Audience\",\n        \"value\": \"https://{{cdrIssuerHost}}{{dataholderPortSuffix}}\"\n      },\n      {\n        \"name\": \"ECDSA\",\n        \"value\": \"true\"\n      },\n      {\n        \"name\": \"RSA-PSS\",\n        \"value\": \"true\"\n      },\n      {\n        \"name\": \"RSA\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Correlation ID Request Header\",\n        \"value\": \"X-CorrelationId\"\n      },\n      {\n        \"name\": \"Revoked JWKS validation\",\n        \"value\": \"true\"\n      },\n      {\n        \"name\": \"Prefix Two Header Name\",\n        \"value\": \"X-DCR-PREFIX\"\n      },\n      {\n        \"name\": \"Host Header\",\n        \"value\": \"X-Forwarded-Host\"\n      }\n    ]\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pf-base-url}}/pf-admin-api/v1/oauth/clientRegistrationPolicies",
									"host": [
										"{{pf-base-url}}"
									],
									"path": [
										"pf-admin-api",
										"v1",
										"oauth",
										"clientRegistrationPolicies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create AT Mapping - cdrPolicyContract",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingFederate",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"attributeSources\": [],\n    \"attributeContractFulfillment\": {\n        \"sub\": {\n        \"source\": {\n            \"type\": \"OAUTH_PERSISTENT_GRANT\"\n        },\n        \"value\": \"CUSTOMER_REF\"\n        },\n        \"iss\": {\n        \"source\": {\n            \"type\": \"EXPRESSION\"\n        },\n        \"value\": \"#requestString=#this.get(\\\"context.HttpRequest\\\").getObjectValue().getRequestURL().toString(), #url=new java.net.URL(#requestString), #port=(#url.getPort()==-1)?\\\"\\\":\\\":\\\"+#url.getPort(), #url.getProtocol() + \\\"://\\\" + #url.getHost() + #port\"\n        },\n        \"cnf\": {\n        \"source\": {\n            \"type\": \"EXPRESSION\"\n        },\n        \"value\": \"#THUMBPRINT_HEADER=\\\"X-CertificateThumbprint\\\", #objReq = #this.get(\\\"context.HttpRequest\\\").getObjectValue(), #headerValue = #objReq.getHeader(#THUMBPRINT_HEADER) != null ? #objReq.getHeader(#THUMBPRINT_HEADER) : null, #mapValue = new java.util.HashMap(), (#headerValue != null)?#mapValue.put(\\\"x5t#S256\\\", #headerValue):null, #mapValue\"\n        }\n    },\n    \"issuanceCriteria\": {\n        \"conditionalCriteria\": []\n    },\n    \"id\": \"authz_req|apc.cdrPolicyContract|cdrRevocableATM\",\n    \"context\": {\n        \"type\": \"AUTHENTICATION_POLICY_CONTRACT\",\n        \"contextRef\": {\n        \"id\": \"cdrPolicyContract\",\n        \"location\": \"https://3f4f7f2896b8:9999/pf-admin-api/v1/authenticationPolicyContracts/cdrPolicyContract\"\n        }\n    },\n    \"accessTokenManagerRef\": {\n        \"id\": \"cdrRevocableATM\",\n        \"location\": \"https://3f4f7f2896b8:9999/pf-admin-api/v1/oauth/accessTokenManagers/cdrRevocableATM\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pf-base-url}}/pf-admin-api/v1/oauth/accessTokenMappings",
									"host": [
										"{{pf-base-url}}"
									],
									"path": [
										"pf-admin-api",
										"v1",
										"oauth",
										"accessTokenMappings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create AT Mapping - cdr:registration",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingFederate",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"attributeSources\": [],\n    \"attributeContractFulfillment\": {\n        \"sub\": {\n        \"source\": {\n            \"type\": \"CONTEXT\"\n        },\n        \"value\": \"ClientId\"\n        },\n        \"iss\": {\n        \"source\": {\n            \"type\": \"EXPRESSION\"\n        },\n        \"value\": \"#requestString=#this.get(\\\"context.HttpRequest\\\").getObjectValue().getRequestURL().toString(), #url=new java.net.URL(#requestString), #port=(#url.getPort()==-1)?\\\"\\\":\\\":\\\"+#url.getPort(), #url.getProtocol() + \\\"://\\\" + #url.getHost() + #port\"\n        },\n        \"cnf\": {\n        \"source\": {\n            \"type\": \"EXPRESSION\"\n        },\n        \"value\": \"#THUMBPRINT_HEADER=\\\"X-CertificateThumbprint\\\", #objReq = #this.get(\\\"context.HttpRequest\\\").getObjectValue(), #headerValue = #objReq.getHeader(#THUMBPRINT_HEADER) != null ? #objReq.getHeader(#THUMBPRINT_HEADER) : null, #mapValue = new java.util.HashMap(), (#headerValue != null)?#mapValue.put(\\\"x5t#S256\\\", #headerValue):null, #mapValue\"\n        }\n    },\n    \"issuanceCriteria\": {\n        \"conditionalCriteria\": [],\n        \"expressionCriteria\": [\n        {\n            \"errorResult\": \"Invalid_Scope\",\n            \"expression\": \"#scopes = #this.get(\\\"context.OAuthScopes\\\") != null?#this.get(\\\"context.OAuthScopes\\\").toString():\\\"\\\", #scopes.equals(\\\"\\\") || #scopes.equals(\\\"cdr:registration\\\")\"\n        }\n        ]\n    },\n    \"id\": \"client_credentials|cdrRevocableATM\",\n    \"context\": {\n        \"type\": \"CLIENT_CREDENTIALS\"\n    },\n    \"accessTokenManagerRef\": {\n        \"id\": \"cdrRevocableATM\",\n        \"location\": \"https://3f4f7f2896b8:9999/pf-admin-api/v1/oauth/accessTokenManagers/cdrRevocableATM\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pf-base-url}}/pf-admin-api/v1/oauth/accessTokenMappings",
									"host": [
										"{{pf-base-url}}"
									],
									"path": [
										"pf-admin-api",
										"v1",
										"oauth",
										"accessTokenMappings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create CDR OIDC Policy",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingFederate",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"cdrOIDCPolicy\",\n  \"name\": \"cdrOIDCPolicy\",\n  \"idTokenLifetime\": 5,\n  \"attributeContract\": {\n    \"coreAttributes\": [\n      {\n        \"name\": \"sub\",\n        \"multiValued\": false\n      }\n    ],\n    \"extendedAttributes\": [\n      {\n        \"name\": \"acr\",\n        \"includeInIdToken\": true,\n        \"includeInUserInfo\": false,\n        \"multiValued\": false\n      },\n      {\n        \"name\": \"refresh_token_expires_at\",\n        \"includeInIdToken\": true,\n        \"includeInUserInfo\": false,\n        \"multiValued\": false\n      },\n      {\n        \"name\": \"auth_time\",\n        \"includeInIdToken\": true,\n        \"includeInUserInfo\": false,\n        \"multiValued\": false\n      },\n      {\n        \"name\": \"sharing_expires_at\",\n        \"includeInIdToken\": true,\n        \"includeInUserInfo\": false,\n        \"multiValued\": false\n      }\n    ]\n  },\n  \"attributeMapping\": {\n    \"attributeSources\": [],\n    \"attributeContractFulfillment\": {\n      \"acr\": {\n        \"source\": {\n          \"type\": \"OAUTH_PERSISTENT_GRANT\"\n        },\n        \"value\": \"ACR_VALUES\"\n      },\n      \"sub\": {\n        \"source\": {\n          \"type\": \"TOKEN\"\n        },\n        \"value\": \"sub\"\n      },\n      \"refresh_token_expires_at\": {\n        \"source\": {\n          \"type\": \"OAUTH_PERSISTENT_GRANT\"\n        },\n        \"value\": \"EXPIRES_AT\"\n      },\n      \"auth_time\": {\n        \"source\": {\n          \"type\": \"EXPRESSION\"\n        },\n        \"value\": \"#objVal = #this.get(\\\"persistentgrant.AUTH_TIME\\\").getObjectValue(), #returnValue = (#objVal instanceof java.lang.Long)?#objVal:@java.lang.Long@parseLong(#objVal.toString()),  #claimName = \\\"auth_time\\\",    #allowedScope = \\\"noscopeallowed\\\",     #isUserInfo = (#this.get(\\\"context.HttpRequest\\\").getObjectValue().getRequestURI().endsWith(\\\"userinfo.openid\\\")),   #requestedClaims = (#isUserInfo)?(#this.get(\\\"persistentgrant.CLAIMS_USERINFO\\\") != null? #this.get(\\\"persistentgrant.CLAIMS_USERINFO\\\").getValuesAsCollection():null):(#this.get(\\\"persistentgrant.CLAIMS_IDTOKEN\\\") != null? #this.get(\\\"persistentgrant.CLAIMS_IDTOKEN\\\").getValuesAsCollection():null),    #approvedScopes = #this.get(\\\"persistentgrant.APPROVED_SCOPES\\\").getValuesAsCollection(), #hasRequiredScope = (#approvedScopes != null && #approvedScopes.contains(#allowedScope)),    (#hasRequiredScope || (#requestedClaims != null && (#requestedClaims.equals(#claimName) || #requestedClaims.contains(#claimName))))? #returnValue : null\"\n      },\n      \"sharing_expires_at\": {\n        \"source\": {\n          \"type\": \"EXPRESSION\"\n        },\n        \"value\": \"#objVal = #this.get(\\\"persistentgrant.SHARING_DURATION_EXPIRES_AT\\\").getObjectValue(),  #longVal = (#objVal instanceof java.lang.Long)?#objVal:@java.lang.Long@parseLong(#objVal.toString()),   #longVal\"\n      }\n    },\n    \"issuanceCriteria\": {\n      \"conditionalCriteria\": [],\n      \"expressionCriteria\": [\n        {\n          \"errorResult\": \"BAD_AUD\",\n          \"expression\": \"#requestString=#this.get(\\\"context.HttpRequest\\\").getObjectValue().getRequestURL().toString(), #url=new java.net.URL(#requestString), #port=(#url.getPort()==-1)?\\\"\\\":\\\":\\\"+#url.getPort(), #expectedAUD=#url.getProtocol() + \\\"://\\\" + #url.getHost() + #port, #this.get(\\\"persistentgrant.ISSUER\\\") == null || #this.get(\\\"persistentgrant.ISSUER\\\").toString().equals(#expectedAUD)\"\n        }\n      ]\n    }\n  },\n  \"includeSriInIdToken\": false,\n  \"includeUserInfoInIdToken\": false,\n  \"includeSHashInIdToken\": true,\n  \"returnIdTokenOnRefreshGrant\": true,\n  \"reissueIdTokenInHybridFlow\": false,\n  \"accessTokenManagerRef\": {\n    \"id\": \"cdrRevocableATM\",\n    \"location\": \"https://3f4f7f2896b8:9999/pf-admin-api/v1/oauth/accessTokenManagers/cdrRevocableATM\"\n  },\n  \"scopeAttributeMappings\": {\n    \"openid\": {\n      \"values\": [\n        \"acr\",\n        \"auth_time\",\n        \"refresh_token_expires_at\",\n        \"sharing_expires_at\"\n      ]\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pf-base-url}}/pf-admin-api/v1/oauth/openIdConnect/policies",
									"host": [
										"{{pf-base-url}}"
									],
									"path": [
										"pf-admin-api",
										"v1",
										"oauth",
										"openIdConnect",
										"policies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure Client Settings",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingFederate",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"clientMetadata\": [\n    {\n      \"parameter\": \"legal_entity_id\",\n      \"description\": \"legal_entity_id\",\n      \"multiValued\": false\n    },\n    {\n      \"parameter\": \"client_uri\",\n      \"description\": \"client_uri\",\n      \"multiValued\": false\n    },\n    {\n      \"parameter\": \"last_software_statement\",\n      \"description\": \"last software statement used for DCR\",\n      \"multiValued\": false\n    },\n    {\n      \"parameter\": \"application_type\",\n      \"description\": \"application_type\",\n      \"multiValued\": false\n    },\n    {\n      \"parameter\": \"client_description\",\n      \"description\": \"client_description\",\n      \"multiValued\": false\n    },\n    {\n      \"parameter\": \"dh_host\",\n      \"description\": \"dh_host\",\n      \"multiValued\": false\n    },\n    {\n      \"parameter\": \"software_id\",\n      \"description\": \"software_id\",\n      \"multiValued\": false\n    },\n    {\n      \"parameter\": \"org_id\",\n      \"description\": \"org_id\",\n      \"multiValued\": false\n    },\n    {\n      \"parameter\": \"revocation_uri\",\n      \"description\": \"revocation_uri\",\n      \"multiValued\": false\n    },\n    {\n      \"parameter\": \"software_roles\",\n      \"description\": \"software_roles\",\n      \"multiValued\": false\n    },\n    {\n      \"parameter\": \"tos_uri\",\n      \"description\": \"tos_uri\",\n      \"multiValued\": false\n    },\n    {\n      \"parameter\": \"org_name\",\n      \"description\": \"org_name\",\n      \"multiValued\": false\n    },\n    {\n      \"parameter\": \"legal_entity_name\",\n      \"description\": \"legal_entity_name\",\n      \"multiValued\": false\n    },\n    {\n      \"parameter\": \"recipient_base_uri\",\n      \"description\": \"recipient_base_uri\",\n      \"multiValued\": false\n    },\n    {\n      \"parameter\": \"policy_uri\",\n      \"description\": \"policy_uri\",\n      \"multiValued\": false\n    }\n  ],\n  \"dynamicClientRegistration\": {\n    \"restrictCommonScopes\": false,\n    \"restrictedCommonScopes\": [],\n    \"allowedExclusiveScopes\": [\n      \"bank:accounts.basic:read\",\n      \"bank:accounts.detail:read\",\n      \"bank:payees:read\",\n      \"bank:regular_payments:read\",\n      \"bank:transactions:read\",\n      \"cdr:registration\",\n      \"common:customer.basic:read\",\n      \"common:customer.detail:read\",\n      \"energy:accounts.basic:read\",\n      \"energy:accounts.concessions:read\",\n      \"energy:accounts.detail:read\",\n      \"energy:accounts.paymentschedule:read\",\n      \"energy:billing:read\",\n      \"energy:electricity.der:read\",\n      \"energy:electricity.servicepoints.basic:read\",\n      \"energy:electricity.servicepoints.detail:read\",\n      \"energy:electricity.usage:read\"\n    ],\n    \"enforceReplayPrevention\": true,\n    \"requireSignedRequests\": true,\n    \"defaultAccessTokenManagerRef\": {\n      \"id\": \"cdrRevocableATM\",\n      \"location\": \"https://3f4f7f2896b8:9999/pf-admin-api/v1/oauth/accessTokenManagers/cdrRevocableATM\"\n    },\n    \"restrictToDefaultAccessTokenManager\": true,\n    \"persistentGrantExpirationType\": \"SERVER_DEFAULT\",\n    \"persistentGrantIdleTimeoutType\": \"SERVER_DEFAULT\",\n    \"clientCertIssuerType\": \"NONE\",\n    \"refreshRolling\": \"SERVER_DEFAULT\",\n    \"refreshTokenRollingIntervalType\": \"SERVER_DEFAULT\",\n    \"policyRefs\": [\n      {\n        \"id\": \"cdrDCRAURegister\",\n        \"location\": \"https://3f4f7f2896b8:9999/pf-admin-api/v1/oauth/clientRegistrationPolicies/cdrDCRAURegister\"\n      }\n    ],\n    \"deviceFlowSettingType\": \"SERVER_DEFAULT\",\n    \"requireProofKeyForCodeExchange\": true,\n    \"cibaRequireSignedRequests\": false,\n    \"cibaPollingInterval\": 3,\n    \"rotateRegistrationAccessToken\": false,\n    \"rotateClientSecret\": false,\n    \"allowClientDelete\": true,\n    \"disableRegistrationAccessTokens\": true,\n    \"oidcPolicy\": {\n        \"policyGroup\": {\n            \"id\": \"cdrOIDCPolicy\",\n            \"location\": \"https://3f4f7f2896b8:9999/pf-admin-api/v1/oauth/openIdConnect/policies/cdrOIDCPolicy\"\n        }\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pf-base-url}}/pf-admin-api/v1/oauth/clientSettings",
									"host": [
										"{{pf-base-url}}"
									],
									"path": [
										"pf-admin-api",
										"v1",
										"oauth",
										"clientSettings"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Configure Default OAuth Clients",
					"item": [
						{
							"name": "Create PingDirectory Client",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingFederate",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"clientId\": \"pingdirectory\",\n  \"enabled\": true,\n  \"redirectUris\": [],\n  \"grantTypes\": [\n    \"ACCESS_TOKEN_VALIDATION\"\n  ],\n  \"name\": \"pingdirectory\",\n  \"refreshRolling\": \"SERVER_DEFAULT\",\n  \"refreshTokenRollingIntervalType\": \"SERVER_DEFAULT\",\n  \"persistentGrantExpirationType\": \"SERVER_DEFAULT\",\n  \"persistentGrantExpirationTime\": 0,\n  \"persistentGrantExpirationTimeUnit\": \"DAYS\",\n  \"persistentGrantIdleTimeoutType\": \"SERVER_DEFAULT\",\n  \"persistentGrantIdleTimeout\": 0,\n  \"persistentGrantIdleTimeoutTimeUnit\": \"DAYS\",\n  \"allowAuthenticationApiInit\": false,\n  \"bypassApprovalPage\": false,\n  \"restrictScopes\": false,\n  \"requirePushedAuthorizationRequests\": false,\n  \"restrictedScopes\": [],\n  \"exclusiveScopes\": [],\n  \"restrictedResponseTypes\": [],\n  \"defaultAccessTokenManagerRef\": {\n    \"id\": \"adminATM\",\n    \"location\": \"https://3f4f7f2896b8:9999/pf-admin-api/v1/oauth/accessTokenManagers/adminATM\"\n  },\n  \"restrictToDefaultAccessTokenManager\": true,\n  \"validateUsingAllEligibleAtms\": true,\n  \"oidcPolicy\": {\n    \"grantAccessSessionRevocationApi\": false,\n    \"grantAccessSessionSessionManagementApi\": false,\n    \"pingAccessLogoutCapable\": false,\n    \"pairwiseIdentifierUserType\": false\n  },\n  \"clientAuth\": {\n    \"type\": \"SECRET\",\n    \"secret\": \"{{pf-oauth-client-pingdirectory-secret}}\"\n  },\n  \"deviceFlowSettingType\": \"SERVER_DEFAULT\",\n  \"requireProofKeyForCodeExchange\": false,\n  \"requireSignedRequests\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pf-base-url}}/pf-admin-api/v1/oauth/clients",
									"host": [
										"{{pf-base-url}}"
									],
									"path": [
										"pf-admin-api",
										"v1",
										"oauth",
										"clients"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create PingAccess Validator Client",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingFederate",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"clientId\": \"pingaccess_validator\",\n  \"enabled\": true,\n  \"redirectUris\": [],\n  \"grantTypes\": [\n    \"ACCESS_TOKEN_VALIDATION\"\n  ],\n  \"name\": \"PingAccess Validator\",\n  \"refreshRolling\": \"SERVER_DEFAULT\",\n  \"refreshTokenRollingIntervalType\": \"SERVER_DEFAULT\",\n  \"persistentGrantExpirationType\": \"SERVER_DEFAULT\",\n  \"persistentGrantExpirationTime\": 0,\n  \"persistentGrantExpirationTimeUnit\": \"DAYS\",\n  \"persistentGrantIdleTimeoutType\": \"SERVER_DEFAULT\",\n  \"persistentGrantIdleTimeout\": 0,\n  \"persistentGrantIdleTimeoutTimeUnit\": \"DAYS\",\n  \"allowAuthenticationApiInit\": false,\n  \"bypassApprovalPage\": false,\n  \"restrictScopes\": false,\n  \"requirePushedAuthorizationRequests\": false,\n  \"restrictedScopes\": [],\n  \"exclusiveScopes\": [],\n  \"restrictedResponseTypes\": [],\n  \"defaultAccessTokenManagerRef\": {\n    \"id\": \"cdrBaselineJWTATM\",\n    \"location\": \"https://3f4f7f2896b8:9999/pf-admin-api/v1/oauth/accessTokenManagers/cdrBaselineJWTATM\"\n  },\n  \"restrictToDefaultAccessTokenManager\": false,\n  \"validateUsingAllEligibleAtms\": true,\n  \"oidcPolicy\": {\n    \"grantAccessSessionRevocationApi\": false,\n    \"grantAccessSessionSessionManagementApi\": false,\n    \"pingAccessLogoutCapable\": false,\n    \"pairwiseIdentifierUserType\": false\n  },\n  \"clientAuth\": {\n    \"type\": \"SECRET\",\n    \"secret\": \"{{pf-oauth-client-pingaccessvalidator-secret}}\"\n  },\n  \"deviceFlowSettingType\": \"SERVER_DEFAULT\",\n  \"requireProofKeyForCodeExchange\": false,\n  \"requireSignedRequests\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pf-base-url}}/pf-admin-api/v1/oauth/clients",
									"host": [
										"{{pf-base-url}}"
									],
									"path": [
										"pf-admin-api",
										"v1",
										"oauth",
										"clients"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create PingAccess Rule Client",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingFederate",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"clientId\": \"pingaccess-cc\",\n  \"enabled\": true,\n  \"redirectUris\": [],\n  \"grantTypes\": [\n    \"CLIENT_CREDENTIALS\"\n  ],\n  \"name\": \"pingaccess-cc\",\n  \"refreshRolling\": \"SERVER_DEFAULT\",\n  \"refreshTokenRollingIntervalType\": \"SERVER_DEFAULT\",\n  \"persistentGrantExpirationType\": \"SERVER_DEFAULT\",\n  \"persistentGrantExpirationTime\": 0,\n  \"persistentGrantExpirationTimeUnit\": \"DAYS\",\n  \"persistentGrantIdleTimeoutType\": \"SERVER_DEFAULT\",\n  \"persistentGrantIdleTimeout\": 0,\n  \"persistentGrantIdleTimeoutTimeUnit\": \"DAYS\",\n  \"allowAuthenticationApiInit\": false,\n  \"bypassApprovalPage\": false,\n  \"restrictScopes\": false,\n  \"requirePushedAuthorizationRequests\": false,\n  \"restrictedScopes\": [],\n  \"exclusiveScopes\": [\n    \"adh-cache-read\",\n    \"consent_admin\"\n  ],\n  \"restrictedResponseTypes\": [],\n  \"defaultAccessTokenManagerRef\": {\n    \"id\": \"adminATM\",\n    \"location\": \"https://3f4f7f2896b8:9999/pf-admin-api/v1/oauth/accessTokenManagers/adminATM\"\n  },\n  \"restrictToDefaultAccessTokenManager\": true,\n  \"validateUsingAllEligibleAtms\": false,\n  \"oidcPolicy\": {\n    \"grantAccessSessionRevocationApi\": false,\n    \"grantAccessSessionSessionManagementApi\": false,\n    \"pingAccessLogoutCapable\": false,\n    \"pairwiseIdentifierUserType\": false\n  },\n  \"clientAuth\": {\n    \"type\": \"SECRET\",\n    \"secret\": \"{{pf-oauth-client-pingaccess-secret}}\"\n  },\n  \"deviceFlowSettingType\": \"SERVER_DEFAULT\",\n  \"requireProofKeyForCodeExchange\": false,\n  \"requireSignedRequests\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pf-base-url}}/pf-admin-api/v1/oauth/clients",
									"host": [
										"{{pf-base-url}}"
									],
									"path": [
										"pf-admin-api",
										"v1",
										"oauth",
										"clients"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{pf-api-admin-password}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{pf-api-admin-user}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "PingAccess",
			"item": [
				{
					"name": "Agree to terms",
					"item": [
						{
							"name": "Administrator: Agree to terms",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "2Access",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Administrator",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"Administrator\",\n    \"email\": null,\n    \"slaAccepted\": true,\n    \"firstLogin\": true,\n    \"showTutorial\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/users/1",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"users",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Administrator: Set Password",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "2Access",
											"type": "string"
										},
										{
											"key": "username",
											"value": "Administrator",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currentPassword\": \"2Access\",\n    \"newPassword\": \"{{pa-api-admin-password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/users/1/password",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"users",
										"1",
										"password"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Global Configuration",
					"item": [
						{
							"name": "Configure Token Provider",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"loadBalancingStrategyId\": 0,\n    \"trustedCertificateGroupId\": 2,\n    \"useSlo\": false,\n    \"auditLevel\": \"OFF\",\n    \"useProxy\": false,\n    \"secure\": true,\n    \"targets\": [\"{{pa-local-pingfederate-host}}\"],\n    \"expectedHostname\": \"\",\n    \"backChannelBasePath\": null,\n    \"application\": null,\n    \"basePath\": null,\n    \"port\": 9031,\n    \"skipHostnameVerification\": true,\n    \"backChannelSecure\": true,\n    \"host\": \"pingfederate\",\n    \"availabilityProfileId\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/pingfederate",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"pingfederate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure Token AT Validator",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"clientId\": \"pingaccess_validator\",\n    \"tokenTimeToLiveSeconds\": -1,\n    \"subjectAttributeName\": \"sub\",\n    \"name\": \"PingFederate\",\n    \"clientCredentials\": {\n        \"clientId\": \"pingaccess_validator\",\n        \"credentialsType\": \"SECRET\",\n        \"clientSecret\": {\"value\": \"{{pf-oauth-client-pingaccessvalidator-secret}}\"},\n        \"keyPairId\": 0\n    },\n    \"targets\": [\"{{pa-local-pingfederate-host}}\"],\n    \"clientSecret\": {\"value\": \"{{pf-oauth-client-pingaccessvalidator-secret}}\"},\n    \"cacheTokens\": false,\n    \"accessValidatorId\": 1,\n    \"sendAudience\": true,\n    \"useTokenIntrospection\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/pingfederate/accessTokens",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"pingfederate",
										"accessTokens"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Security (only required if PA is terminating https)",
					"item": [
						{
							"name": "Import ACCC Trusted CA Cert",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"paTrustedCACertID\", response.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"fileData\": \"{{cdrACCCTrustedCA}}\",\n  \"alias\": \"cdr_trustcert\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/certificates",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"certificates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create MTLS Trusted CA Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"paTrustedCACertGroupID\", response.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"ACCC MTLS Certificate Group\",\n    \"useJavaTrustStore\": false,\n    \"systemGroup\": false,\n    \"ignoreAllCertificateErrors\": false,\n    \"skipCertificateDateCheck\": true,\n    \"revocationChecking\": {\n    \"crlChecking\": false,\n    \"ocsp\": false,\n    \"denyRevocationStatusUnknown\": false,\n    \"supportDisorderedChain\": false,\n    \"skipTrustAnchors\": false\n    },\n    \"certIds\": [\n        {{paTrustedCACertID}}\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/trustedCertificateGroups",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"trustedCertificateGroups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Import public https keypair",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"paPublicHTTPSKeypairID\", response.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"{{pa-public-https-keypair-password}}\",\n    \"fileData\": \"{{pa-public-https-keypair-p12b64}}\",\n    \"alias\": \"https-cdr-public\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/keyPairs/import",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"keyPairs",
										"import"
									]
								}
							},
							"response": []
						},
						{
							"name": "Import confidential https keypair",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"paConfidentialHTTPSKeypairID\", response.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"{{pa-confidential-https-keypair-password}}\",\n    \"fileData\": \"{{pa-confidential-https-keypair-p12b64}}\",\n    \"alias\": \"https-cdr-confidential\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/keyPairs/import",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"keyPairs",
										"import"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Virtual Hosts",
					"item": [
						{
							"name": "Create public VH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"paVirtualHostPublic\", response.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"host\": \"{{cdrIssuerHost}}\",\n    \"port\": {{cdrIssuerPort}},\n    \"agentResourceCacheTTL\": 900,\n    \"keyPairId\": 0,\n    \"trustedCertificateGroupId\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/virtualhosts",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"virtualhosts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create confidential VH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"paVirtualHostConfidential\", response.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.environment.get(\"paTrustedCACertGroupID\"))",
											"    pm.environment.set(\"paTrustedCACertGroupIDInstance\", pm.environment.get(\"paTrustedCACertGroupID\"));",
											"else",
											"    pm.environment.set(\"paTrustedCACertGroupIDInstance\", 0);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"host\": \"{{cdrIssuerMTLSHost}}\",\n    \"port\": {{cdrIssuerPort}},\n    \"agentResourceCacheTTL\": 900,\n    \"keyPairId\": 0,\n    \"trustedCertificateGroupId\": {{paTrustedCACertGroupIDInstance}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/virtualhosts",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"virtualhosts"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Sites and Third Party Services",
					"item": [
						{
							"name": "Create PingFederate Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"paSitePingFederate\", response.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"pingfederate-tls\",\n    \"targets\": [\n        \"{{pa-local-pingfederate-host}}\"\n    ],\n    \"secure\": true,\n    \"trustedCertificateGroupId\": 2,\n    \"sendPaCookie\": true,\n    \"useTargetHostHeader\": false,\n    \"keepAliveTimeout\": 0,\n    \"maxConnections\": -1,\n    \"maxWebSocketConnections\": -1,\n    \"siteAuthenticatorIds\": [\n    ],\n    \"skipHostnameVerification\": true,\n    \"expectedHostname\": null,\n    \"availabilityProfileId\": 1,\n    \"loadBalancingStrategyId\": 0,\n    \"useProxy\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/sites",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"sites"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create PingDirectoryWeb Third Party",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"paThirdPartyPingDirectoryID\", response.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"targets\": [\n        \"{{pa-local-pingdirectory-host}}\"\n    ],\n    \"name\": \"PingDirectoryWeb1\",\n    \"secure\": true,\n    \"trustedCertificateGroupId\": 2,\n    \"maxConnections\": -1,\n    \"skipHostnameVerification\": true,\n    \"expectedHostname\": null,\n    \"availabilityProfileId\": 1,\n    \"loadBalancingStrategyId\": 0,\n    \"useProxy\": false,\n    \"hostValue\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/thirdPartyServices",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"thirdPartyServices"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Rejection Handlers",
					"item": [
						{
							"name": "Create AccessDenied-InvalidHoK",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"paRejectionHandlerInvalidHoK\", response.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"className\": \"com.pingidentity.pa.policy.rejectionhandler.errortemplate.ErrorTemplateRejectionHandlerPlugin\",\n    \"name\": \"AccessDenied-InvalidHoK\",\n    \"configuration\": {\n        \"responseCode\": 403,\n        \"templateFile\": \"oauth.error.invalidhok.json\",\n        \"contentType\": \"JSON\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/rejectionHandlers",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"rejectionHandlers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create AccessDenied-RequireMTLS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"paRejectionHandlerRequireMTLS\", response.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"className\": \"com.pingidentity.pa.policy.rejectionhandler.errortemplate.ErrorTemplateRejectionHandlerPlugin\",\n    \"name\": \"AccessDenied-RequireMTLS\",\n    \"configuration\": {\n        \"responseCode\": 400,\n        \"templateFile\": \"oauth.error.mtls.json\",\n        \"contentType\": \"JSON\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/rejectionHandlers",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"rejectionHandlers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Introspect-EnforceFail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"paRejectionHandlerIntrospectEnforceFail\", response.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"className\": \"com.pingidentity.pa.policy.rejectionhandler.errortemplate.ErrorTemplateRejectionHandlerPlugin\",\n    \"name\": \"Introspect-EnforceFail\",\n    \"configuration\": {\n        \"responseCode\": 200,\n        \"templateFile\": \"introspect.fail.json\",\n        \"contentType\": \"JSON\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/rejectionHandlers",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"rejectionHandlers"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Rules",
					"item": [
						{
							"name": "Create CDR Access Token Decrypter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"paRuleCDRAccessTokenDecrypter\", response.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"className\": \"com.pingidentity.ps.cdr.pa.CDRAccessTokenDecryptionRule\",\n    \"name\": \"CDR Access Token Decrypter\",\n    \"supportedDestinations\": [\n        \"Site\",\n        \"Agent\"\n    ],\n    \"configuration\": {\n        \"accessTokenEncryptionKeys\": {\n            \"value\": \"{{cdrAccessTokenEncryptionKey}}\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/rules",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create CDR AU - Refresh Token Processor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"paRuleCDRRefreshTokenProcessor\", response.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"className\": \"com.pingidentity.ps.cdr.pa.CDRRefreshTokenProcessor\",\n    \"name\": \"CDR AU - Refresh Token Processor\",\n    \"supportedDestinations\": [\n        \"Site\",\n        \"Agent\"\n    ],\n    \"configuration\": {\n        \"issuer\": \"anybank\",\n        \"encryptionKey\": {\n            \"value\": \"{{cdrRefreshTokenEncryptionKey}}\"\n        },\n        \"accessTokenEncryptionKeys\": {\n            \"value\": \"{{cdrAccessTokenEncryptionKey}}\"\n        },\n        \"retainAttributeList\": [\n            \"cdr_arrangement_id\",\n            \"scope\"\n        ],\n        \"tokenEndpoint\": \"/as/token.oauth2\",\n        \"introspectionEndpoint\": \"/as/introspect.oauth2\",\n        \"revocationEndpoint\": \"/as/revoke_token.oauth2\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/rules",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create CDR Validate Arrangement",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"paRuleCDRValidateArrangement\", response.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"className\": \"com.pingidentity.ps.cdr.pa.CDRValidateArrangementRule\",\n    \"name\": \"CDR Validate Arrangement\",\n    \"supportedDestinations\": [\n        \"Site\",\n        \"Agent\"\n    ],\n    \"configuration\": {\n        \"clientId\": \"pingaccess-cc\",\n        \"clientSecret\": {\n            \"value\": \"{{pf-oauth-client-pingaccess-secret}}\"\n        },\n        \"clientScope\": \"consent_admin\",\n        \"thirdPartySCIMService\": \"{{paThirdPartyPingDirectoryID}}\",\n        \"errorResponseCode\": 400,\n        \"errorResponseStatusMsg\": \"Forbidden\",\n        \"errorResponseTemplateFile\": \"oauth.error.json\",\n        \"errorResponseContentType\": \"application/json; charset=UTF-8\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/rules",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create CDR Validate Status Rule - API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"paRuleCDRValidateStatusAPI\", response.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"className\": \"com.pingidentity.ps.cdr.pa.CDRValidateStatusRule\",\n    \"name\": \"CDR Validate Status Rule - API\",\n    \"supportedDestinations\": [\n    \"Site\",\n    \"Agent\"\n    ],\n    \"configuration\": {\n        \"refreshInterval\": 0,\n        \"clientIdPrefix\": \"dcr-\",\n        \"clientId\": \"pingaccess-cc\",\n        \"clientSecret\": {\n            \"value\": \"{{pf-oauth-client-pingaccess-secret}}\"\n        },\n        \"clientScope\": \"adh-cache-read\",\n        \"oauthTokenEndpoint\": \"https://{{pa-local-pingfederate-host}}/as/token.oauth2\",\n        \"scimEndpoint\": \"https://{{pa-local-pingdirectory-host}}/scim/v2/adh-cache\",\n        \"scimFilter\": \"endpoint-name eq \\\"GetSoftwareProductsStatus\\\"\",\n        \"ignoreSSL\": true,\n        \"managedEndpoints\": [\n            \"/register\",\n            \"/cds-au\",\n            \"/as/clients.oauth2\",\n            \"/as/par.oauth2\",\n            \"/as/introspect.oauth2\",\n            \"/idp/userinfo.openid\",\n            \"/as/token.oauth2\"\n        ],\n        \"errorResponseCode\": 403,\n        \"errorResponseStatusMsg\": \"Forbidden\",\n        \"errorResponseTemplateFile\": \"general.error.json\",\n        \"errorResponseContentType\": \"application/json; charset=UTF-8\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/rules",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create CDR Validate Status Rule - Web",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"paRuleCDRValidateStatusWeb\", response.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"className\": \"com.pingidentity.ps.cdr.pa.CDRValidateStatusRule\",\n    \"name\": \"CDR Validate Status Rule - Web\",\n    \"supportedDestinations\": [\n    \"Site\",\n    \"Agent\"\n    ],\n    \"configuration\": {\n        \"refreshInterval\": 10,\n        \"clientIdPrefix\": \"dcr-\",\n        \"clientId\": \"pingaccess-cc\",\n        \"clientSecret\": {\n            \"value\": \"{{pf-oauth-client-pingaccess-secret}}\"\n        },\n        \"clientScope\": \"adh-cache-read\",\n        \"oauthTokenEndpoint\": \"https://{{pa-local-pingfederate-host}}/as/token.oauth2\",\n        \"scimEndpoint\": \"https://{{pa-local-pingdirectory-host}}/scim/v2/adh-cache\",\n        \"scimFilter\": \"endpoint-name eq \\\"GetSoftwareProductsStatus\\\"\",\n        \"ignoreSSL\": true,\n        \"managedEndpoints\": [\n            \"/as/authorization.oauth2\"\n        ],\n        \"errorResponseCode\": 400,\n        \"errorResponseStatusMsg\": \"Forbidden\",\n        \"errorResponseTemplateFile\": \"policy.error.page.template.html\",\n        \"errorResponseContentType\": \"text/html; charset=UTF-8\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/rules",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create MTLS-HoK-SendThumbprint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"paRuleCDRHoKSendThumbprint\", response.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"className\": \"com.pingidentity.pa.policy.GroovyPolicyInterceptor\",\n  \"name\": \"MTLS-HoK-SendThumbprint\",\n  \"supportedDestinations\": [\n    \"Site\",\n    \"Agent\"\n  ],\n  \"configuration\": {\n    \"rejectionHandlingEnabled\": true,\n    \"rejectionHandler\": \"1\",\n    \"errorResponseCode\": 403,\n    \"errorResponseStatusMsg\": \"Forbidden\",\n    \"errorResponseTemplateFile\": \"policy.error.page.template.html\",\n    \"errorResponseContentType\": \"text/html; charset=UTF-8\",\n    \"groovyScript\": \"import javax.xml.bind.DatatypeConverter;\\nimport java.security.MessageDigest;\\nimport java.security.NoSuchAlgorithmException;\\nimport java.security.cert.CertificateEncodingException;\\nimport java.security.cert.X509Certificate;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.security.cert.CertificateException;\\nimport java.security.cert.CertificateFactory;\\nimport java.security.cert.X509Certificate;\\nimport java.util.Base64;\\n\\nimport java.io.UnsupportedEncodingException;\\nimport java.net.URLDecoder;\\n\\n// START CONFIGURATION\\n\\ndef BEGIN_CERT = \\\"-----BEGIN CERTIFICATE-----\\\";\\ndef END_CERT = \\\"-----END CERTIFICATE-----\\\";\\n\\ndef HEADER_INCOMINGCERTIFICATE = \\\"X-Certificate\\\";\\ndef HEADER_OUTGOINGCERTIFICATE = \\\"X-PFCertificate\\\";\\ndef HEADER_CERTIFICATETHUMBPRINT = \\\"X-CertificateThumbprint\\\";\\ndef IS_PROXY_TERMINATED = {{pa-proxy-terminated}};\\ndef IS_CERT_HEADER_URL_ENCODED = {{pa-cert-header-encoded}};\\n\\n// END CONFIGURATION\\n\\nif(exc?.response)\\n{\\n  addResponseHeader(exc?.response, \\\"X-VALIDATED-CLIENTAUTH\\\", \\\"TRUE\\\");\\n}\\nelse\\n{\\n  exc?.request?.header?.removeFields(HEADER_CERTIFICATETHUMBPRINT);\\n  def certChain = getCertificate(exc, IS_PROXY_TERMINATED, HEADER_INCOMINGCERTIFICATE, HEADER_OUTGOINGCERTIFICATE, BEGIN_CERT, END_CERT, IS_CERT_HEADER_URL_ENCODED);\\n\\n  if(certChain)\\n    exc?.request?.header?.add(HEADER_CERTIFICATETHUMBPRINT, getThumbprint(certChain));\\n}\\n\\npass();\\n\\nvoid addResponseHeader(def response, def headerName, def headerValue)\\n{\\n  if(response)\\n    response?.header?.add(headerName, headerValue);\\n}\\n\\nString getThumbprint(def certChain)\\n        throws NoSuchAlgorithmException, CertificateEncodingException {\\n\\n    if(certChain == null)\\n          return null;\\n\\n    def cert = certChain;\\n\\n    MessageDigest md = MessageDigest.getInstance(\\\"SHA-256\\\");\\n    byte[] der = cert.getEncoded();\\n    md.update(der);\\n    byte[] digest = md.digest();\\n    String digestHex = DatatypeConverter.printHexBinary(digest);\\n    return digestHex.toLowerCase();\\n\\n}\\n\\nX509Certificate getCertificate(def exc, def isTerminatedProxy, def headerName, def outgoingHeaderName, def beginCert, def endCert, def isCertHeaderUrlEncoded)\\n{\\n  X509Certificate certChain = null;\\n  if(isTerminatedProxy)\\n  {\\n    def certificateFromHeader = exc?.request?.header?.getFirstValue(headerName);\\n    if(certificateFromHeader)\\n    {\\n      //before decoding we need to get rod off the prefix and suffix\\n      String cleanStr = certificateFromHeader.replaceAll(beginCert, \\\"\\\").replaceAll(endCert, \\\"\\\").replaceAll(\\\"[\\\\\\\\n\\\\\\\\t ]\\\", \\\"\\\");\\n\\n      if(isCertHeaderUrlEncoded)\\n      {\\n        try {\\n          cleanStr = URLDecoder.decode(cleanStr, \\\"UTF-8\\\");\\n        } catch (UnsupportedEncodingException e) {\\n          exc?.log.error(\\\"Unable to url decode header\\\");\\n        }\\n      }\\n\\n      exc?.request?.header?.removeFields(headerName);\\n      exc?.request?.header?.removeFields(outgoingHeaderName);\\n      exc?.request?.header?.add(outgoingHeaderName, cleanStr);\\n\\n      certChain = parseCertificate(cleanStr);\\n    }\\n  }\\n  else if(exc?.sslData?.clientCertificateChain && !exc?.sslData?.clientCertificateChain.isEmpty())\\n  \\tcertChain = exc?.sslData?.clientCertificateChain.get(0);\\n\\n  return certChain;\\n}\\n\\nX509Certificate parseCertificate(String cleanStr) {\\n\\n  byte [] decoded = Base64.getDecoder().decode(cleanStr);\\n\\n  try {\\n    return (X509Certificate) CertificateFactory.getInstance(\\\"X.509\\\").generateCertificate(new ByteArrayInputStream(decoded));\\n  } catch (CertificateException e) {\\n\\texc?.log?.warn(\\\"Bad certificate provided: \\\" + certStr);\\n    return null;\\n  }\\n}\\n\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/rules",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create MTLS-HoK-VerifyAccessToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"paRuleCDRHoKVerifyAccessToken\", response.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"className\": \"com.pingidentity.pa.policy.GroovyPolicyInterceptor\",\n  \"name\": \"MTLS-HoK-VerifyAccessToken\",\n  \"supportedDestinations\": [\n    \"Site\",\n    \"Agent\"\n  ],\n  \"configuration\": {\n    \"rejectionHandlingEnabled\": true,\n    \"rejectionHandler\": \"{{paRejectionHandlerInvalidHoK}}\",\n    \"errorResponseCode\": 403,\n    \"errorResponseStatusMsg\": \"Forbidden\",\n    \"errorResponseTemplateFile\": \"policy.error.page.template.html\",\n    \"errorResponseContentType\": \"text/html; charset=UTF-8\",\n    \"groovyScript\": \"import javax.xml.bind.DatatypeConverter;\\nimport java.security.MessageDigest;\\nimport java.security.NoSuchAlgorithmException;\\nimport java.security.cert.CertificateEncodingException;\\nimport java.security.cert.X509Certificate;\\nimport java.util.Base64;\\nimport com.fasterxml.jackson.databind.JsonNode;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.security.cert.CertificateException;\\nimport java.security.cert.CertificateFactory;\\n\\nimport java.io.UnsupportedEncodingException;\\nimport java.net.URLDecoder;\\n\\n// START CONFIGURATION\\n\\ndef BEGIN_CERT = \\\"-----BEGIN CERTIFICATE-----\\\";\\ndef END_CERT = \\\"-----END CERTIFICATE-----\\\";\\n\\ndef HEADER_INCOMINGCERTIFICATE = \\\"X-Certificate\\\";\\ndef HEADER_OUTGOINGCERTIFICATE = \\\"X-PFCertificate\\\";\\ndef IS_PROXY_TERMINATED = {{pa-proxy-terminated}};\\ndef IS_CERT_HEADER_URL_ENCODED = {{pa-cert-header-encoded}};\\n\\n// END CONFIGURATION\\n\\ndef certChain = getCertificate(exc, IS_PROXY_TERMINATED, HEADER_INCOMINGCERTIFICATE, HEADER_OUTGOINGCERTIFICATE, BEGIN_CERT, END_CERT, IS_CERT_HEADER_URL_ENCODED);\\n\\ndef authHeader = exc?.request?.header?.getValues(\\\"Authorization\\\");\\n\\nif(exc?.response)\\n{\\n  addResponseHeader(exc?.response, \\\"X-VALIDATED-CLIENTAUTH\\\", \\\"TRUE\\\");\\n  pass();\\n}\\nelse if(certChain)\\n{\\n  if(authHeader && authHeader?.size() == 1)\\n  {\\n    def token = exc?.request?.header?.getFirstValue(\\\"Authorization\\\");\\n\\n    if(validateThumbprint(token, certChain))\\n      pass();\\n    else\\n      fail();\\n  }\\n  else\\n    fail();\\n}\\nelse\\n\\tpass();\\n\\nboolean validateThumbprint(def token, def cert)\\n{\\n  if(token != null && token.startsWith(\\\"Bearer \\\"))\\n  {\\n    def accessToken = token.replace(\\\"Bearer \\\", \\\"\\\");\\n    def cnfValue = getAccessTokenClaim(accessToken, \\\"cnf.x5t#S256\\\");\\n\\n    if(cnfValue == null || cnfValue.equals(\\\"\\\"))\\n    \\treturn true;\\n\\n\\tdef expectedThumbprint = getThumbprint(cert);\\n\\n    if(expectedThumbprint != null && cnfValue.equals(expectedThumbprint))\\n      return true;\\n    else\\n      return false;\\n  }\\n\\n  return true;\\n}\\n\\nvoid addResponseHeader(def response, def headerName, def headerValue)\\n{\\n  if(response)\\n    response?.header?.add(headerName, headerValue);\\n}\\n\\nString getThumbprint(def certChain)\\n        throws NoSuchAlgorithmException, CertificateEncodingException {\\n\\n    if(certChain == null)\\n          return null;\\n\\n    def cert = certChain;\\n\\n    MessageDigest md = MessageDigest.getInstance(\\\"SHA-256\\\");\\n    byte[] der = cert.getEncoded();\\n    md.update(der);\\n    byte[] digest = md.digest();\\n    String digestHex = DatatypeConverter.printHexBinary(digest);\\n    return digestHex.toLowerCase();\\n\\n}\\n\\nString getAccessTokenClaim(String accessToken, String claim)\\n{\\n    def accessTokenSplit = accessToken.split(\\\"\\\\\\\\.\\\");\\n    def accessTokenBodyEncoded = accessTokenSplit[1];\\n    def accessTokenBody = new String(Base64.getDecoder().decode(accessTokenBodyEncoded));\\n\\n    return getClaimValue(accessTokenBody, claim);\\n}\\n\\nString getClaimValue(String responseStr, String jsonPath)\\n{\\n    ObjectMapper mapper = new ObjectMapper();\\n    JsonNode resultObject = mapper.readTree(responseStr);\\n\\n    String [] splitJsonPath = jsonPath.split(\\\"\\\\\\\\.\\\");\\n\\n    for(String path : splitJsonPath)\\n    {\\n        resultObject = resultObject.findPath(path);\\n    }\\n\\n    return resultObject.textValue();\\n\\n}\\n\\nX509Certificate getCertificate(def exc, def isTerminatedProxy, def headerName, def outgoingHeaderName, def beginCert, def endCert, def isCertHeaderUrlEncoded)\\n{\\n  X509Certificate certChain = null;\\n  if(isTerminatedProxy)\\n  {\\n    def certificateFromHeader = exc?.request?.header?.getFirstValue(headerName);\\n    if(certificateFromHeader)\\n    {\\n      //before decoding we need to get rod off the prefix and suffix\\n      String cleanStr = certificateFromHeader.replaceAll(beginCert, \\\"\\\").replaceAll(endCert, \\\"\\\").replaceAll(\\\"[\\\\\\\\n\\\\\\\\t ]\\\", \\\"\\\");\\n\\n      if(isCertHeaderUrlEncoded)\\n      {\\n        try {\\n          cleanStr = URLDecoder.decode(cleanStr, \\\"UTF-8\\\");\\n        } catch (UnsupportedEncodingException e) {\\n          exc?.log.error(\\\"Unable to url decode header\\\");\\n        }\\n      }\\n\\n      exc?.request?.header?.removeFields(headerName);\\n      exc?.request?.header?.removeFields(outgoingHeaderName);\\n      exc?.request?.header?.add(outgoingHeaderName, cleanStr);\\n\\n      certChain = parseCertificate(cleanStr);\\n    }\\n  }\\n  else if(exc?.sslData?.clientCertificateChain && !exc?.sslData?.clientCertificateChain.isEmpty())\\n  \\tcertChain = exc?.sslData?.clientCertificateChain.get(0);\\n\\n  return certChain;\\n}\\n\\nX509Certificate parseCertificate(String cleanStr) {\\n\\n  byte [] decoded = Base64.getDecoder().decode(cleanStr);\\n\\n  try {\\n    return (X509Certificate) CertificateFactory.getInstance(\\\"X.509\\\").generateCertificate(new ByteArrayInputStream(decoded));\\n  } catch (CertificateException e) {\\n\\texc?.log?.warn(\\\"Bad certificate provided: \\\" + certStr);\\n    return null;\\n  }\\n}\\n\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/rules",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create MTLS-RequireClientAuth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"paRuleCDRMTLSRequireClientAuth\", response.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"className\": \"com.pingidentity.pa.policy.GroovyPolicyInterceptor\",\n  \"name\": \"MTLS-RequireClientAuth\",\n  \"supportedDestinations\": [\n    \"Site\",\n    \"Agent\"\n  ],\n  \"configuration\": {\n    \"rejectionHandlingEnabled\": true,\n    \"rejectionHandler\": \"{{paRejectionHandlerRequireMTLS}}\",\n    \"errorResponseCode\": 403,\n    \"errorResponseStatusMsg\": \"Forbidden\",\n    \"errorResponseTemplateFile\": \"policy.error.page.template.html\",\n    \"errorResponseContentType\": \"text/html; charset=UTF-8\",\n    \"groovyScript\": \"import java.util.Base64\\nimport com.fasterxml.jackson.databind.JsonNode\\nimport com.fasterxml.jackson.databind.ObjectMapper\\nimport java.security.cert.CertificateEncodingException;\\nimport java.security.cert.X509Certificate;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.security.cert.CertificateException;\\nimport java.security.cert.CertificateFactory;\\nimport java.security.cert.X509Certificate;\\n\\nimport java.io.UnsupportedEncodingException;\\nimport java.net.URLDecoder;\\n\\n// START CONFIGURATION\\n\\ndef BEGIN_CERT = \\\"-----BEGIN CERTIFICATE-----\\\";\\ndef END_CERT = \\\"-----END CERTIFICATE-----\\\";\\n\\ndef HEADER_INCOMINGCERTIFICATE = \\\"X-Certificate\\\";\\ndef HEADER_OUTGOINGCERTIFICATE = \\\"X-PFCertificate\\\";\\ndef IS_PROXY_TERMINATED = {{pa-proxy-terminated}};\\ndef IS_CERT_HEADER_URL_ENCODED = {{pa-cert-header-encoded}};\\n\\n// END CONFIGURATION\\n\\ndef host = exc?.request?.header?.host;\\n\\nif(host.equals(\\\"pingaccess:3000\\\"))\\n{\\n  pass();\\n}\\nelse if(exc?.response)\\n{\\n  addResponseHeader(exc?.response, \\\"X-VALIDATED-CLIENTAUTH\\\", \\\"TRUE\\\");\\n  pass();\\n}\\nelse\\n{\\n  def CDR_CLIENTID_PREFIX = \\\"dcr-\\\";\\n\\n  def token = exc?.request?.header?.getFirstValue(\\\"Authorization\\\");\\n  def isPass = true;\\n\\n  def clientId = null;\\n\\n  if(token)\\n  \\tclientId = getAccessTokenClaim(token, \\\"client_id\\\");\\n\\n  if(clientId == null)\\n  {\\n    def clientAssertion = getRequestParameter(exc?.request, \\\"client_assertion\\\");\\n    if(clientAssertion != null)\\n    \\tclientId = getAccessTokenClaim(clientAssertion, \\\"sub\\\");\\n  }\\n\\n  if(clientId == null)\\n    clientId = getRequestParameter(exc?.request, \\\"client_id\\\");\\n\\n  if(clientId == null)\\n    clientId = \\\"\\\";\\n\\n  if(clientId.startsWith(CDR_CLIENTID_PREFIX))\\n  {\\n    def certChain = getCertificate(exc, IS_PROXY_TERMINATED, HEADER_INCOMINGCERTIFICATE, HEADER_OUTGOINGCERTIFICATE, BEGIN_CERT, END_CERT, IS_CERT_HEADER_URL_ENCODED);\\n    if(!certChain)\\n      isPass = false;\\n  }\\n\\n  if(isPass)\\n    pass();\\n  else\\n    fail();\\n}\\n\\nvoid addResponseHeader(def response, def headerName, def headerValue)\\n{\\n  if(response)\\n    response?.header?.add(headerName, headerValue);\\n}\\n\\nString getRequestParameter(def request, def paramName)\\n{\\n  def postParams = request?.getPostParams();\\n  if(postParams == null)\\n    return null;\\n\\n  if(!postParams.containsKey(paramName))\\n    return null;\\n\\n  return postParams.get(paramName)[0];\\n}\\n\\nString getAccessTokenClaim(String accessToken, String claim)\\n{\\n    def accessTokenSplit = accessToken.split(\\\"\\\\\\\\.\\\");\\n    if(accessTokenSplit.length != 3)\\n      return null;\\n\\n    def accessTokenBodyEncoded = accessTokenSplit[1];\\n    def accessTokenBody = new String(Base64.getDecoder().decode(accessTokenBodyEncoded));\\n\\n    return getClaimValue(accessTokenBody, claim);\\n}\\n\\nString getClaimValue(String responseStr, String jsonPath)\\n{\\n    ObjectMapper mapper = new ObjectMapper();\\n    JsonNode resultObject = mapper.readTree(responseStr);\\n\\n    String [] splitJsonPath = jsonPath.split(\\\"\\\\\\\\.\\\");\\n\\n    for(String path : splitJsonPath)\\n    {\\n        resultObject = resultObject.findPath(path);\\n    }\\n\\n    return resultObject.textValue();\\n\\n}\\n\\nX509Certificate getCertificate(def exc, def isTerminatedProxy, def headerName, def outgoingHeaderName, def beginCert, def endCert, def isCertHeaderUrlEncoded)\\n{\\n  X509Certificate certChain = null;\\n  if(isTerminatedProxy)\\n  {\\n    def certificateFromHeader = exc?.request?.header?.getFirstValue(headerName);\\n    if(certificateFromHeader)\\n    {\\n      //before decoding we need to get rod off the prefix and suffix\\n      String cleanStr = certificateFromHeader.replaceAll(beginCert, \\\"\\\").replaceAll(endCert, \\\"\\\").replaceAll(\\\"[\\\\\\\\n\\\\\\\\t ]\\\", \\\"\\\");\\n\\n      if(isCertHeaderUrlEncoded)\\n      {\\n        try {\\n          cleanStr = URLDecoder.decode(cleanStr, \\\"UTF-8\\\");\\n        } catch (UnsupportedEncodingException e) {\\n          exc?.log.error(\\\"Unable to url decode header\\\");\\n        }\\n      }\\n\\n      exc?.request?.header?.removeFields(headerName);\\n      exc?.request?.header?.removeFields(outgoingHeaderName);\\n      exc?.request?.header?.add(outgoingHeaderName, cleanStr);\\n\\n      certChain = parseCertificate(cleanStr);\\n    }\\n  }\\n  else if(exc?.sslData?.clientCertificateChain && !exc?.sslData?.clientCertificateChain.isEmpty())\\n  \\tcertChain = exc?.sslData?.clientCertificateChain.get(0);\\n\\n  return certChain;\\n}\\n\\nX509Certificate parseCertificate(String cleanStr) {\\n\\n  byte [] decoded = Base64.getDecoder().decode(cleanStr);\\n\\n  try {\\n    return (X509Certificate) CertificateFactory.getInstance(\\\"X.509\\\").generateCertificate(new ByteArrayInputStream(decoded));\\n  } catch (CertificateException e) {\\n\\texc?.log?.warn(\\\"Bad certificate provided: \\\" + certStr);\\n    return null;\\n  }\\n}\\n\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/rules",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create MTLS-RequireClientAuthAlways",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"paRuleCDRMTLSRequireClientAuthAlways\", response.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"className\": \"com.pingidentity.pa.policy.GroovyPolicyInterceptor\",\n  \"name\": \"MTLS-RequireClientAuthAlways\",\n  \"supportedDestinations\": [\n    \"Site\",\n    \"Agent\"\n  ],\n  \"configuration\": {\n    \"rejectionHandlingEnabled\": true,\n    \"rejectionHandler\": \"{{paRejectionHandlerRequireMTLS}}\",\n    \"errorResponseCode\": 403,\n    \"errorResponseStatusMsg\": \"Forbidden\",\n    \"errorResponseTemplateFile\": \"policy.error.page.template.html\",\n    \"errorResponseContentType\": \"text/html; charset=UTF-8\",\n    \"groovyScript\": \"import java.util.Base64\\nimport com.fasterxml.jackson.databind.JsonNode\\nimport com.fasterxml.jackson.databind.ObjectMapper\\nimport java.security.cert.CertificateEncodingException;\\nimport java.security.cert.X509Certificate;\\n\\nimport java.io.ByteArrayInputStream;\\nimport java.security.cert.CertificateException;\\nimport java.security.cert.CertificateFactory;\\nimport java.security.cert.X509Certificate;\\n\\nimport java.io.UnsupportedEncodingException;\\nimport java.net.URLDecoder;\\n\\n// START CONFIGURATION\\n\\ndef BEGIN_CERT = \\\"-----BEGIN CERTIFICATE-----\\\";\\ndef END_CERT = \\\"-----END CERTIFICATE-----\\\";\\n\\ndef HEADER_INCOMINGCERTIFICATE = \\\"X-Certificate\\\";\\ndef HEADER_OUTGOINGCERTIFICATE = \\\"X-PFCertificate\\\";\\ndef IS_PROXY_TERMINATED = {{pa-proxy-terminated}};\\ndef IS_CERT_HEADER_URL_ENCODED = {{pa-cert-header-encoded}};\\n\\n// END CONFIGURATION\\n\\ndef host = exc?.request?.header?.host;\\n\\nif(host.equals(\\\"pingaccess:3000\\\"))\\n{\\n  pass();\\n}\\nelse if(exc?.response)\\n{\\n  addResponseHeader(exc?.response, \\\"X-VALIDATED-CLIENTAUTH\\\", \\\"TRUE\\\");\\n  pass();\\n}\\nelse\\n{\\n  def certChain = getCertificate(exc, IS_PROXY_TERMINATED, HEADER_INCOMINGCERTIFICATE, HEADER_OUTGOINGCERTIFICATE, BEGIN_CERT, END_CERT, IS_CERT_HEADER_URL_ENCODED);\\n  if(!certChain)\\n    fail();\\n  else\\n    pass();\\n}\\n\\nvoid addResponseHeader(def response, def headerName, def headerValue)\\n{\\n  if(response)\\n    response?.header?.add(headerName, headerValue);\\n}\\n\\nX509Certificate getCertificate(def exc, def isTerminatedProxy, def headerName, def outgoingHeaderName, def beginCert, def endCert, def isCertHeaderUrlEncoded)\\n{\\n  X509Certificate certChain = null;\\n  if(isTerminatedProxy)\\n  {\\n    def certificateFromHeader = exc?.request?.header?.getFirstValue(headerName);\\n    if(certificateFromHeader)\\n    {\\n      //before decoding we need to get rod off the prefix and suffix\\n      String cleanStr = certificateFromHeader.replaceAll(beginCert, \\\"\\\").replaceAll(endCert, \\\"\\\").replaceAll(\\\"[\\\\\\\\n\\\\\\\\t ]\\\", \\\"\\\");\\n\\n      if(isCertHeaderUrlEncoded)\\n      {\\n        try {\\n          cleanStr = URLDecoder.decode(cleanStr, \\\"UTF-8\\\");\\n        } catch (UnsupportedEncodingException e) {\\n          exc?.log.error(\\\"Unable to url decode header\\\");\\n        }\\n      }\\n\\n      exc?.request?.header?.removeFields(headerName);\\n      exc?.request?.header?.removeFields(outgoingHeaderName);\\n      exc?.request?.header?.add(outgoingHeaderName, cleanStr);\\n\\n      certChain = parseCertificate(cleanStr);\\n    }\\n  }\\n  else if(exc?.sslData?.clientCertificateChain && !exc?.sslData?.clientCertificateChain.isEmpty())\\n  \\tcertChain = exc?.sslData?.clientCertificateChain.get(0);\\n\\n  return certChain;\\n}\\n\\nX509Certificate parseCertificate(String cleanStr) {\\n\\n  byte [] decoded = Base64.getDecoder().decode(cleanStr);\\n\\n  try {\\n    return (X509Certificate) CertificateFactory.getInstance(\\\"X.509\\\").generateCertificate(new ByteArrayInputStream(decoded));\\n  } catch (CertificateException e) {\\n\\texc?.log?.warn(\\\"Bad certificate provided: \\\" + certStr);\\n    return null;\\n  }\\n}\\n\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/rules",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create PingFed-FixForwardedHost",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"paRuleCDRFixForwardedHost\", response.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if(pm.collectionVariables.get(\"cdrIssuerPort\") == null || pm.collectionVariables.get(\"cdrIssuerPort\") == \"\" || pm.collectionVariables.get(\"cdrIssuerPort\") == \"443\")",
											"{",
											"    pm.environment.set(\"dataholderPortSuffix\", pm.collectionVariables.get(\"cdrIssuerPort\"));",
											"}",
											"else",
											"{",
											"    pm.environment.set(\"dataholderPortSuffix\", \":\" + pm.collectionVariables.get(\"cdrIssuerPort\"));",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"className\": \"com.pingidentity.pa.policy.GroovyPolicyInterceptor\",\n  \"name\": \"PingFed-FixForwardedHost\",\n  \"supportedDestinations\": [\n    \"Site\",\n    \"Agent\"\n  ],\n  \"configuration\": {\n    \"rejectionHandlingEnabled\": true,\n    \"rejectionHandler\": \"1\",\n    \"errorResponseCode\": 403,\n    \"errorResponseStatusMsg\": \"Forbidden\",\n    \"errorResponseTemplateFile\": \"policy.error.page.template.html\",\n    \"errorResponseContentType\": \"text/html; charset=UTF-8\",\n    \"groovyScript\": \"if(!exc?.response)\\n{\\n  def header = exc?.request?.header;\\n  header?.add(\\\"X-Forwarded-Host\\\", \\\"{{cdrIssuerHost}}{{dataholderPortSuffix}}\\\");\\n}\\nanything(\\\"Custom header set into request\\\");\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/rules",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"rules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create CDR-RestrictIntrospectRefreshToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"paRuleCDRRestrictIntrospectRefreshToken\", response.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"className\": \"com.pingidentity.pa.policy.GroovyPolicyInterceptor\",\n  \"name\": \"PingFederate-RestrictIntrospectRefreshToken\",\n  \"supportedDestinations\": [\n    \"Site\",\n    \"Agent\"\n  ],\n  \"configuration\": {\n    \"rejectionHandlingEnabled\": true,\n    \"rejectionHandler\": \"{{paRejectionHandlerIntrospectEnforceFail}}\",\n    \"errorResponseCode\": 403,\n    \"errorResponseStatusMsg\": \"Forbidden\",\n    \"errorResponseTemplateFile\": \"policy.error.page.template.html\",\n    \"errorResponseContentType\": \"text/html; charset=UTF-8\",\n    \"groovyScript\": \"def request = exc?.request;\\n\\nif(\\\"post\\\".equalsIgnoreCase(request?.method?.methodName))\\n{\\n  def postParams = request?.getPostParams();\\n  \\n  if(postParams.containsKey(\\\"token\\\"))\\n  {\\n    def tokenValues = postParams?.get(\\\"token\\\");\\n    \\n    if(tokenValues.length != 1)\\n    \\tfail();\\n    else\\n    {\\n      def tokenValue = tokenValues[0];\\n\\n      //assuming access token is a JWT\\n      if(tokenValue.indexOf(\\\".\\\") > 0)\\n        fail();\\n      else\\n      {\\n        if(!postParams.containsKey(\\\"token_type_hint\\\"))\\n        {\\n          def bodyStr = new String(request?.body?.content);\\n          bodyStr = bodyStr + \\\"&token_type_hint=refresh_token\\\";\\n          request?.setBodyContent(bodyStr.getBytes());\\n          pass();\\n        }\\n        pass();\\n      }\\n    }\\n  }\\n  else\\n    anything();\\n}\\nelse\\n  anything();\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/rules",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"rules"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Applications",
					"item": [
						{
							"name": "Create MTLS Identity Mapping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"paIdentityMappingMTLS\", response.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"className\": \"com.pingidentity.pa.identitymappings.HeaderIdentityMapping\",\n  \"name\": \"MTLS Identity Mapping\",\n  \"configuration\": {\n    \"headerNamePrefix\": null,\n    \"exclusionList\": false,\n    \"exclusionListAttributes\": [],\n    \"exclusionListSubject\": null,\n    \"attributeHeaderMappings\": [],\n    \"headerClientCertificateMappings\": [\n      {\n        \"headerName\": \"X-PFCertificate\"\n      },\n      {\n        \"headerName\": \"X-PFCertificateChain\"\n      }\n    ]\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/identityMappings",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"identityMappings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create PingFederate Application",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Set environment variables for next test\", function () {",
											"    var response = pm.response.json();",
											"    pm.environment.set(\"paApplicationPingFederateID\", response.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"enabled\": true,\n  \"requireHTTPS\": true,\n  \"name\": \"PingFederate-Application\",\n  \"description\": \"\",\n  \"manualOrderingEnabled\": false,\n  \"resourceOrder\": [],\n  \"applicationType\": \"Web\",\n  \"defaultAuthType\": \"Web\",\n  \"spaSupportEnabled\": false,\n  \"fallbackPostEncoding\": \"UTF-8\",\n  \"destination\": \"Site\",\n  \"contextRoot\": \"/\",\n  \"realm\": null,\n  \"caseSensitivePath\": false,\n  \"allowEmptyPathSegments\": false,\n  \"webSessionId\": 0,\n  \"issuer\": null,\n  \"siteId\": {{paSitePingFederate}},\n  \"agentId\": 0,\n  \"sidebandClientId\": null,\n  \"virtualHostIds\": [\n    {{paVirtualHostPublic}},\n    {{paVirtualHostConfidential}}\n  ],\n  \"identityMappingIds\": {\n    \"Web\": {{paIdentityMappingMTLS}},\n    \"API\": 0\n  },\n  \"accessValidatorId\": 0,\n  \"policy\": {\n    \"Web\": [\n      {\n        \"type\": \"Rule\",\n        \"id\": {{paRuleCDRValidateStatusAPI}}\n      },\n      {\n        \"type\": \"Rule\",\n        \"id\": {{paRuleCDRFixForwardedHost}}\n      }\n    ],\n    \"API\": []\n  },\n  \"authenticationChallengePolicyId\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/applications",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"applications"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Application Resources",
					"item": [
						{
							"name": "Create CDR Arrangement Endpoint - ADH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"CDR Arrangement Endpoint - ADH\",\n  \"methods\": [\n    \"*\"\n  ],\n  \"pathPatterns\": [\n    {\n      \"pattern\": \"/data-holder/arrangements/*\",\n      \"type\": \"WILDCARD\"\n    }\n  ],\n  \"pathPrefixes\": [\n    \"/data-holder/arrangements/*\"\n  ],\n  \"auditLevel\": \"ON\",\n  \"rootResource\": false,\n  \"anonymous\": false,\n  \"enabled\": true,\n  \"unprotected\": false,\n  \"policy\": {\n    \"Web\": [\n      {\n        \"type\": \"Rule\",\n        \"id\": {{paRuleCDRMTLSRequireClientAuthAlways}}\n      }\n    ],\n    \"API\": []\n  },\n  \"defaultAuthTypeOverride\": \"Web\",\n  \"queryParamConfig\": null,\n  \"resourceType\": \"Standard\",\n  \"resourceTypeConfiguration\": {\n    \"responseGenerator\": null\n  },\n  \"authenticationChallengePolicyId\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/applications/{{paApplicationPingFederateID}}/resources",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"applications",
										"{{paApplicationPingFederateID}}",
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Authorization Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Authorization Endpoint\",\n  \"methods\": [\n    \"*\"\n  ],\n  \"pathPatterns\": [\n    {\n      \"pattern\": \"/as/authorization.oauth2\",\n      \"type\": \"WILDCARD\"\n    }\n  ],\n  \"pathPrefixes\": [\n    \"/as/authorization.oauth2\"\n  ],\n  \"auditLevel\": \"ON\",\n  \"rootResource\": false,\n  \"anonymous\": false,\n  \"enabled\": true,\n  \"unprotected\": false,\n  \"policy\": {\n    \"Web\": [\n      {\n        \"type\": \"Rule\",\n        \"id\": {{paRuleCDRValidateStatusWeb}}\n      }\n    ],\n    \"API\": []\n  },\n  \"defaultAuthTypeOverride\": \"Web\",\n  \"queryParamConfig\": null,\n  \"resourceType\": \"Standard\",\n  \"resourceTypeConfiguration\": {\n    \"responseGenerator\": null\n  },\n  \"authenticationChallengePolicyId\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/applications/{{paApplicationPingFederateID}}/resources",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"applications",
										"{{paApplicationPingFederateID}}",
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create PAR Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"PAR Endpoint\",\n  \"methods\": [\n    \"*\"\n  ],\n  \"pathPatterns\": [\n    {\n      \"pattern\": \"/as/par.oauth2\",\n      \"type\": \"WILDCARD\"\n    }\n  ],\n  \"pathPrefixes\": [\n    \"/as/par.oauth2\"\n  ],\n  \"auditLevel\": \"ON\",\n  \"rootResource\": false,\n  \"anonymous\": false,\n  \"enabled\": true,\n  \"unprotected\": false,\n  \"policy\": {\n    \"Web\": [\n      {\n        \"type\": \"Rule\",\n        \"id\": {{paRuleCDRMTLSRequireClientAuth}}\n      },\n      {\n        \"type\": \"Rule\",\n        \"id\": {{paRuleCDRValidateArrangement}}\n      }\n    ],\n    \"API\": []\n  },\n  \"defaultAuthTypeOverride\": \"Web\",\n  \"queryParamConfig\": null,\n  \"resourceType\": \"Standard\",\n  \"resourceTypeConfiguration\": {\n    \"responseGenerator\": null\n  },\n  \"authenticationChallengePolicyId\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/applications/{{paApplicationPingFederateID}}/resources",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"applications",
										"{{paApplicationPingFederateID}}",
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create DCR Management Endpoints",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"DCR Management Endpoints\",\n  \"methods\": [\n    \"*\"\n  ],\n  \"pathPatterns\": [\n    {\n      \"pattern\": \"/register/*\",\n      \"type\": \"WILDCARD\"\n    },\n    {\n      \"pattern\": \"/as/clients.oauth2/*\",\n      \"type\": \"WILDCARD\"\n    }\n  ],\n  \"pathPrefixes\": [\n    \"/register/*\",\n    \"/as/clients.oauth2/*\"\n  ],\n  \"auditLevel\": \"ON\",\n  \"rootResource\": false,\n  \"anonymous\": false,\n  \"enabled\": true,\n  \"unprotected\": false,\n  \"policy\": {\n    \"Web\": [\n      {\n        \"type\": \"Rule\",\n        \"id\": {{paRuleCDRAccessTokenDecrypter}}\n      },\n      {\n        \"type\": \"Rule\",\n        \"id\": {{paRuleCDRMTLSRequireClientAuth}}\n      },\n      {\n        \"type\": \"Rule\",\n        \"id\": {{paRuleCDRHoKVerifyAccessToken}}\n      }\n    ],\n    \"API\": []\n  },\n  \"defaultAuthTypeOverride\": \"Web\",\n  \"queryParamConfig\": null,\n  \"resourceType\": \"Standard\",\n  \"resourceTypeConfiguration\": {\n    \"responseGenerator\": null\n  },\n  \"authenticationChallengePolicyId\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/applications/{{paApplicationPingFederateID}}/resources",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"applications",
										"{{paApplicationPingFederateID}}",
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Well Known EndPoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Well Known EndPoint\",\n  \"methods\": [\n    \"*\"\n  ],\n  \"pathPatterns\": [\n    {\n      \"pattern\": \"/.well-known/openid-configuration\",\n      \"type\": \"WILDCARD\"\n    }\n  ],\n  \"pathPrefixes\": [\n    \"/.well-known/openid-configuration\"\n  ],\n  \"auditLevel\": \"ON\",\n  \"rootResource\": false,\n  \"anonymous\": false,\n  \"enabled\": false,\n  \"unprotected\": false,\n  \"policy\": {\n    \"Web\": [],\n    \"API\": []\n  },\n  \"defaultAuthTypeOverride\": \"Web\",\n  \"queryParamConfig\": null,\n  \"resourceType\": \"Standard\",\n  \"resourceTypeConfiguration\": {\n    \"responseGenerator\": null\n  },\n  \"authenticationChallengePolicyId\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/applications/{{paApplicationPingFederateID}}/resources",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"applications",
										"{{paApplicationPingFederateID}}",
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Token Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Token Endpoint\",\n  \"methods\": [\n    \"*\"\n  ],\n  \"pathPatterns\": [\n    {\n      \"pattern\": \"/as/token.oauth2\",\n      \"type\": \"WILDCARD\"\n    }\n  ],\n  \"pathPrefixes\": [\n    \"/as/token.oauth2\"\n  ],\n  \"auditLevel\": \"ON\",\n  \"rootResource\": false,\n  \"anonymous\": false,\n  \"enabled\": true,\n  \"unprotected\": false,\n  \"policy\": {\n    \"Web\": [\n      {\n        \"type\": \"Rule\",\n        \"id\": {{paRuleCDRMTLSRequireClientAuth}}\n      },\n      {\n        \"type\": \"Rule\",\n        \"id\": {{paRuleCDRHoKSendThumbprint}}\n      },\n      {\n        \"type\": \"Rule\",\n        \"id\": {{paRuleCDRRefreshTokenProcessor}}\n      }\n    ],\n    \"API\": []\n  },\n  \"defaultAuthTypeOverride\": \"Web\",\n  \"queryParamConfig\": null,\n  \"resourceType\": \"Standard\",\n  \"resourceTypeConfiguration\": {\n    \"responseGenerator\": null\n  },\n  \"authenticationChallengePolicyId\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/applications/{{paApplicationPingFederateID}}/resources",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"applications",
										"{{paApplicationPingFederateID}}",
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create UserInfo Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"UserInfo Service\",\n  \"methods\": [\n    \"*\"\n  ],\n  \"pathPatterns\": [\n    {\n      \"pattern\": \"/idp/userinfo.openid\",\n      \"type\": \"WILDCARD\"\n    }\n  ],\n  \"pathPrefixes\": [\n    \"/idp/userinfo.openid\"\n  ],\n  \"auditLevel\": \"ON\",\n  \"rootResource\": false,\n  \"anonymous\": false,\n  \"enabled\": true,\n  \"unprotected\": false,\n  \"policy\": {\n    \"Web\": [\n      {\n        \"type\": \"Rule\",\n        \"id\": {{paRuleCDRAccessTokenDecrypter}}\n      },\n      {\n        \"type\": \"Rule\",\n        \"id\": {{paRuleCDRMTLSRequireClientAuth}}\n      },\n      {\n        \"type\": \"Rule\",\n        \"id\": {{paRuleCDRHoKVerifyAccessToken}}\n      }\n    ],\n    \"API\": []\n  },\n  \"defaultAuthTypeOverride\": \"Web\",\n  \"queryParamConfig\": null,\n  \"resourceType\": \"Standard\",\n  \"resourceTypeConfiguration\": {\n    \"responseGenerator\": null\n  },\n  \"authenticationChallengePolicyId\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/applications/{{paApplicationPingFederateID}}/resources",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"applications",
										"{{paApplicationPingFederateID}}",
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Introspection Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Introspection Endpoint\",\n  \"methods\": [\n    \"*\"\n  ],\n  \"pathPatterns\": [\n    {\n      \"pattern\": \"/as/introspect.oauth2\",\n      \"type\": \"WILDCARD\"\n    }\n  ],\n  \"pathPrefixes\": [\n    \"/as/introspect.oauth2\"\n  ],\n  \"auditLevel\": \"ON\",\n  \"rootResource\": false,\n  \"anonymous\": false,\n  \"enabled\": true,\n  \"unprotected\": false,\n  \"policy\": {\n    \"Web\": [\n      {\n        \"type\": \"Rule\",\n        \"id\": {{paRuleCDRMTLSRequireClientAuth}}\n      },\n      {\n        \"type\": \"Rule\",\n        \"id\": {{paRuleCDRRefreshTokenProcessor}}\n      },\n      {\n        \"type\": \"Rule\",\n        \"id\": {{paRuleCDRRestrictIntrospectRefreshToken}}\n      }\n    ],\n    \"API\": []\n  },\n  \"defaultAuthTypeOverride\": \"Web\",\n  \"queryParamConfig\": null,\n  \"resourceType\": \"Standard\",\n  \"resourceTypeConfiguration\": {\n    \"responseGenerator\": null\n  },\n  \"authenticationChallengePolicyId\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/applications/{{paApplicationPingFederateID}}/resources",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"applications",
										"{{paApplicationPingFederateID}}",
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Revocation Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Revocation Endpoint\",\n  \"methods\": [\n    \"*\"\n  ],\n  \"pathPatterns\": [\n    {\n      \"pattern\": \"/as/revoke_token.oauth2\",\n      \"type\": \"WILDCARD\"\n    }\n  ],\n  \"pathPrefixes\": [\n    \"/as/revoke_token.oauth2\"\n  ],\n  \"auditLevel\": \"ON\",\n  \"rootResource\": false,\n  \"anonymous\": false,\n  \"enabled\": true,\n  \"unprotected\": false,\n  \"policy\": {\n    \"Web\": [\n      {\n        \"type\": \"Rule\",\n        \"id\": {{paRuleCDRMTLSRequireClientAuth}}\n      },\n      {\n        \"type\": \"Rule\",\n        \"id\": {{paRuleCDRRefreshTokenProcessor}}\n      }\n    ],\n    \"API\": []\n  },\n  \"defaultAuthTypeOverride\": \"Web\",\n  \"queryParamConfig\": null,\n  \"resourceType\": \"Standard\",\n  \"resourceTypeConfiguration\": {\n    \"responseGenerator\": null\n  },\n  \"authenticationChallengePolicyId\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/applications/{{paApplicationPingFederateID}}/resources",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"applications",
										"{{paApplicationPingFederateID}}",
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create DCR Create Endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate response status=200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-XSRF-Header",
										"value": "PingAccess",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"DCR Create Endpoint\",\n  \"methods\": [\n    \"*\"\n  ],\n  \"pathPatterns\": [\n    {\n      \"pattern\": \"/as/clients.oauth2\",\n      \"type\": \"WILDCARD\"\n    },\n    {\n      \"pattern\": \"/register\",\n      \"type\": \"WILDCARD\"\n    }\n  ],\n  \"pathPrefixes\": [\n    \"/as/clients.oauth2\",\n    \"/register\"\n  ],\n  \"auditLevel\": \"ON\",\n  \"rootResource\": false,\n  \"anonymous\": false,\n  \"enabled\": true,\n  \"unprotected\": false,\n  \"policy\": {\n    \"Web\": [\n      {\n        \"type\": \"Rule\",\n        \"id\": {{paRuleCDRMTLSRequireClientAuthAlways}}\n      }\n    ],\n    \"API\": []\n  },\n  \"defaultAuthTypeOverride\": \"Web\",\n  \"queryParamConfig\": null,\n  \"resourceType\": \"Standard\",\n  \"resourceTypeConfiguration\": {\n    \"responseGenerator\": null\n  },\n  \"authenticationChallengePolicyId\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{pa-base-url}}/pa-admin-api/v3/applications/{{paApplicationPingFederateID}}/resources",
									"host": [
										"{{pa-base-url}}"
									],
									"path": [
										"pa-admin-api",
										"v3",
										"applications",
										"{{paApplicationPingFederateID}}",
										"resources"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Set up auxiliary applications",
					"item": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{pa-api-admin-password}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{pa-api-admin-user}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "pf-base-url",
			"value": "https://localhost:2222"
		},
		{
			"key": "pf-api-admin-user",
			"value": "Administrator"
		},
		{
			"key": "pf-api-admin-password",
			"value": "2FederateM0re"
		},
		{
			"key": "ciamIdpIssuer",
			"value": "n/a"
		},
		{
			"key": "ciamIdpClientId",
			"value": "n/a"
		},
		{
			"key": "ciamIdpClientSecret",
			"value": "n/a"
		},
		{
			"key": "cdrIssuerHost",
			"value": "sso.data-holder.local"
		},
		{
			"key": "cdrIssuerMTLSHost",
			"value": "sso-mtls.data-holder.local"
		},
		{
			"key": "cdrIssuerPort",
			"value": "3000"
		},
		{
			"key": "cdrACCCTrustedCA",
			"value": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZmRENDQTJTZ0F3SUJBZ0lKQVBwYXRORFY5aWxjTUEwR0NTcUdTSWIzRFFFQkN3VUFNSE14R3pBWkJnTlYKQkFNTUVtTmtjaTF5WldkcGMzUmxjaTVzYjJOaGJERVdNQlFHQTFVRUN3d05VR2x1WnlCSlpHVnVkR2wwZVRFTgpNQXNHQTFVRUNnd0VRVkJCUXpFU01CQUdBMVVFQnd3SlRXVnNZbTkxY201bE1Rd3dDZ1lEVlFRSURBTldTVU14CkN6QUpCZ05WQkFZVEFrRlZNQjRYRFRJeE1EUXlNVEEwTVRjek1Gb1hEVE14TURReE9UQTBNVGN6TUZvd2N6RWIKTUJrR0ExVUVBd3dTWTJSeUxYSmxaMmx6ZEdWeUxteHZZMkZzTVJZd0ZBWURWUVFMREExUWFXNW5JRWxrWlc1MAphWFI1TVEwd0N3WURWUVFLREFSQlVFRkRNUkl3RUFZRFZRUUhEQWxOWld4aWIzVnlibVV4RERBS0JnTlZCQWdNCkExWkpRekVMTUFrR0ExVUVCaE1DUVZVd2dnSWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUNEd0F3Z2dJS0FvSUMKQVFDaTl3c28yb3NwT0tNQU5VNWxtQS9kaktRa2g1T29TM1JJM0RlTTM2V0JZZmJVenlBMS9aSk5zdTNRbkt6agpzTUZsRStHaC9YVElIb0ZNRlJRYlRDU011REtaSnh4QW1uU0tqNGpicVA1dU96KzZja2JCWVpPNXRpRkJOTUs0CnpGazVGemU5UGVCY2wvZjQ0ekFBTUdDb0RMOCtuOFJyZ3BvQnAwZ3padVEyOHFzZjcrWmlGdk1CQnNOL2NQMzQKNVM2aTlUQ2NSaW54Sit2ekxtR3owUGtXNDZ1R25RMWJlYlFGYzhYbWY3VXp5MzlzczNiSUpRSGtMSnkyaXZKLwpUcUhiYkt3b3QyMkZYY2JvcFpGeUdKeEYzcTc0REFsRXZBQnU4Z1VHcVNvRGlOcWp0c2FuMUFmbzM0NDhKRFZJClJ5NzIxYnV3L2YxVTFIaitZYmtnK21UWmJkd2t1cFdKT29XbXovQUpkMFNZc2tGR0FYeDc4M2RmU0haYWgra04KSURibklpS0kzbDdLeWg5WklVNjAwbWE1L0FLSDRoQXpUNGNqWTI1a2xtdHlqeTRGUGRtMkRvczNOeXZOcmlzaQpJa1Nvbldzd1A5azJ6aFdSWWRFZFZaL1c0dFRVZEYyQ2lLTXV4S29PNURia2d1VGo3UnJIL0RPRExKZUwzdlBCCmlvaGRlUDF3T3o2Q1VrR3B5Wk1hN1FRa0NWMU9KNFpqY0t2dGVYTVI3VjRINHZBMjhsL2JvSjJVOXR5NEhlemYKeTFUQVY1ai96T2hHUkhxcE56eEp4dGFDM1VUV2ZrNWY1RW8xeTd6RDBkYS9VNTNIVW5JT0ZvbXJtV1h5cGpQdQpYZUt5bTA0V01GVkpyZUtZNC8wVVpQSk9YRHNRSk9iZUxuY3NFUTRZZ2NQc0h3SURBUUFCb3hNd0VUQVBCZ05WCkhSTUJBZjhFQlRBREFRSC9NQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUNBUUFESEQ5c0s5RW40dmhrNVI5QWU5YmgKelZCZVpCYVJ4VDZYNnl2c0N5L0RFdW5aUlpDcUhiR0xjcVFjOVN1Z1ljSFBYcWFrNWNtcjhBZkJsN1RvTGc0cQozY1lYU01RM2gxR0lqa0l1NVFFbGF1VXJiZG1CeW14YTdyR1FYUDd5d1p1K2NyY0tvNk9YTXNhaG5rTXUyQUNaCldkcVB6U0xaQjI2SXdkL2p5K3JDUEs2MGlwdWlGUFNVK0k2elk5Qm1tVGNSVk1iUE5rdkM2Nlp5cjlpUG9pL0cKMTBHU3RDVVZsUDFiK2ZDcTkrNEVhNjlZdHY4N1BXM0NNZ2tvRWxTaWl4dW8vR1Q5a2h0ZzU4cUhMK2U4KzBMbgpFOVprbVliekJDL1ptRGVXbnlOd1dKdGxnbzh6Tk5YakI3L2JvUnJnNGhsbGpRRU0rTENGV3BrcXBFM2pSeTBuClBJcmptbStobVlHOTZwZ0dwNHREL0hTK1JGaWJ0U09ZdFdhRFJFUytGRnM4SHFTQ0lIdlNjamdCcTllUW9XcGMKdkl0RGpFU09HNDFmZGZOYWpNR2NBNlFSUWJpbUhOdVYyVnlycTV2RXIxVXFlNzVqbkIwZFJSaU5aT0FJeFc2QQpydFZMdUZQa09UUG1DaGQvVHRZTmRyNndmTUNmcDY1UEFYTkVYVmNwV3B3UU9IZjhyb1BCTVVxVmJ3WWpVNjlxCkNXR3dHZGo0V01zUHNCSTlFZFBGVFltQnhtN1dIWnQrdC9rUDBtblpId0ZxUVNCcnVGQTVHZUdCQ0hTQ1QwYVkKbFQ2Sk1GVTNwVWl1TVBmZ1pvOFpWaEh5ektVTzlCKy9zVXhjaS9zTFlxWFE1ZXBDQTRnMzlVMnFKc1ZuOUhHdwpBS0lXeVNjSDhRKzRQZmllMUxXZGVBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ=="
		},
		{
			"key": "cdrACCCJWKS",
			"value": "http://cdrregister:8084/.well-known/openid-configuration/JWKS"
		},
		{
			"key": "cdrAccessTokenEncryptionKey",
			"value": "vSYD3aAc7qegvU9OzA9wRCjEVVlpbh4D0l5g97BJdZ0="
		},
		{
			"key": "cdrRefreshTokenEncryptionKey",
			"value": "vSYD3aAc7qegvU9OzA9wRCjEVVlpbh4D0l5g97BJdZ0"
		},
		{
			"key": "cdrDataHolderBankAPIBaseURI",
			"value": "https://api.data-holder.local"
		},
		{
			"key": "pf-oauth-client-pingaccess-secret",
			"value": "2FederateM0re"
		},
		{
			"key": "pf-oauth-client-pingaccessvalidator-secret",
			"value": "2FederateM0re"
		},
		{
			"key": "pf-oauth-client-pingdirectory-secret",
			"value": "2FederateM0re"
		},
		{
			"key": "pf-consent-agentless-username",
			"value": "consentappuser"
		},
		{
			"key": "pf-consent-agentless-password",
			"value": "2FederateM0re"
		},
		{
			"key": "pf-consent-agentless-authendpoint",
			"value": "http://consent.data-holder.local:7879/init"
		},
		{
			"key": "pf-signing-key-cdr-p12b64",
			"value": "MIIKcQIBAzCCCioGCSqGSIb3DQEHAaCCChsEggoXMIIKEzCCBaoGCSqGSIb3DQEHAaCCBZsEggWXMIIFkzCCBY8GCyqGSIb3DQEMCgECoIIFQDCCBTwwZgYJKoZIhvcNAQUNMFkwOAYJKoZIhvcNAQUMMCsEFPmaVx6Aq1z7x6CzjULAtlFE+4CNAgInEAIBIDAMBggqhkiG9w0CCQUAMB0GCWCGSAFlAwQBKgQQ4jdar4unU7qu9Aov+82kAgSCBNCTnFtngm2rhLPmeJqkcVQPDrYxE41tZs/kLRw6lNg2Il1qL/sy8LS0j3LBFsFWek+h2cD7YI9cIv0vZCJd09ASYM3b67oX2LvSjg2RV/hEnUyf0x+4Gx1T0y9b9u+9CDLVNIcSxZDsHjB+lS+sj4JMCRIcc8te4Jy8ru1RyEeJ5gF58rikXFgxFPWulVgqGgeI+ZcfShXcFC8UEKFY64B7+GTZE8VQdlEnY5qMApG2irqSvBj/gHLn2j0N1JKI5Hti4ahjmDhIDsG7g8ajUL5bczJVP2y+6ntXxd7UTo7S81LJP7vFEdkZsrjqEAU3sl2rNahc+weKH8UMAVjuVCvPDpCxtV9OhRYAkj4NpWFkfjZ5ZZVE4JrqV775958AZGQuMCArkimH/ODnxXmZpY+TcqKCZHnqqrg1A7TTkis6p9JJ9Re4mgnMmMkER70D8eaqUIT9rkaL/YPPuDb2xRVZRi2mXK+lZ5t6DePRa5X1OvulOsHG3qqeGIyRz2No8X1QjDrun7Zg1pjxB4DrfxW2AsNzZqhQzg8uMjUWPzTG/3V1Esf7+jucYD+dyhny4zGWu7OmanN8/ciPbfKsavYZ2ssZGWCRIDqq0tIl4+woM8rURcMc+mL11GLj/soEALWqdyuNFHTchI2WNwSmxfdn6eWjb/5P7UkneugGsASgP7V3yhLvpsoApk7M5BkDG2Cl1Att1nUdFEl6Hi7Mxp8FwK+sdxR9PKpRD470PLSMoKFEijpcv1m4S4RC4CGxbT+HKst0CC7fW/c1rO8mKqMYXzOSmw87KmWbd5znWp3VAa7cEAIaCU/MmQPp3eCUJebU9EWqiCpYClF5nyici2TzoytZNzOmvMWQNJyRNrAcy6GQL1znzz857RV9VOluy6MJi4t2NP9vDM42xUBbgiiVoouMSkZSs3e5mhinvGBtyBcEZ/c6/ZZOR8LR55fZXA+OpWBYmHkBVETsR7EyrH2kCt585TqgpdSN6sbbT71IkOa2I3wZ1XaQhW+AAJOEeTeoD9vXL3B5t1u2T3QLutxkOJLtKVlpPqwfkKa6rFarRlxy2ipECNpqdogeIET7lTnrUKPl8cy02zkl+MP9jtRtoVnfIo3KbLjsbH6+rArTIIouH+ntvU3Mel42O6C580hkEWlXW2+OJ+w8N1x1SmpKFTkYPeM1jp4HIqDgy/SVZa6xz1d6ow7q5QAJDAEZmAMVaM+IMvv8n2c8eIa+HKDakdFFYVIMdHDB40vb3z0XHHkoX0mjfnZwEeuRPsWBZHefkcE1/nV7Cu+z/aQOG2yWegMI894iEoeRYCikPyD5YyoGHUi0w3brJ/W7NgdmNyWKxcLtOjOcvKbyTmk1GU6jY02rTPBlKrndcET1aps2i5myt1QQtoQc/sxqVIUDCK3n7mKne+YLyHkxsgVe92dRiSXwyu0Bz0o0lC46CdtVZChZNPJdjudZ/VwWlOh9WPYRLyaN4mkVDqB+LmAcs7Bs1b0B3Cr91S6huO00lxwg4RNQqfqOUmEe7guF5IqpjiND1QxkccJ1HOaUEUzQ+kNeUstQot6EGe1OuDRX0TyM/0NmEE5EO77IfF7Ru6Ooc/Nij+er6h4W6gBiQAJ/9dDKBRdwGgwQ7PIvW/2ulwSmoDE8MBcGCSqGSIb3DQEJFDEKHggAcABpAG4AZzAhBgkqhkiG9w0BCRUxFAQSVGltZSAxNjQwMTU5NTY5NzEyMIIEYQYJKoZIhvcNAQcGoIIEUjCCBE4CAQAwggRHBgkqhkiG9w0BBwEwZgYJKoZIhvcNAQUNMFkwOAYJKoZIhvcNAQUMMCsEFHw/mBM+IxuinhJdUBpAPr5lpp2uAgInEAIBIDAMBggqhkiG9w0CCQUAMB0GCWCGSAFlAwQBKgQQVtYzK5PkPDBM7WgnbOynLICCA9AyTNQOhSi5qYGtPoAeJPqTQqYjD5Gs2n+mZwmOS9vLPMu0zvZsYd/iqt3RWoMK3R8HEZOVb9vokTUFgxiYYY8xWZEK9Bdr6OYrQrG3X9STmloI4i2Z4hLvYwHjwTYwHXvhHXmCK7uID0Y5eNbr2HRLn+e/rqkQJMsVkrZS3jhI5RqeHwiZWCMzL/+R66lbSUe5RY2xzRyrUt3AgXMb+VPMm4tymCcs1Hr2ljUsC4aPewbBTlJhwsQkEy1nRRaky+3CO3GhwENonv0p+5azQbSD7G87RcHj39YeaM/L+KDHwsVxm73EAvezMb0WlhjVkBsTW75lHmIo/5mn8tqnBtLI6c/peaZf9l4iSO1Ed+NPpWi2KALzcyXa8yjjx3tn7bWERTUeRMpB7q1ZBW9dBh+4HaB85Vf4JoCIlJsc1Hy93+IfYCVFurFfTrb6FI0PwC/j3dRYu1kqx7tXTDM9w2IxqCdpxDQHeou+yWOwkDt2u/9b9o5ES52f563vnFBXEa8jS5tiqdQJg9gzqNal2SvJD4JCURrvdsxeUjbl8NVgytAX3u+5v7q6bf94m/skAoMp/jNc6ScStchF99N0PAXAel6f8V0s4s+cT2XhTUtujv7H3xe5dBb4xfLI3b3rQywmV1Dq+YVl+v+cftmGy4kcSb2gNH81HnKazf3gVxcnZNtEIYBKtsX01Q/Sh5mstNjjA2oKOAlhDxdCijVOGlwB39MGMYyj7VisS/dzBYidtv191/xlWwRD6c05Rvt5ohLNitRt6eSboN+ox/ldf/R1KYNkiE0Zr1pox6nB2uFnGrLCqSvLSgRo4g0mcULOaEukeDrcusnsn9VGXoElcBOwndhsD0IT8ldnWUJLuUlzMIbWm/Dff5kDeyKmWu9mCsq58Ctjv6QtVjnVYcBGN/uXNx0aeTd53hvAAnIjunOkai8rGG91K+WqSBDN4mwus3FD/x05mP2oP7J1Q/L7oN288Nmk1v9KDMeylHkG1uKCNNCFsiqJvl5Q6GYyhV1eSHsuowA/OKxQL8/ckqaDDQv2utXhXpSJubcOYlOU5j+CoQ5h0b5IuBUhRBx/LI1Dg2ErRt7RjIkG/FQ3auDBzRzPPYIZUkuXsT9jsIcWgrga1m27HNxUIDCOZiNLPmGslPlsi0cYUB2LPx81ctXwePHN3DprCb0S015hCu+uy6PgB/QLlZXQvhOTvZTGS5ytnq/bXobDY0psDFNXFdRwPbjPbVwpmVSNEZibbJabjPglpRvSm6Uef7Bg2IvyF1S4330/OWAVtHgCULtc75MVZB+rMD4wITAJBgUrDgMCGgUABBRwrmINTKkkfYka9Hsnr3QETSk+bgQUqgjFBe4CYei+X9vbhMiWCRYIOF0CAwGGoA=="
		},
		{
			"key": "pf-signing-key-cdr-password",
			"value": "2FederateM0re"
		},
		{
			"key": "pf-signing-key-internal-p12b64",
			"value": "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"
		},
		{
			"key": "pf-signing-key-internal-password",
			"value": "2FederateM0re"
		},
		{
			"key": "pf-ldap-host",
			"value": "localhost:1389"
		},
		{
			"key": "pf-ldap-username",
			"value": "cn=administrator"
		},
		{
			"key": "pf-ldap-password",
			"value": "2FederateM0re"
		},
		{
			"key": "pf-server-cert-p12b64",
			"value": "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"
		},
		{
			"key": "pf-server-cert-password",
			"value": "P@ssword1"
		},
		{
			"key": "pf-oauth-clientmgt-admin-password",
			"value": "2FederateM0re"
		},
		{
			"key": "pf-oauth-clientmgt-admin-username",
			"value": "Administrator"
		},
		{
			"key": "pa-base-url",
			"value": "https://localhost:2000"
		},
		{
			"key": "pa-api-admin-user",
			"value": "Administrator"
		},
		{
			"key": "pa-api-admin-password",
			"value": "2FederateM0re"
		},
		{
			"key": "pa-public-https-keypair-p12b64",
			"value": "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"
		},
		{
			"key": "pa-public-https-keypair-password",
			"value": "P@ssword1"
		},
		{
			"key": "pa-confidential-https-keypair-p12b64",
			"value": "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"
		},
		{
			"key": "pa-confidential-https-keypair-password",
			"value": "P@ssword1"
		},
		{
			"key": "pa-local-pingfederate-host",
			"value": "pingfederate:2031"
		},
		{
			"key": "pa-local-pingdirectory-host",
			"value": "pingdirectory:1443"
		},
		{
			"key": "pa-proxy-terminated",
			"value": "false"
		},
		{
			"key": "pa-cert-header-encoded",
			"value": "false"
		}
	]
}